[
    {
        "id": "97e7314f695bb652",
        "type": "tab",
        "label": "UrlCollection",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1a7c99c.1d3f48",
        "type": "tab",
        "label": "Excel to JSON Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "68459bb5ee15fc71",
        "type": "tab",
        "label": "Flow 23",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ef8732eb0726477",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa51d0694c73d14f",
        "type": "subflow",
        "name": "Get Token SFORINAPI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 200,
                "wires": [
                    {
                        "id": "fc4e6bca72218567"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 300,
                "wires": [
                    {
                        "id": "48d66183d3f1ef66",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "317a0e3edab25639",
        "type": "subflow",
        "name": "Token Netsis",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 380,
                "wires": [
                    {
                        "id": "359bbc3396c63271"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 300,
                "wires": [
                    {
                        "id": "420f6597bca31418",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Status",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "30dd5fc9ce2b5545",
        "type": "subflow",
        "name": "NetsisProductType",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 200,
                "wires": [
                    {
                        "id": "12cd4977e5b8f047"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 200,
                "wires": [
                    {
                        "id": "50d3c1690610e3fe",
                        "port": 0
                    }
                ]
            },
            {
                "x": 660,
                "y": 220,
                "wires": [
                    {
                        "id": "53f3d73604363dbe",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7cdf28f23984a61d",
        "type": "subflow",
        "name": "MongoDbNodeRedLog_V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 360,
                "y": 140,
                "wires": [
                    {
                        "id": "b055f9f7c5e3ed26"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "sourceSystem",
                "type": "str",
                "value": ""
            },
            {
                "name": "sourceModule/Flow",
                "type": "str",
                "value": ""
            },
            {
                "name": "destinationSystem",
                "type": "str",
                "value": ""
            },
            {
                "name": "status",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c34fc38f83091edb",
        "type": "subflow",
        "name": "SFORIN2Netsis_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "37cbd46fe4fdbaf5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 780,
                "wires": [
                    {
                        "id": "2bfef7a835ff1b51",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "73bcc0f49f21e3cf",
        "type": "subflow",
        "name": "SFORIN2Netsis_InsertStock_Rest_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 220,
                "wires": [
                    {
                        "id": "4169215be0943297"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 660,
                "wires": [
                    {
                        "id": "530910680df15e9e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7defd81363e19950",
        "type": "subflow",
        "name": "Netsis2SFORIN_InsertStock_Rest_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 400,
                "y": 120,
                "wires": [
                    {
                        "id": "669ac6e3dde76840"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 1260,
                "wires": [
                    {
                        "id": "0edcffb0cc6fe6e9",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c98479901d9e9b95",
        "type": "subflow",
        "name": "Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "fd39b5f40a5466e5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 1240,
                "wires": [
                    {
                        "id": "ebaa82cd07fe202e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "01bb3059fc08565d",
        "type": "subflow",
        "name": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 140,
                "wires": [
                    {
                        "id": "45bfbb5076e745f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1680,
                "y": 1080,
                "wires": [
                    {
                        "id": "a32df7934f2f7d5c",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1660,
                "y": 1240,
                "wires": [
                    {
                        "id": "bc1fec0a3b9e19fa",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8436fe1a449a7297",
        "type": "subflow",
        "name": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 260,
                "y": 300,
                "wires": [
                    {
                        "id": "4ebd94f2f25892f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 700,
                "wires": [
                    {
                        "id": "731e19687a0d03c7",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1240,
                "y": 680,
                "wires": [
                    {
                        "id": "60402cd7e995d83c",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "79ed7abbe7cc27ac",
        "type": "subflow",
        "name": "Node-Red-Inregrations",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 380,
                "y": 220,
                "wires": [
                    {
                        "id": "e529a80cdec9671b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 700,
                "wires": [
                    {
                        "id": "8d9f039cb17dbbed",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d296b4008b6072d8",
        "type": "subflow",
        "name": "MSSQL Connection",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "1590916a9f353689"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 180,
                "wires": [
                    {
                        "id": "1590916a9f353689",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "query",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0a4f4f9f59c2be20",
        "type": "subflow",
        "name": "Update State Integration Params",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 280,
                "wires": [
                    {
                        "id": "8fa80a8357766e9d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 460,
                "wires": [
                    {
                        "id": "d23efe6b9d85d197",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "status",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "533e6c27c7c050c1",
        "type": "subflow",
        "name": "GroupNetsis2SFORIN_ProductTypeIntegration_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 220,
                "wires": [
                    {
                        "id": "b86a1ce878613e8e"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c751949c59f2c3bc",
        "type": "subflow",
        "name": "GROUP Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 200,
                "wires": [
                    {
                        "id": "7b2950f4aa48db06"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bb656f77f61addff",
        "type": "subflow",
        "name": "Set propIntegration",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 240,
                "wires": [
                    {
                        "id": "691a79796462bde3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 240,
                "wires": [
                    {
                        "id": "691a79796462bde3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "status",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cff71436fcabdffa",
        "type": "subflow",
        "name": "GROUP SFORIN2Netsis_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 300,
                "wires": [
                    {
                        "id": "7f1db3a8fb6d4153"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 440,
                "wires": [
                    {
                        "id": "f9d2d10b5062f8e2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5b2ae23bfd497a94",
        "type": "subflow",
        "name": "MetropolUn_Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 180,
                "wires": [
                    {
                        "id": "f857d4221fcefe11"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 2040,
                "wires": [
                    {
                        "id": "9df4f7571e38ba9e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "17803f695ab8af0d",
        "type": "subflow",
        "name": "MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 140,
                "wires": [
                    {
                        "id": "4facfe6a2109a10a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 900,
                "wires": [
                    {
                        "id": "c75e104d9b1606e8",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IsFetchS4INStocks",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e93f97e999fe62ab",
        "type": "subflow",
        "name": "MetropolUnNetsisProductType",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "ed791a059d2f5a68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 160,
                "wires": [
                    {
                        "id": "607330f60d089b54",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 280,
                "wires": [
                    {
                        "id": "4afa2e6bcf72d66f",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3179678ca8b98244",
        "type": "subflow",
        "name": "MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "087b5529bb1658bd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1580,
                "y": 660,
                "wires": [
                    {
                        "id": "c3d1d8e6d6eb7e40",
                        "port": 0
                    }
                ]
            },
            {
                "x": 860,
                "y": 820,
                "wires": [
                    {
                        "id": "460723836a4afab3",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IsFetchS4INPartner",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a464cb4f18f8f1f5",
        "type": "subflow",
        "name": "GROUPMetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "f123bd878033b75f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1480,
                "y": 380,
                "wires": [
                    {
                        "id": "ce28ed41b247fece",
                        "port": 0
                    }
                ]
            },
            {
                "x": 860,
                "y": 160,
                "wires": [
                    {
                        "id": "b3661310f2bcd661",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b9701e9ae1caaffd",
        "type": "subflow",
        "name": "GroupMetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "15eb7783fe448944"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1440,
                "y": 360,
                "wires": [
                    {
                        "id": "23fcab0d6f6dea2e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 900,
                "y": 140,
                "wires": [
                    {
                        "id": "f55ceedb9839ae82",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bf7e6ed2256e3a44",
        "type": "subflow",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 520,
                "wires": [
                    {
                        "id": "7c50f1ea4224f5dc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1560,
                "y": 900,
                "wires": [
                    {
                        "id": "1bec2230dc02f447",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1180,
                "y": 1020,
                "wires": [
                    {
                        "id": "4958f6ff314c62cc",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f62922f2ea3dfbe6",
        "type": "subflow",
        "name": "GroupMetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 160,
                "wires": [
                    {
                        "id": "d64bb0ce43f56b78"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1520,
                "y": 380,
                "wires": [
                    {
                        "id": "b742b94d7c798c1b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 960,
                "y": 200,
                "wires": [
                    {
                        "id": "5fd47f67e0d4c1c4",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "706f23c6f30383df",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "73a39c4d26d953f7",
            "0a9d0c09e5e66bfc",
            "800f172a148debe2",
            "1dd8035c60ce989d",
            "3b4d93c16d3a5168"
        ],
        "x": 74,
        "y": 19,
        "w": 1012,
        "h": 122
    },
    {
        "id": "12c2f3079075e98b",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "66ea17c08b9dbd90",
            "aa2a44f844bd5722",
            "f6f0cf50a4a358aa",
            "8ee80d8e6fb9b7dc",
            "6ad448f9a70ec0ae"
        ],
        "x": 74,
        "y": 199,
        "w": 1132,
        "h": 122
    },
    {
        "id": "fb7c7f527c78e092",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "316b5a0a239a2c20",
            "6511671270bb981d",
            "b59e709b49ffbc58",
            "d541408c55a68f9f",
            "d928709505e723b9"
        ],
        "x": 74,
        "y": 379,
        "w": 1132,
        "h": 122
    },
    {
        "id": "2559be7f150b7436",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5c4b09de06572d97",
            "db9c75c6aef4f10c",
            "be0d5d30b7e02e90",
            "b89a9a7d58f87d47",
            "386d57ac9b4e7638"
        ],
        "x": 74,
        "y": 539,
        "w": 1132,
        "h": 122
    },
    {
        "id": "29b238b19b78a24b",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "35930a7d3a915a90",
            "45c3178534c0e16d",
            "32eb9c991ec5ea3f",
            "6e8404b6a19ab18e",
            "88b4cf6c8c3666ea"
        ],
        "x": 74,
        "y": 699,
        "w": 1132,
        "h": 122
    },
    {
        "id": "3c4e8c93618bf8f5",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "96e2565c84d35dff",
            "65db466543736034",
            "d99f18df9a178802",
            "b6dd1452cf044784",
            "54fb37b5146084ab"
        ],
        "x": 74,
        "y": 839,
        "w": 1132,
        "h": 122
    },
    {
        "id": "f95fc539736e93fc",
        "type": "group",
        "z": "f1a7c99c.1d3f48",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "69e914bdcd5da288",
            "d233cb08ef080f8c",
            "b8d3af0c103ae1a8",
            "fabcb961c6197190",
            "2cd911f23f85bec2",
            "0fc304d9a0397cdd",
            "cbc7bfc52b797780",
            "4c771b7d72ec5214",
            "c5da913ea07b269c",
            "e9ca6b2287058cea",
            "6748ad1477caafc2",
            "4e1bbcf93be288f7",
            "19b7e563d0120af7"
        ],
        "x": 74,
        "y": 379,
        "w": 1732,
        "h": 302
    },
    {
        "id": "9c638029e6a502f7",
        "type": "group",
        "z": "c34fc38f83091edb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1092e26ede67c90d",
            "53c08a45a642e47b",
            "cb6d0098ab2f5b08",
            "8718f946e9693a70",
            "5a25d86414943c98",
            "679a352f386ac881",
            "c806c17cec29c3ce",
            "cbe3fd8d71dfaafc",
            "2b4bd4abec322b6a",
            "88db9b841ebb3929",
            "37cbd46fe4fdbaf5",
            "a7f8959b3820e088"
        ],
        "x": 154,
        "y": 159,
        "w": 792,
        "h": 302
    },
    {
        "id": "43c38bd59b12a723",
        "type": "group",
        "z": "73bcc0f49f21e3cf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f8f0a54b3b3981f",
            "46098b541d83894d",
            "f7c3cf75ad1cd3ad",
            "e1bddc7ba88c31ff",
            "036721ca56da574a",
            "4773923cf77e68b8",
            "6f8459932c16cb57",
            "8d0b5b4b9c6005ea",
            "4a8d53d8472af3aa",
            "2dfa9bc630189151",
            "4169215be0943297"
        ],
        "x": 214,
        "y": 119,
        "w": 1012,
        "h": 362
    },
    {
        "id": "16d68ae37c966577",
        "type": "group",
        "z": "73bcc0f49f21e3cf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "530910680df15e9e",
            "6d82dee7e9c3eaa6",
            "64c8bf14f9283849",
            "b4a48818b854434e",
            "2664c89f94d5d263",
            "1d0893d325e7fde9",
            "1748498982788e78",
            "66a7d3b048815c81",
            "45a16768398968b6",
            "f7400f4f69f3f0b9",
            "14a1bd9a6f799d0f",
            "edbe8e9841006ec9",
            "80f841d0f57da599",
            "6c0aba63526c969d",
            "30fe69813cca3656",
            "69919dd567898653",
            "1d35d56abb2fe346",
            "5280b858ea5f0f27",
            "60ed029db915ba30",
            "1003bee7386f0ee4"
        ],
        "x": 214,
        "y": 519,
        "w": 1272,
        "h": 462
    },
    {
        "id": "cac22249c3b2266f",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2d714c1a3b03f9cd",
            "0edcffb0cc6fe6e9",
            "410334039bcf7090",
            "e45ffea3e99d0f81",
            "146030b32dde17df",
            "da441135bb95cdbf",
            "e6ee46bbf293f5a4",
            "2b4b492e83e2b9a5",
            "8b96a69c8c3fd36d",
            "8ce8edf07e100f74",
            "df84b79cbe394492",
            "03c4bf59d993773f",
            "58e8a2a6f6fc0502",
            "3493b3bbd2dc2ff2",
            "1304999a0b718ecd",
            "2006cf42c69414d2",
            "c87b6b3b1f79d456",
            "88e2158b608619ba"
        ],
        "x": 134,
        "y": 1019,
        "w": 1732,
        "h": 302
    },
    {
        "id": "17c24c3c0a543d66",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e7e584fba8986c15",
            "bcfbce53a162190c",
            "2ed8fdb2f308ff39",
            "0de061d6a541cf33",
            "ae8890c371c77bef",
            "a1e958abc61613d0",
            "2f101de07d11739e",
            "96baada44d1f4877",
            "92c7f455a989dc78",
            "b8c186db23270a18",
            "c7ea41c46373697f",
            "46460bfc60fe7dbf",
            "5b6148cc337bfdc9",
            "5eb71ffc293a75b8",
            "8c61f291fe42c220",
            "6da70b9a59b99025",
            "d51c0e5157902bb4",
            "1d2cf5374de79379"
        ],
        "x": 134,
        "y": 339,
        "w": 1622,
        "h": 302
    },
    {
        "id": "a8f1fd19b36198e2",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "70d63b2bc1cd3e70",
            "40f91329a9597aba",
            "e2a558d60e316c06",
            "9af6d363228efc7b",
            "f596c49f1580edb3",
            "70a3c37ab62a138d"
        ],
        "x": 134,
        "y": 779,
        "w": 822,
        "h": 182
    },
    {
        "id": "d03a79754f9c3a19",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a3ef115fa5f43ea4",
            "669ac6e3dde76840",
            "c2da631ae4d47e52",
            "81464857806c43dc",
            "6a86e844d23f4744",
            "710b26fe2c592f23",
            "4230925012844847",
            "619be310e265ce67"
        ],
        "x": 364,
        "y": 79,
        "w": 1022,
        "h": 202
    },
    {
        "id": "15cac131f8c56bbf",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d8166d4f40a6501b",
            "2a7f0d36b27a0556",
            "009d56552acd23b5",
            "4ad699fbc1c85e5c",
            "517aeab92d1cf534",
            "ff9df51942af402a",
            "8b37983f13e60a5d",
            "afd43ed992b75b2e",
            "99de14425a992694",
            "05c0e6f1b19825e3"
        ],
        "x": 44,
        "y": 459,
        "w": 1642,
        "h": 202
    },
    {
        "id": "ce76bc547c1a82fe",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "14fd7bd19dcbd822",
            "ebaa82cd07fe202e",
            "8103ddc7aa8148a5",
            "ddc6d3b003a8a708",
            "c68ca43737e3afd3",
            "f855b6351fa8677f",
            "d8f4e316d1f97e7c",
            "98816bd9b74d4eb9",
            "ba532fba28791e9a",
            "596ed20368d22575",
            "5f31d440f7140521",
            "570c99c5addac9f2",
            "e98781f4d949c827",
            "e40ac389d1f41902",
            "2ece615c2b13df72",
            "6264233b1a16943c",
            "519d5dd7e0baa622",
            "c9c8a55bfc345060",
            "1e24bbaf141fcbbb"
        ],
        "x": 44,
        "y": 999,
        "w": 1542,
        "h": 282
    },
    {
        "id": "fd942685049f2a2a",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a4819f2ac0278e60",
            "74736a8b3f8aa8c4",
            "1b1b9a0c2fc17b97",
            "da16e3cf9032d134",
            "b560c98ad6781ae1",
            "f285cf3109419bbe",
            "135730bb62fe93ed",
            "a2f665fbd87176f1",
            "7767f5a781a34294",
            "72917536637091f7",
            "1bfaa5020382981a",
            "fd39b5f40a5466e5"
        ],
        "x": 54,
        "y": 79,
        "w": 1012,
        "h": 342
    },
    {
        "id": "73465d896b75a003",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a4cde71b52a9ef20",
            "db643989eb6fd176",
            "b310cfd8ddd31c00",
            "58519c213a7f5f5a",
            "21882ae1acd70ff2",
            "36365d0ca790f463"
        ],
        "x": 34,
        "y": 799,
        "w": 912,
        "h": 182
    },
    {
        "id": "0bd7c6a05fec8e32",
        "type": "group",
        "z": "01bb3059fc08565d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4f41d41ee83aa6b4",
            "c3a334e5f6423d0e",
            "1f545552c4cdec0e",
            "1aeacf026d672ef6",
            "9ea82e46bbb474ec",
            "a19c837ad4e696df",
            "326fcab0bd8dc6bf",
            "f6b3a5a457ec15d7",
            "581038513876f866",
            "6f0bf6534965f587"
        ],
        "x": 34,
        "y": 439,
        "w": 892,
        "h": 282
    },
    {
        "id": "1898c16223ea88ea",
        "type": "group",
        "z": "01bb3059fc08565d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d2c0ad086e181908",
            "328284d6746e3a1b",
            "ae927ebb0636aba9",
            "15a32a89145b5edd",
            "08592d08724757d9",
            "c962bc8e9e9ea4e4",
            "f73a859e799483a9",
            "45bfbb5076e745f8",
            "e62b31aae00b8535",
            "acec8daf85dc23fe",
            "422063b50a6c71c4"
        ],
        "x": 34,
        "y": 99,
        "w": 932,
        "h": 282
    },
    {
        "id": "6060336732b76733",
        "type": "group",
        "z": "01bb3059fc08565d",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "1c8d52dc82e34ace",
            "bccc7e7eb7b3fbd1",
            "7a34cae2444eaeb5",
            "8fb2ea515478697a",
            "15af2bce890a94a9",
            "ac6b5b6ef8fb49b4",
            "dec8892eae27f937",
            "402dabd67e050964",
            "bc1fec0a3b9e19fa",
            "a32df7934f2f7d5c",
            "d36a51f07a52abc3",
            "ff921d62aaaa9b18",
            "cc0c4ab3a7a55930",
            "80ac82dcf60b219b",
            "873c9acca903bcab",
            "db468ab2866442ad",
            "c4a0097bf01382b0",
            "7878c13206b72e35",
            "f81eb83b2bcee90c",
            "8b38d586a642782a",
            "df9cd569a43e426b",
            "3a6991a4927476c1",
            "1a95acdff02ab213",
            "9f7e741cb944e101",
            "e9b9b895fb84b45f"
        ],
        "x": 34,
        "y": 759,
        "w": 1792,
        "h": 642
    },
    {
        "id": "7d4587540a2c8610",
        "type": "group",
        "z": "8436fe1a449a7297",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2444a4409e75f27f",
            "b71d539f58e7dd19",
            "731e19687a0d03c7",
            "9cfe6fbdaa957b93",
            "60402cd7e995d83c",
            "c766752a5b2323da",
            "01d0b27220dd17fd",
            "90048689613f79ce",
            "0a43e71004f067ba",
            "214930c6cfe1deae",
            "a36e29b0d3474fe6",
            "cf7c82521c4f344b",
            "fac8368732c8873e"
        ],
        "x": 134,
        "y": 519,
        "w": 1232,
        "h": 322
    },
    {
        "id": "bdf338825a745484",
        "type": "group",
        "z": "8436fe1a449a7297",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "400d8b1d02aa7132",
            "685e2ce6255c4888",
            "a44ddd7f28361bba",
            "f73238c7fe7374c7",
            "c53ac1b1ca0a5db4",
            "7b5cfbcf6a0e3f56",
            "9000d874e5477995",
            "22c3c138b89ecb4f",
            "82e72b5056fab3c7",
            "4e482c5861f36862",
            "50e71062bd312459",
            "770459b346fe2747",
            "4ebd94f2f25892f8"
        ],
        "x": 154,
        "y": 199,
        "w": 1692,
        "h": 302
    },
    {
        "id": "108f2ffe217f63da",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a76a2519da79eef8",
            "ead1e9a83c598d57",
            "1ddc986150f81f61",
            "884e8a7da130656c",
            "2fc69c8d9eb46241",
            "f857d4221fcefe11",
            "eac45d8363566f7b",
            "f70fb1f8fc565ffa",
            "c1aa45c2fbe91e0f"
        ],
        "x": 54,
        "y": 119,
        "w": 932,
        "h": 282
    },
    {
        "id": "5b75673458d774a7",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "6dc99374054a26e8",
            "4ca3f97a18e92d62",
            "9c81f956a6d89063",
            "f7cdcf2f0edd64b4",
            "815c2ae98d00c5bf",
            "a48717c13f51d78a",
            "6c9a90593a3d872f",
            "4fb1884db3f59fd3",
            "756712d785c49001",
            "660b73c8caa85f7d",
            "0d109ce5201c7170",
            "5790442c0ce9fe2b",
            "8ee71b06f782ddeb",
            "a9151f608e0cb721",
            "576e760d3ceae24b",
            "d42c8ff5881498e4",
            "ca859a11d24a326f",
            "cdb49293da75c5bd",
            "b35bc8ff878e94cb",
            "f217409039cc79af",
            "040c0be6b76cc14f",
            "6780aab150360559",
            "6d38ea25182761c5",
            "1bd2620d8e18327a",
            "0da86f6b93c80314",
            "16d1f410e64887fb"
        ],
        "x": 54,
        "y": 419,
        "w": 1792,
        "h": 642
    },
    {
        "id": "92d86d0b5bb6ae36",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "7ea64fbbc371f08c",
            "559aeaa67c1aa68c",
            "af2a7bc3c4a7ffdd",
            "3826e280e67e472b",
            "49480f5bf7fc7dd9",
            "3c55b92814464393",
            "18ea68b8cd0f85bd",
            "91c614bf350e0eea",
            "498e2acdd7a96bbb",
            "a9fc6d601a039a65",
            "06a609fd9d1ff22f",
            "79ec6beb55886709",
            "8769ce217ae22c20",
            "c1809acaf56047d8",
            "744d130e112a8424",
            "36a4dac9fe653cf7",
            "bf1ef8d3362128ba",
            "8773848cc5b62a20",
            "3d931c21cf043166",
            "35dd0b33ed7f996c",
            "c34224106512ce20",
            "c8a7c02d48b81dc9"
        ],
        "x": 24,
        "y": 1099,
        "w": 1822,
        "h": 642
    },
    {
        "id": "167f4d272f155624",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8c01d939eb123f5a",
            "a5bcf342b35175ca",
            "84f6b5a28bab6643",
            "89ad0a2a79add44f",
            "0bf3e30ba3e4b060",
            "3e29b77e3521d84e",
            "8d8bacc664ddc537",
            "ad60f36acc269401",
            "222965ddb0e09195",
            "2f847f3ed271a069"
        ],
        "x": 44,
        "y": 459,
        "w": 1642,
        "h": 202
    },
    {
        "id": "69a8c850b940485b",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4532ac7f0859e986",
            "c75e104d9b1606e8",
            "d82b08200f5c2b8f",
            "02661279d9e35e94",
            "a21f72fe43da0dab",
            "b0ae507329500bc1",
            "c6600975483aa103",
            "5ac2beb0bfc134c6",
            "6268b9dbdf76f010",
            "9a330421bcc26d1a",
            "b628d844fcac720d",
            "6ad28bc266cdda15",
            "42cb4ef1b0076ed6",
            "be78f7bcf5b6f88e",
            "5a72172dbfbc22d3",
            "6742c93f2b2198d3",
            "8da1e5726ef27a97",
            "dd46605ec969997f"
        ],
        "x": 44,
        "y": 679,
        "w": 1542,
        "h": 282
    },
    {
        "id": "c80683f7b8cf0f73",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0e65efccab73ad96",
            "09573dbd4c0cb283",
            "1957f1b821b1f4f1",
            "710f012436a1ab22",
            "15155f40f5b91522",
            "e8585defc8d09159"
        ],
        "x": 54,
        "y": 999,
        "w": 842,
        "h": 182
    },
    {
        "id": "fbf5966f1914eea8",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f68b4c2669c7b292",
            "1343bc142841a4e4",
            "4dda1622c9781aad",
            "cb3c99cb363b481e",
            "9fa0ab1867412ac8",
            "83b889e0e475c165"
        ],
        "x": 54,
        "y": 1199,
        "w": 912,
        "h": 182
    },
    {
        "id": "5e45d235ed7ac2ab",
        "type": "group",
        "z": "3179678ca8b98244",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b24fdcebb2dcf481",
            "60d262d68fd38bb5",
            "9fb2c66596909a2c",
            "fa342b1c82311833",
            "4386f9df01967957",
            "2abdc55b072f67ef",
            "cc380e03303b4af4",
            "c171daf381137d01",
            "6f3c1458adda9638",
            "799dac1d4bf83dcb",
            "38114d35862ed23e",
            "18cfd7297ceb0607",
            "087b5529bb1658bd"
        ],
        "x": 94,
        "y": 39,
        "w": 1012,
        "h": 342
    },
    {
        "id": "87d43c6fb5912917",
        "type": "group",
        "z": "3179678ca8b98244",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d1c7499ec2ea68a6",
            "61d8f26479170d8b",
            "842d030b57279da7",
            "982a57164fc3bc83",
            "a26db93e9a990c25",
            "c1e488d820c2ae1a",
            "f0c631f9dcd83c72",
            "3a2246370c17d5ae"
        ],
        "x": 84,
        "y": 399,
        "w": 1232,
        "h": 142
    },
    {
        "id": "683105b12f49c30e",
        "type": "group",
        "z": "3179678ca8b98244",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eaf2da737977c5fe",
            "460723836a4afab3",
            "abec2a942a221806",
            "fab2d33027ad7506",
            "4ad06d787ca38a2e",
            "7f0bd2dffc849ab5",
            "63cb9e6fbc108652",
            "1b04e49cedc832aa",
            "c3d1d8e6d6eb7e40",
            "338ac38608430c69",
            "9ebc440ff99c3a3c",
            "9e9918b6b39da872",
            "8f35cb35014d03db",
            "0b1060f3984dd8ac",
            "b9e08168639edbf6",
            "d6ce66d90ff08e95",
            "bf2dac925cc58e4d",
            "48422de81ff80973",
            "c56285e4f753814c"
        ],
        "x": 84,
        "y": 619,
        "w": 1542,
        "h": 282
    },
    {
        "id": "1242987d19abfe4b",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "30772c7a218b9544",
            "d675a9b6680e6bef",
            "a5e2e91b845d2064",
            "4d04ba72d55fd3c3",
            "bd7d0b9d21df7ed5",
            "d4fbe12ee7adc6f3",
            "eee6f7bd51d4dd1d",
            "140b08892f9d7d47",
            "bef47be5ebc9683b",
            "0a0b1710a50ca970",
            "bb19590bab6bf786",
            "bd7d0e62813ab7df"
        ],
        "x": 134,
        "y": 39,
        "w": 1092,
        "h": 362
    },
    {
        "id": "a5e0ee44f2fb8456",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b096bb71a3c95d9d",
            "10bedebbf4e112b5",
            "52791c5ca8a0080a",
            "12bf127cb2cf5cec",
            "b5f00e0e207bbb16",
            "7924c40ccd5e027d",
            "ecdf9c87812b0bc9",
            "5d657f0f443bca62",
            "326b7025dfe0b336",
            "7c50f1ea4224f5dc",
            "76d109d28fcfdf66",
            "dba4e8a2225245bc"
        ],
        "x": 134,
        "y": 439,
        "w": 1092,
        "h": 362
    },
    {
        "id": "4370a35114295e81",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9578b0d362f0bc8b",
            "a209aa097313b145",
            "6f00d978c94db6cf",
            "42f01e2ec49a4485",
            "b8d8a2600d07733f",
            "f462afdfca79c0cd",
            "4958f6ff314c62cc",
            "99b73c425bb36448",
            "1bec2230dc02f447",
            "d0c104ede4c5627f",
            "654144ca271cdc68",
            "0e78bff0e53efa44",
            "eb7f34cf3e822144",
            "72ac58da9d503711",
            "2006e578b221a865",
            "0f8da2a3854bd4a6",
            "2d0d9fb1ae93f48a",
            "a3b0ee45a215571e",
            "3049a7107f25c59d",
            "58392219b3f9c2aa",
            "f1ac5c0632527d2c"
        ],
        "x": 124,
        "y": 834,
        "w": 1742,
        "h": 287
    },
    {
        "id": "68643bb6b5be193f",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c7227421624d95d1",
            "96c3dac546b822f5",
            "45a3ad2317958eaf",
            "b1bf6a640e7a3aeb",
            "4a3a9feae1897ec0",
            "ee0672a9b180a601",
            "69aa99fed3d8fd00",
            "daf5bc3dec63e406",
            "beeaf6c300562766",
            "8ee4e16f7af8eb35",
            "9df4f7571e38ba9e"
        ],
        "x": 14,
        "y": 1879,
        "w": 992,
        "h": 302
    },
    {
        "id": "8f53555fb01c63d0",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0763c8735243e42b",
            "79669afa9d392d90",
            "fdac71a5902687fe",
            "dc1349e1d6cd6744",
            "9992175cf38c7f2a",
            "fe7f1fd6938b9b86",
            "48b7d6fea57de9d5",
            "2e4ad7cfa8663c77",
            "460d11bbbad7f31a",
            "51d5544ae0849495",
            "45f1e2111ef4d70d",
            "6b1db2938b49fc97",
            "c08a4b7860d81ea4"
        ],
        "x": 114,
        "y": 1179,
        "w": 1092,
        "h": 329.5
    },
    {
        "id": "b7e7039210c831e5",
        "type": "group",
        "z": "6ef8732eb0726477",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5ea6f74069a7bec4",
            "3ff9d7e2114ebee6",
            "1890cc5d5c49407c",
            "abf71b4791b9d153",
            "49dc2113b508a602",
            "f21ce3536a80e220",
            "95f550781d6755bd",
            "b7a6c9c8427553da",
            "e464f23a4cb0db81",
            "ed09d757b379952e",
            "a20779063fc4c7c1",
            "f7342eaf2862b385",
            "7a23b7dbee23e90c"
        ],
        "x": 134,
        "y": 839,
        "w": 1092,
        "h": 329.5
    },
    {
        "id": "79c60a5c83f1f09d",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1826ee9bcabfc964",
            "cce8f946aa3f45d9",
            "6d3ab5afe316e058",
            "659798a6d80fb00a",
            "2cccaae036a25b9b",
            "c68136d45539bedd",
            "4f378fca2f4fd15c",
            "e47f8c49f8f6c022"
        ],
        "x": 74,
        "y": 999,
        "w": 1182,
        "h": 142
    },
    {
        "id": "d1440fa0abfac893",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [],
        "x": 0,
        "y": 0,
        "w": 40,
        "h": 40
    },
    {
        "id": "62b3f581ad49b8f4",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [],
        "x": 0,
        "y": 0,
        "w": 40,
        "h": 40
    },
    {
        "id": "24904440bd5e033d",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f93ef21edcdbfe77",
            "9114887d0e7b9eb5",
            "5699609978be02fc",
            "243ead1bc779db84",
            "ea8abe837b06040d",
            "8adf75c55d4276ff",
            "ebf9b753c0db2888",
            "583958b872d4e043",
            "b4ed7f0c34af5f24",
            "fe04c86380256fe1"
        ],
        "x": 54,
        "y": 1359,
        "w": 1302,
        "h": 302
    },
    {
        "id": "c7a67d413d6b7731",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4f184f848d4cf740",
            "dd81d2e8b3a0179d",
            "4e36532310976efb",
            "bf9de75c1d34fac8",
            "f3f8ebe822bf26c4",
            "0995b23b70969aaf",
            "84924e6e0470a11f",
            "e09ad973954473b9"
        ],
        "x": 64,
        "y": 1179,
        "w": 1182,
        "h": 142
    },
    {
        "id": "873c9acca903bcab",
        "type": "junction",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "x": 120,
        "y": 860,
        "wires": [
            [
                "bccc7e7eb7b3fbd1",
                "9f7e741cb944e101"
            ]
        ]
    },
    {
        "id": "576e760d3ceae24b",
        "type": "junction",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "4ca3f97a18e92d62",
                "1bd2620d8e18327a"
            ]
        ]
    },
    {
        "id": "b9e08168639edbf6",
        "type": "junction",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "x": 1260,
        "y": 660,
        "wires": [
            [
                "d6ce66d90ff08e95"
            ]
        ]
    },
    {
        "id": "d6ce66d90ff08e95",
        "type": "junction",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "x": 480,
        "y": 660,
        "wires": [
            [
                "4ad06d787ca38a2e"
            ]
        ]
    },
    {
        "id": "0f8da2a3854bd4a6",
        "type": "junction",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "x": 1460,
        "y": 880,
        "wires": [
            [
                "a3b0ee45a215571e"
            ]
        ]
    },
    {
        "id": "2d0d9fb1ae93f48a",
        "type": "junction",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "x": 780,
        "y": 860,
        "wires": [
            [
                "f462afdfca79c0cd"
            ]
        ]
    },
    {
        "id": "649633e811ec78e5",
        "type": "junction",
        "z": "b9701e9ae1caaffd",
        "x": 780,
        "y": 160,
        "wires": [
            [
                "c056f28f207c2b04"
            ]
        ]
    },
    {
        "id": "df8c0b88.91b0a8",
        "type": "MSSQL-CN",
        "name": "Local MSSQL Server Connection",
        "server": "192.168.40.31",
        "encyption": false,
        "database": "CAMKIRAN23"
    },
    {
        "id": "bbd9f7364a36898c",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "SFORIN_URL",
                "value": "http://65.21.156.32:5001/",
                "type": "str"
            },
            {
                "name": "userName",
                "value": "1",
                "type": "str"
            },
            {
                "name": "password",
                "value": "1",
                "type": "str"
            },
            {
                "name": "companyCode",
                "value": "metropolun",
                "type": "str"
            },
            {
                "name": "NetsisUrl",
                "value": "http://192.168.40.31:7071/",
                "type": "str"
            },
            {
                "name": "Bady",
                "value": "grant_type=password&branchcode=0&password=123&username=test&dbname=CAMKIRAN23&dbuser=TEMELSET&dbpassword=&dbtype=0",
                "type": "str"
            },
            {
                "name": "BranchCode",
                "value": "0",
                "type": "str"
            }
        ]
    },
    {
        "id": "fc4e6bca72218567",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "Get Token Params",
        "func": " \n \nglobal.set(\"companyCode\", env.get(\"companyCode\"))\nglobal.set(\"SFORIN_URL\", env.get(\"SFORIN_URL\") )\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.payload = {\n    data: [\n        {\n            userName: env.get(\"userName\"),\n            password: env.get(\"password\"),\n            companyCode: env.get(\"companyCode\"),\n            rememberMe: true\n        }\n    ],   \n     methodName: \"auth/api/v1/authenticate/token\",\n   \n    clientPath: \"/login\",\n    sender: \"\",\n    current: [\n        {\n            key: \"UserId\",\n            value: \"\"\n        },\n        {\n            key: \"Company\",\n            value: \"\"\n        },\n        {\n            key: \"Language\",\n            value: \"tr\"\n        }\n    ]\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            [
                "8f9f0d729ee14091"
            ]
        ]
    },
    {
        "id": "8f9f0d729ee14091",
        "type": "http request",
        "z": "fa51d0694c73d14f",
        "name": "Get Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}auth/api/v1/authenticate/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "1aaf0ca1bcd31c5c",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "global Token",
        "func": "var token= msg.payload.data[0].accessToken;\nglobal.set(\"SforinToken\",token)\nmsg.token=token;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "48d66183d3f1ef66"
            ]
        ]
    },
    {
        "id": "ed7dde49642f30a3",
        "type": "catch",
        "z": "fa51d0694c73d14f",
        "name": "catch errors",
        "scope": [
            "8f9f0d729ee14091"
        ],
        "uncaught": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "7e2fe64a37f665ab"
            ]
        ]
    },
    {
        "id": "7e2fe64a37f665ab",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj = \"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg, null];\n} else {\n\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "fc4e6bca72218567"
            ],
            [
                "f14226dc22bd86e9"
            ]
        ]
    },
    {
        "id": "84dd65d3bccc3277",
        "type": "complete",
        "z": "fa51d0694c73d14f",
        "name": "",
        "scope": [
            "8f9f0d729ee14091"
        ],
        "uncaught": false,
        "x": 230,
        "y": 300,
        "wires": [
            [
                "1aaf0ca1bcd31c5c"
            ]
        ]
    },
    {
        "id": "f14226dc22bd86e9",
        "type": "debug",
        "z": "fa51d0694c73d14f",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 260,
        "wires": []
    },
    {
        "id": "48d66183d3f1ef66",
        "type": "switch",
        "z": "fa51d0694c73d14f",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 300,
        "wires": [
            [],
            [
                "29b62df5c628c37b"
            ]
        ]
    },
    {
        "id": "29b62df5c628c37b",
        "type": "debug",
        "z": "fa51d0694c73d14f",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 360,
        "wires": []
    },
    {
        "id": "a476b4f9b05e3658",
        "type": "comment",
        "z": "317a0e3edab25639",
        "name": "Get Token Netsis",
        "info": "",
        "x": 600,
        "y": 180,
        "wires": []
    },
    {
        "id": "acbe4da6cc47716f",
        "type": "http request",
        "z": "317a0e3edab25639",
        "name": "Netsis Token Post",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "{{{NetsisUrl}}}api/v2/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1010,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "5bdc9f1ff86ee825",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "Set URL",
        "func": " \nmsg.NetsisUrl = env.get('NetsisUrl')\nmsg.payload =env.get('Bady')\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "acbe4da6cc47716f"
            ]
        ]
    },
    {
        "id": "d7218cdf6af30ede",
        "type": "complete",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "acbe4da6cc47716f"
        ],
        "uncaught": false,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "6927bab174930352"
            ]
        ]
    },
    {
        "id": "61b207c2836dcd6a",
        "type": "catch",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "acbe4da6cc47716f"
        ],
        "uncaught": false,
        "x": 570,
        "y": 360,
        "wires": [
            [
                "41c8689c07184f8a"
            ]
        ]
    },
    {
        "id": "420f6597bca31418",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "Get Token func",
        "func": "// Netsis Tokeni global olarak acıyoruz\nglobal.set(\"NetsisToken\", msg.payload.access_token)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "6927bab174930352",
        "type": "switch",
        "z": "317a0e3edab25639",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "420f6597bca31418"
            ],
            [
                "125c977b88a1dad3"
            ]
        ]
    },
    {
        "id": "41c8689c07184f8a",
        "type": "debug",
        "z": "317a0e3edab25639",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "125c977b88a1dad3",
        "type": "debug",
        "z": "317a0e3edab25639",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 340,
        "wires": []
    },
    {
        "id": "b710834ee31ae2b4",
        "type": "comment",
        "z": "317a0e3edab25639",
        "name": "KillToken Netsis",
        "info": "",
        "x": 600,
        "y": 560,
        "wires": []
    },
    {
        "id": "a2fd184a2044d0f2",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "Set Headers",
        "func": "\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\nmsg.NetsisUrl = env.get(\"NetsisUrl\")\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "f285f5aa1b1cf541"
            ]
        ]
    },
    {
        "id": "f285f5aa1b1cf541",
        "type": "http request",
        "z": "317a0e3edab25639",
        "name": "HTTP GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{NetsisUrl}}}api/v2/revoke",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 840,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "caba7a870024fba6",
        "type": "complete",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "f285f5aa1b1cf541"
        ],
        "uncaught": false,
        "x": 610,
        "y": 680,
        "wires": [
            [
                "82eaba9b376ffb27"
            ]
        ]
    },
    {
        "id": "82eaba9b376ffb27",
        "type": "switch",
        "z": "317a0e3edab25639",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 680,
        "wires": [
            [
                "9ec5cdc5900a1355"
            ],
            [
                "dafdcea6a5a3c8c4"
            ]
        ]
    },
    {
        "id": "9ec5cdc5900a1355",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "function 6",
        "func": " \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "33c69375e9ed97c1",
        "type": "catch",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "f285f5aa1b1cf541"
        ],
        "uncaught": false,
        "x": 590,
        "y": 720,
        "wires": [
            [
                "517a6abaa1291974"
            ]
        ]
    },
    {
        "id": "517a6abaa1291974",
        "type": "debug",
        "z": "317a0e3edab25639",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 720,
        "wires": []
    },
    {
        "id": "359bbc3396c63271",
        "type": "switch",
        "z": "317a0e3edab25639",
        "name": "",
        "property": "Status",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "5bdc9f1ff86ee825"
            ],
            [
                "a2fd184a2044d0f2"
            ]
        ]
    },
    {
        "id": "85352307ee8bf786",
        "type": "comment",
        "z": "317a0e3edab25639",
        "name": "Token Status",
        "info": "True ise Token oluştur\nFalse ise Token revoke",
        "x": 310,
        "y": 320,
        "wires": []
    },
    {
        "id": "dafdcea6a5a3c8c4",
        "type": "debug",
        "z": "317a0e3edab25639",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 720,
        "wires": []
    },
    {
        "id": "50d3c1690610e3fe",
        "type": "function",
        "z": "30dd5fc9ce2b5545",
        "name": "Return NetsisAllProductType",
        "func": "msg.netsisProductTypsCode = []\nlet items = msg.netsisProductTypes\n \n\nitems.forEach(x => {\n    msg.netsisProductTypsCode.push(x.productTypeCode)\n})\n\n \nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "12cd4977e5b8f047",
        "type": "function",
        "z": "30dd5fc9ce2b5545",
        "name": "Netsis Product Type",
        "func": "msg.netsisProductTypes = [\n    {\n        \"productTypeCode\": \"M\",\n        \"productTypeCodeName\": \"Mamul\"\n    },\n    {\n        \"productTypeCode\": \"Y\",\n        \"productTypeCodeName\": \"YARI MAMUL\"\n    },\n    {\n        \"productTypeCode\": \"A\",\n        \"productTypeCodeName\": \"YAN URUN\"\n    },\n    {\n        \"productTypeCode\": \"R\",\n        \"productTypeCodeName\": \"MAL.MUH.EK\"\n    },\n    {\n        \"productTypeCode\": \"I\",\n        \"productTypeCodeName\": \"ILK MADDE\"\n    },\n    {\n        \"productTypeCode\": \"B\",\n        \"productTypeCodeName\": \"AMBALAJ MALZEME\"\n    },\n    {\n        \"productTypeCode\": \"T\",\n        \"productTypeCodeName\": \"TICARI MAL\"\n    },\n    {\n        \"productTypeCode\": \"D\",\n        \"productTypeCodeName\": \"DIGER\"\n    },\n    {\n        \"productTypeCode\": \"F\",\n        \"productTypeCodeName\": \"FASONL\"\n    }\n]\n\n \n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "53f3d73604363dbe"
            ]
        ]
    },
    {
        "id": "53f3d73604363dbe",
        "type": "switch",
        "z": "30dd5fc9ce2b5545",
        "name": "",
        "property": "IncludenetsisProductTypsCode",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "50d3c1690610e3fe"
            ],
            []
        ]
    },
    {
        "id": "b055f9f7c5e3ed26",
        "type": "function",
        "z": "7cdf28f23984a61d",
        "name": "function 12",
        "func": "msg.insertData = {\n    \"id\": generateUniqueId(), // Benzersiz bir ID oluşturma fonksiyonu (kendi implementasyonunuzu ekleyin)\n    \"timestamp\": new Date().toISOString(), // Şu anki tarihi ve saati ISO formatında alır\n    \"sourceSystem\": env.get('sourceSystem') || \"\", // SourceSystem: Verinin çıktığı sistem (örn. NetSuite).\n    \"sourceModuleFlow\": env.get('sourceModuleFlow') || \"\", // SourceModule:/Flow Kaynak sistemdeki belirli modül/Flow (örn. Stoklar, Cariler).\n    \"destinationSystem\": env.get('destinationSystem') || \"\", // Hedef Node adı veya ID'si\n    \"data\": msg.logData|| \"\", // Gönderilen veri veya mesaj\n    \"status\": env.get('status') || \"\", // İşlemin durumu    \n    \"error_description\": msg.errorDescription || \"\", // Hata açıklaması   \n};\n\n// Benzersiz ID oluşturma fonksiyonu (örnek)\nfunction generateUniqueId() {\n    return  Math.random().toString(36);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 160,
        "wires": [
            [
                "27406d1f10c1837d"
            ]
        ]
    },
    {
        "id": "27406d1f10c1837d",
        "type": "function",
        "z": "7cdf28f23984a61d",
        "name": "MongoDbNodeRedLog_V1.0",
        "func": "let mongoData = null;\nlet allIntegrationCode = global.get('allIntegrationCode');\n\nif (allIntegrationCode) {\n    // Veriyi başarıyla aldınız, işlem yapabilirsiniz\n    mongoData = allIntegrationCode.find(item => item.path === \"MongoDbLogV_1.0\");\n    // node.warn(mongoData);\n}\n\nif (mongoData === null) {\n  \n    return;\n}\nconst MongoClient = global.get('mongodb');\nconst insertData = msg.insertData || {};  // Eklenecek veriyi msg.insertData içinden alıyoruz\n\nif (!MongoClient) {\n    node.error('MongoDB module not found in global context.');\n    return;\n}\n\nconst user = mongoData.user;\nconst password = mongoData.pass;\nconst server = mongoData.server;\nconst database = mongoData.dataBase;\nconst yourCollection = mongoData.collection;\n// Doğru şekilde veritabanı adı ile eşleştiğinden emin olun\n\n(async () => {\n    // MongoDB bağlantı URL'si\n    const url = `mongodb://${user}:${password}@${server}/${database}?authSource=admin`;\n   // node.warn(url)\n    let client;\n\n    try {\n        // MongoDB bağlantısı kurma\n       \n     \n        client = new MongoClient(url, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        });\n   \n        // Connect the client\n        await client.connect();\n \n        // Veritabanına bağlanma\n      \n        const db = client.db(database);\n     \n        // Belgeyi koleksiyona ekleme (insertOne)\n        const result = await db.collection(yourCollection).insertOne(insertData);  // Burada 'yourCollection' koleksiyon adını değiştirin\n     \n        // Başarılı işlem sonrası sonucu payload'a ekleyip ilk çıkışa gönderin\n        msg.payload = result;\n        \n        node.send([msg, null]);\n\n    } catch (err) {\n        // Bağlantı veya sorgu hatalarını loglayıp ikinci çıkışa gönderin\n      \n        msg = {\n            error: 'MongoDB insert error: ' + err.message\n        };\n        node.send([null, msg]);\n\n    } finally {\n        // Bağlantıyı kapatın\n        \n        if (client) {\n           \n            try {\n                await client.close();\n                // node.warn('MongoDB connection closed.');\n            } catch (closeErr) {\n                msg = {\n                    error: 'Error closing MongoDB connection: ' + closeErr.message\n                };\n                node.send([null, msg]);\n            }\n        }\n    }\n})();\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 160,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2bfef7a835ff1b51",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Process Item",
        "func": "let items = msg.insertQueries;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\n\nlet item = items[index];\nmsg.index = index;\n\nmsg.query = item;\n\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 720,
        "wires": [
            [
                "1d47c08060a1fa68"
            ],
            [
                "07d37c7441ef7b55"
            ]
        ]
    },
    {
        "id": "3f5a2c3888146bbe",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Netsis Stock json",
        "func": "let items=msg.matchingItems;\n// Empty the content of the message\n \n//\nlet insertQueries = items.map(item => {\n    var nonBaseUnit = item.units.find(unit => !unit.isBaseUnit);    \n    var baseUnit = item.units.find(unit => unit.isBaseUnit);\n    let stok_kodu = item.code;\n    let stok_adi = item.descriptions[0]?.longDefinition !== undefined && item.descriptions[0]?.longDefinition !== ''\n    ? item.descriptions[0]?.longDefinition\n    : item.descriptions[0]?.defaultDefinition;\n\n\n\n    let olcu_br1 = baseUnit ? baseUnit.unitCode : \"AD\";\n    let olcu_br2 = nonBaseUnit ? nonBaseUnit.unitCode : null;\n    let pay_1 = baseUnit ? (baseUnit.factor ? baseUnit.factor : 1) : 1;\n    let payda_1 = nonBaseUnit ? (nonBaseUnit.divisor ? nonBaseUnit.divisor : 1) : 1;\n    let pay2 = nonBaseUnit ? (nonBaseUnit.factor ? nonBaseUnit.factor : 1) : 1;\n    let payda2 = baseUnit ? (baseUnit.divisor ? baseUnit.divisor : 1) : 1;\n    let barkod1 = item.barcodes && item.barcodes[0] && item.barcodes[0].barcode ? item.barcodes[0].barcode : \"\";\n    let barkod2 = item.barcodes && item.barcodes[1] && item.barcodes[1].barcode ? item.barcodes[1].barcode : \"\";\n    let barkod3 = item.barcodes && item.barcodes[2] && item.barcodes[2].barcode ? item.barcodes[2].barcode : \"\";\n\n    return `\n    BEGIN TRY\n    BEGIN TRANSACTION;\n\n    -- Geçici tablo oluştur\n    CREATE TABLE #InsertedStsabit (\n        STOK_KODU VARCHAR(50)\n    );\n\n    -- İlk insert işlemi\n     INSERT INTO TBLSTSABIT(SUBE_KODU,ISLETME_KODU,STOK_KODU,STOK_ADI,OLCU_BR1,OLCU_BR2,PAY_1,PAYDA_1,PAY2,PAYDA2,FIAT_BIRIMI,BARKOD1,BARKOD2,BARKOD3,S_YEDEK1)\n    OUTPUT INSERTED.STOK_KODU INTO #InsertedStsabit(STOK_KODU)\n   VALUES (\n         '-1', '1','${stok_kodu}','${stok_adi}','${olcu_br1}', ${olcu_br2 ? `'${olcu_br2}'` : 'NULL'},\n        ${pay_1}, ${payda_1}, ${pay2}, ${payda2}, 1, '${barkod1}', '${barkod2}', '${barkod3}', 'SFORNIN'\n    );\n\n    -- Sonuçları kontrol et\n\n\n    -- İkinci insert işlemi, ilk işlemin sonucu başarılıysa çalışacak\n      INSERT INTO TBLSTSABITEK (Stok_Kodu, Tur, KayitTarihi, B_Yedek1)\n      SELECT STOK_KODU, 'D', GETDATE(), 0\n    FROM #InsertedStsabit;\n\n    -- Geçici tabloyu sil\n    DROP TABLE #InsertedStsabit;\n\n    -- İşlemi tamamla\n    COMMIT TRANSACTION;\nEND TRY\nBEGIN CATCH\n    -- Hata olduğunda işlemi geri al\n\t    DROP TABLE #InsertedStsabit;\n\n    ROLLBACK TRANSACTION;\n   \nEND CATCH;\n    `;\n});\n\nmsg.insertQueries = insertQueries;\n msg.index=0;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "2bfef7a835ff1b51"
            ]
        ]
    },
    {
        "id": "7d9bbc14fb05f9ec",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "Product is being shipped",
        "info": "",
        "x": 250,
        "y": 520,
        "wires": []
    },
    {
        "id": "3dd784f61d8fe95d",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "23703f17a1f153b1",
        "type": "differences",
        "z": "c34fc38f83091edb",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "sforinStockCode",
        "leftInputType": "msg",
        "rightInput": "netsisStockCodes",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "4e53cedf5709fb14"
            ]
        ]
    },
    {
        "id": "537becfd66af2276",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "function 17",
        "func": "msg.netsisStockCode=flow.get(\"netsisGroupCode\");\nlet netsisStockCodes=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 640,
        "wires": [
            [
                "23703f17a1f153b1"
            ]
        ]
    },
    {
        "id": "4e53cedf5709fb14",
        "type": "change",
        "z": "c34fc38f83091edb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "3f0b5d71b0018706"
            ]
        ]
    },
    {
        "id": "3f0b5d71b0018706",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "matchingItems",
        "func": "// const getAllSforinProductArray = msg.getAllSforinProduct;\n// const transferStockItemsArray = msg.transferStockItems;\n\n\n// const matchingItems = [];\n\n\n// transferStockItemsArray.forEach(product => {\n//      const productCode = product;\n\n   \n//     getAllSforinProductArray.forEach(item => {\n//         if (item.code === productCode) {\n          \n//             matchingItems.push(item);\n//         }\n//     }); \n\n    \n// });\n\n// msg.matchingItems=matchingItems;\n// return msg;\nconst getAllSforinProductArray = msg.getAllSforinProduct;\nconst transferStockItemsArray = msg.transferStockItems;\n\n// Create an array of matching items using filter\nconst matchingItems = getAllSforinProductArray.filter(item =>\n    transferStockItemsArray.includes(item.code)\n);\n\nmsg.matchingItems = matchingItems;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 620,
        "wires": [
            [
                "2bd303525d28ce86"
            ]
        ]
    },
    {
        "id": "2bd303525d28ce86",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "name": "MatchingItemsout(SforinToNetsisCardMMSSQL)",
        "mode": "link",
        "links": [
            "caa19908c3ea9daa"
        ],
        "x": 1735,
        "y": 620,
        "wires": []
    },
    {
        "id": "caa19908c3ea9daa",
        "type": "link in",
        "z": "c34fc38f83091edb",
        "name": "MatchingItemsIN(SforinToNetsisCardMMSSQL)",
        "links": [
            "2bd303525d28ce86"
        ],
        "x": 165,
        "y": 720,
        "wires": [
            [
                "3f5a2c3888146bbe"
            ]
        ]
    },
    {
        "id": "cb594ca6e53b6da0",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Set Index",
        "func": "msg.index++\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "6e0b9c7cffb8dd55",
                "c9b763cdc5844624"
            ]
        ]
    },
    {
        "id": "6e0b9c7cffb8dd55",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "name": "Set Index(SFORIN to Netsis Stock Card(MSSQL)) OUT",
        "mode": "link",
        "links": [
            "aabf79aa02e0c96e"
        ],
        "x": 1165,
        "y": 680,
        "wires": []
    },
    {
        "id": "aabf79aa02e0c96e",
        "type": "link in",
        "z": "c34fc38f83091edb",
        "name": "Set Index(SFORIN to Netsis Stock Card(MSSQL)) In",
        "links": [
            "6e0b9c7cffb8dd55"
        ],
        "x": 505,
        "y": 680,
        "wires": [
            [
                "2bfef7a835ff1b51"
            ]
        ]
    },
    {
        "id": "ee14cccb60c5e546",
        "type": "subflow:7cdf28f23984a61d",
        "z": "c34fc38f83091edb",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(MSSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1060,
        "y": 840,
        "wires": []
    },
    {
        "id": "c9b763cdc5844624",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "ee14cccb60c5e546"
            ]
        ]
    },
    {
        "id": "4c11114c875d2c7f",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1140,
        "y": 760,
        "wires": []
    },
    {
        "id": "07d37c7441ef7b55",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "TBLSTOKBAR",
        "func": "let querys = [];\nlet items = msg.matchingItems || [];\n\n// Only proceed if there are items to process\nif (items.length > 0) {\n    items.forEach(item => {\n        // Proceed only if barcodes exist\n        if (item.barcodes && item.barcodes.length > 0) {\n            for (let i = 0; i < item.barcodes.length; i++) {\n                let query = `\n                DECLARE @BARKOD VARCHAR(MAX)='${item.barcodes[i].barcode}'\n                DECLARE @STOK_KODU VARCHAR(MAX)='${item.code}'\n                IF NOT EXISTS (SELECT 1 FROM TBLSTOKBAR A\n                LEFT JOIN TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU \n                WHERE @BARKOD IN (A.BARKOD, B.BARKOD1, B.BARKOD2, B.BARKOD3) AND A.STOK_KODU = @STOK_KODU)\n                BEGIN \n                    DECLARE @OLCU_BR VARCHAR(MAX)\n                    DECLARE @OLCU_BR_ VARCHAR(MAX)='AD'\n\n                    SELECT \n                        @OLCU_BR = CASE WHEN OLCU_BR1 = @OLCU_BR_ THEN 1\n                                        WHEN OLCU_BR2 = @OLCU_BR_ THEN 2\n                                        WHEN OLCU_BR3 = @OLCU_BR_ THEN 3\n                                        ELSE 0 END \n                    FROM TBLSTSABIT WHERE STOK_KODU = @STOK_KODU\n\n                    INSERT INTO [dbo].[TBLSTOKBAR]([STOK_KODU],[BARKOD],[BARTIP],[BARTARIH],[S_YEDEK1],[S_YEDEK2],[S_YEDEK3],[S_YEDEK4],[I_YEDEK1],[I_YEDEK2],[C_YEDEK1],[C_YEDEK2],[D_YEDEK1],[KILIT],[YAPKOD])\n                    SELECT @STOK_KODU, @BARKOD, 'A', GETDATE(), NULL, NULL, NULL, NULL, @OLCU_BR, NULL, NULL, NULL, NULL, NULL, NULL\n                END \n                `;\n                querys.push(query);\n            }\n        }\n    });\n}\n\n// Set output message properties\nmsg.querys = querys;\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 800,
        "wires": [
            [
                "5cf2af52c552b53f"
            ]
        ]
    },
    {
        "id": "0fd2112b7bf462be",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "",
        "info": "Stok ekleme işlemleri bittiğinde eşleşmeğen stoklarda dönerek barkod ekleme yapıyoruz",
        "x": 620,
        "y": 760,
        "wires": []
    },
    {
        "id": "5cf2af52c552b53f",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Index",
        "func": "\n\n\nif (msg.querys.length>=msg.index)\n{\n    msg.query = msg.querys[msg.index];\n    msg.index++\n    return [msg,null];\n\n}\nelse\n{\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 860,
        "wires": [
            [
                "c759a4e61515b23f"
            ],
            []
        ]
    },
    {
        "id": "1092e26ede67c90d",
        "type": "http request",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "53c08a45a642e47b",
        "type": "complete",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "",
        "scope": [
            "1092e26ede67c90d"
        ],
        "uncaught": false,
        "x": 250,
        "y": 380,
        "wires": [
            [
                "cbe3fd8d71dfaafc"
            ]
        ]
    },
    {
        "id": "cb6d0098ab2f5b08",
        "type": "catch",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "catch errors",
        "scope": [
            "1092e26ede67c90d"
        ],
        "uncaught": false,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "5a25d86414943c98"
            ]
        ]
    },
    {
        "id": "8718f946e9693a70",
        "type": "function",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "1092e26ede67c90d"
            ]
        ]
    },
    {
        "id": "5a25d86414943c98",
        "type": "function",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "8718f946e9693a70",
                "679a352f386ac881"
            ]
        ]
    },
    {
        "id": "679a352f386ac881",
        "type": "debug",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 300,
        "wires": []
    },
    {
        "id": "c806c17cec29c3ce",
        "type": "function",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "a7f8959b3820e088"
            ]
        ]
    },
    {
        "id": "cbe3fd8d71dfaafc",
        "type": "switch",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "2b4bd4abec322b6a"
            ],
            [
                "c806c17cec29c3ce"
            ],
            [
                "88db9b841ebb3929"
            ]
        ]
    },
    {
        "id": "2b4bd4abec322b6a",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "link out 10",
        "mode": "link",
        "links": [],
        "x": 515,
        "y": 360,
        "wires": []
    },
    {
        "id": "88db9b841ebb3929",
        "type": "debug",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 420,
        "wires": []
    },
    {
        "id": "37cbd46fe4fdbaf5",
        "type": "subflow:fa51d0694c73d14f",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "8718f946e9693a70"
            ]
        ]
    },
    {
        "id": "a7f8959b3820e088",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "SFORIN to Netsis Stock Card(MSSQL)Out",
        "mode": "link",
        "links": [
            "42b7dd13fb41d587"
        ],
        "x": 775,
        "y": 380,
        "wires": []
    },
    {
        "id": "42b7dd13fb41d587",
        "type": "link in",
        "z": "c34fc38f83091edb",
        "name": "SFORIN to Netsis Stock Card(MSSQL)In",
        "links": [
            "a7f8959b3820e088"
        ],
        "x": 75,
        "y": 640,
        "wires": [
            [
                "6af7fbdc236febb4"
            ]
        ]
    },
    {
        "id": "085252c6f0a974ad",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\nmsg.payload = null;\nflow.set(\"netsisGroupCode\", items);\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 640,
        "wires": [
            [
                "537becfd66af2276"
            ]
        ]
    },
    {
        "id": "1ef538613b3bfe1d",
        "type": "subflow:d296b4008b6072d8",
        "z": "c34fc38f83091edb",
        "name": "",
        "x": 270,
        "y": 640,
        "wires": [
            [
                "085252c6f0a974ad"
            ]
        ]
    },
    {
        "id": "6af7fbdc236febb4",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "function 33",
        "func": "let branchCode = env.get(\"BranchCode\");\nmsg.query=`SELECT  STOK_KODU FROM TBLSTSABIT WHERE SUBE_KODU IN ('-1','${branchCode}')`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 125,
        "y": 640,
        "wires": [
            [
                "1ef538613b3bfe1d"
            ]
        ],
        "l": false
    },
    {
        "id": "1d47c08060a1fa68",
        "type": "subflow:d296b4008b6072d8",
        "z": "c34fc38f83091edb",
        "name": "",
        "x": 810,
        "y": 720,
        "wires": [
            [
                "cb594ca6e53b6da0"
            ]
        ]
    },
    {
        "id": "c759a4e61515b23f",
        "type": "subflow:d296b4008b6072d8",
        "z": "c34fc38f83091edb",
        "name": "",
        "x": 670,
        "y": 980,
        "wires": [
            [
                "5cf2af52c552b53f"
            ]
        ]
    },
    {
        "id": "43833519717b6b6b",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "name": "Tamamdır",
        "info": "",
        "x": 300,
        "y": 100,
        "wires": []
    },
    {
        "id": "8f8f0a54b3b3981f",
        "type": "http request",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1130,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "46098b541d83894d",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Get Product SFORINAPI",
        "info": "",
        "x": 350,
        "y": 160,
        "wires": []
    },
    {
        "id": "f7c3cf75ad1cd3ad",
        "type": "complete",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "",
        "scope": [
            "8f8f0a54b3b3981f"
        ],
        "uncaught": false,
        "x": 310,
        "y": 400,
        "wires": [
            [
                "8d0b5b4b9c6005ea"
            ]
        ]
    },
    {
        "id": "e1bddc7ba88c31ff",
        "type": "catch",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "catch errors",
        "scope": [
            "8f8f0a54b3b3981f"
        ],
        "uncaught": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "4773923cf77e68b8"
            ]
        ]
    },
    {
        "id": "036721ca56da574a",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 220,
        "wires": [
            [
                "8f8f0a54b3b3981f"
            ]
        ]
    },
    {
        "id": "4773923cf77e68b8",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "036721ca56da574a",
                "6f8459932c16cb57"
            ]
        ]
    },
    {
        "id": "6f8459932c16cb57",
        "type": "debug",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d0b5b4b9c6005ea",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\n\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n        var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n      \n        products.push(processedProduct);\n    });\n} \n\n\nmsg.payload = products;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "4a8d53d8472af3aa"
            ]
        ]
    },
    {
        "id": "4a8d53d8472af3aa",
        "type": "link out",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "SFORINAPI Products",
        "mode": "link",
        "links": [
            "6d82dee7e9c3eaa6"
        ],
        "x": 635,
        "y": 440,
        "wires": []
    },
    {
        "id": "2dfa9bc630189151",
        "type": "debug",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "4169215be0943297",
        "type": "subflow:fa51d0694c73d14f",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "",
        "x": 540,
        "y": 220,
        "wires": [
            [
                "036721ca56da574a"
            ]
        ]
    },
    {
        "id": "530910680df15e9e",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Process Item",
        "func": "let items = msg.items;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\n\nmsg.NetsisUrl = env.get('NetsisUrl')\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "b4a48818b854434e"
            ],
            [
                "45a16768398968b6",
                "1003bee7386f0ee4"
            ]
        ]
    },
    {
        "id": "6d82dee7e9c3eaa6",
        "type": "link in",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Netsis Prop",
        "links": [
            "4a8d53d8472af3aa"
        ],
        "x": 275,
        "y": 600,
        "wires": [
            [
                "64c8bf14f9283849"
            ]
        ]
    },
    {
        "id": "64c8bf14f9283849",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Netsis Stock json",
        "func": "let items = msg.payload; \n\nlet processedData = items.map(item => {\n    var nonBaseUnit = item.units.find(unit => !unit.isBaseUnit);\n    var baseUnit = item.units.find(unit => unit.isBaseUnit);\n    var today = new Date();\n\n    // Tarihi formatlama (yyyy-MM-dd)\n    var year = today.getFullYear();\n    var month = String(today.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyoruz\n    var day = String(today.getDate()).padStart(2, '0');\n\n    var formattedDate = year + '-' + month + '-' + day;\n\n    return {\n        \"StokTemelBilgi\": {\n            \"Stok_Kodu\": item.code,\n            \"Sube_Kodu\": '-1',\n            \"ISLETME_KODU\": '1',\n            \"Stok_Adi\": item.descriptions?.longDefinition !== undefined ? item.descriptions?.longDefinition : item.descriptions?.defaultDefinition,                                  \n            \"Olcu_Br1\": baseUnit ? baseUnit.unitCode : \"AD\",\n            \"Olcu_Br2\": nonBaseUnit ? nonBaseUnit.unitCode : null,\n            \"Pay_1\": baseUnit ? (baseUnit.factor ? baseUnit.factor:1) : 1,\n            \"Payda_1\": nonBaseUnit ? (nonBaseUnit.divisor ? nonBaseUnit.divisor : 1) : 1,            \n            \"Pay2\": nonBaseUnit ? (nonBaseUnit.factor ? nonBaseUnit.factor:1) : 1,\n            \"Payda2\": baseUnit ? (baseUnit.divisor ? baseUnit.divisor : 1) : 1,\n            \"Fiat_birimi\": 1, \n            \"Barkod1\": item.barcodes[0] !== undefined ? item.barcodes[0].barcode :\"\",\n            \"Barkod2\": item.barcodes[1] !== undefined ? item.barcodes[1].barcode : \"\",\n            \"Barkod3\": item.barcodes[2] !== undefined ? item.barcodes[2].barcode : \"\",            \n            \"S_Yedek1\": \"SFORNIN\",           \n        },\n        \"StokEkBilgi\": {\n            \"Stok_Kodu\": item.code,\n            \"Tur\": \"D\",             \n            \"KayitTarihi\": formattedDate,           \n            \"B_Yedek1\":0, },\n        \"TransactSupport\": true,\n        \"MuhasebelesmisBelge\": true\n    };\n});\nmsg.payload=null;  \nmsg.items = processedData;\nmsg.index = 0;\n return msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 600,
        "wires": [
            [
                "30fe69813cca3656"
            ]
        ]
    },
    {
        "id": "b4a48818b854434e",
        "type": "http request",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Netsis Post",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{NetsisUrl}}}api/v2/Items",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1290,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2664c89f94d5d263",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Product is being shipped",
        "info": "",
        "x": 370,
        "y": 560,
        "wires": []
    },
    {
        "id": "1d0893d325e7fde9",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Handle Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n   \n    return [msg, null,null,null];\n}\nelse if (msg.statusCode === 401)\n{\n    return [null, msg, null, null];\n}\nelse if (msg.statusCode === 402) {\n    msg.index++;\n    return [null, null, msg, null];\n}\n\nelse {\n    // Handle error\n    return [null, null, null,msg];\n}",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 720,
        "wires": [
            [
                "530910680df15e9e",
                "60ed029db915ba30"
            ],
            [
                "30fe69813cca3656"
            ],
            [
                "530910680df15e9e"
            ],
            [
                "80f841d0f57da599"
            ]
        ]
    },
    {
        "id": "1748498982788e78",
        "type": "complete",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "scope": [
            "b4a48818b854434e"
        ],
        "uncaught": false,
        "x": 310,
        "y": 740,
        "wires": [
            [
                "69919dd567898653"
            ]
        ]
    },
    {
        "id": "66a7d3b048815c81",
        "type": "catch",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "scope": [
            "b4a48818b854434e"
        ],
        "uncaught": false,
        "x": 290,
        "y": 780,
        "wires": [
            [
                "edbe8e9841006ec9"
            ]
        ]
    },
    {
        "id": "45a16768398968b6",
        "type": "subflow:317a0e3edab25639",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "Status",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1330,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f7400f4f69f3f0b9",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1200,
        "y": 720,
        "wires": []
    },
    {
        "id": "14a1bd9a6f799d0f",
        "type": "subflow:7cdf28f23984a61d",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 360,
        "y": 940,
        "wires": []
    },
    {
        "id": "edbe8e9841006ec9",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 900,
        "wires": [
            [
                "14a1bd9a6f799d0f"
            ]
        ]
    },
    {
        "id": "80f841d0f57da599",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\n msg.errorDescription =msg.statusCode\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 880,
        "wires": [
            [
                "6c0aba63526c969d"
            ]
        ]
    },
    {
        "id": "6c0aba63526c969d",
        "type": "subflow:7cdf28f23984a61d",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 920,
        "wires": []
    },
    {
        "id": "30fe69813cca3656",
        "type": "subflow:317a0e3edab25639",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "x": 850,
        "y": 580,
        "wires": [
            [
                "530910680df15e9e"
            ]
        ]
    },
    {
        "id": "69919dd567898653",
        "type": "switch",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "500",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 740,
        "wires": [
            [
                "edbe8e9841006ec9"
            ],
            [
                "1d0893d325e7fde9"
            ]
        ]
    },
    {
        "id": "1d35d56abb2fe346",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 760,
        "wires": [
            [
                "5280b858ea5f0f27"
            ]
        ]
    },
    {
        "id": "5280b858ea5f0f27",
        "type": "subflow:7cdf28f23984a61d",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1340,
        "y": 760,
        "wires": []
    },
    {
        "id": "60ed029db915ba30",
        "type": "switch",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "property": "payload.ErrorCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "101",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 740,
        "wires": [
            [
                "1d35d56abb2fe346"
            ]
        ]
    },
    {
        "id": "1003bee7386f0ee4",
        "type": "debug",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 660,
        "wires": []
    },
    {
        "id": "c1545870c22d4104",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "Get Netsis Stock List",
        "info": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "01e2420658e24890",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "Get SFORIN Stock List",
        "info": "",
        "x": 240,
        "y": 320,
        "wires": []
    },
    {
        "id": "80045f9c33c8e728",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "Tamam",
        "info": "",
        "x": 370,
        "y": 40,
        "wires": []
    },
    {
        "id": "2d714c1a3b03f9cd",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes = msg.netsisProductTypes;  //NETSİS İÇİN GELEN VERİLERDE TYPE ESLEMESI YAPIP NAME ALIYORZ\nvar data = msg.matchingItems;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.StokTemelBilgi.Stok_Kodu,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                \"productType\": {\n                    \"typeCode\": item.StokEkBilgi.Tur,\n                     \"definitionLang\": (netsisProductTypes.find(x => x.productTypeCode == item.StokEkBilgi.Tur)?.productTypeCodeName) || \"\"\n                    \n                },\n                \"categories\": [\n                    {\n                        \"categoryCode\": item.StokTemelBilgi.Grup_Kodu,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"NetsisGroupCode\"\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"isBaseUnit\": true,\n                        \"factor\": item.StokTemelBilgi.Pay_1,\n                        \"divisor\": item.StokTemelBilgi.Payda_1,\n                        \"area\": 1,\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weightKg\": 1,\n                        \"volumeM3\": 1,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod1\n                    },\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod2\n                    }\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weighthKg\": 1,\n                        \"area\": 1,\n                        \"wigthtLimitKG\": 1,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                        \"defaultDefinition\": item.StokTemelBilgi.Stok_Adi,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1180,
        "wires": [
            [
                "da441135bb95cdbf"
            ]
        ]
    },
    {
        "id": "0edcffb0cc6fe6e9",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "function 18",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item=item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1160,
        "wires": [
            [
                "c87b6b3b1f79d456"
            ],
            [
                "146030b32dde17df"
            ]
        ]
    },
    {
        "id": "410334039bcf7090",
        "type": "http request",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProduct",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1190,
        "y": 1160,
        "wires": [
            [
                "e45ffea3e99d0f81"
            ]
        ]
    },
    {
        "id": "e45ffea3e99d0f81",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1160,
        "wires": [
            [
                "2b4b492e83e2b9a5",
                "03c4bf59d993773f"
            ],
            [
                "e6ee46bbf293f5a4"
            ],
            [
                "1304999a0b718ecd"
            ]
        ]
    },
    {
        "id": "146030b32dde17df",
        "type": "debug",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1220,
        "wires": []
    },
    {
        "id": "da441135bb95cdbf",
        "type": "subflow:fa51d0694c73d14f",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "x": 760,
        "y": 1180,
        "wires": [
            [
                "0edcffb0cc6fe6e9"
            ]
        ]
    },
    {
        "id": "e6ee46bbf293f5a4",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)ResponseOut2",
        "mode": "link",
        "links": [
            "8b96a69c8c3fd36d"
        ],
        "x": 1525,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2b4b492e83e2b9a5",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)ResponseOut",
        "mode": "link",
        "links": [
            "8b96a69c8c3fd36d"
        ],
        "x": 1485,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8b96a69c8c3fd36d",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)ResponseIn",
        "links": [
            "2b4b492e83e2b9a5",
            "e6ee46bbf293f5a4"
        ],
        "x": 635,
        "y": 1100,
        "wires": [
            [
                "da441135bb95cdbf"
            ]
        ]
    },
    {
        "id": "8ce8edf07e100f74",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Product is being shipped",
        "info": "",
        "x": 270,
        "y": 1100,
        "wires": []
    },
    {
        "id": "df84b79cbe394492",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)MatchingItemsIn",
        "links": [
            "5eb71ffc293a75b8"
        ],
        "x": 205,
        "y": 1180,
        "wires": [
            [
                "2d714c1a3b03f9cd"
            ]
        ]
    },
    {
        "id": "03c4bf59d993773f",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1100,
        "wires": [
            [
                "58e8a2a6f6fc0502"
            ]
        ]
    },
    {
        "id": "58e8a2a6f6fc0502",
        "type": "subflow:7cdf28f23984a61d",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1720,
        "y": 1140,
        "wires": []
    },
    {
        "id": "3493b3bbd2dc2ff2",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1680,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1304999a0b718ecd",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1220,
        "wires": [
            [
                "2006cf42c69414d2"
            ]
        ]
    },
    {
        "id": "2006cf42c69414d2",
        "type": "subflow:7cdf28f23984a61d",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1620,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c87b6b3b1f79d456",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)OutTBLSTOKBAR",
        "mode": "link",
        "links": [
            "f596c49f1580edb3"
        ],
        "x": 1095,
        "y": 1080,
        "wires": []
    },
    {
        "id": "88e2158b608619ba",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)TblstokbarResponseIn",
        "links": [
            "70a3c37ab62a138d"
        ],
        "x": 1095,
        "y": 1120,
        "wires": [
            [
                "410334039bcf7090"
            ]
        ]
    },
    {
        "id": "e7e584fba8986c15",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "ConvertJsonSforinProductIn",
        "links": [
            "a3ef115fa5f43ea4"
        ],
        "x": 185,
        "y": 380,
        "wires": [
            [
                "6da70b9a59b99025",
                "1d2cf5374de79379"
            ]
        ]
    },
    {
        "id": "bcfbce53a162190c",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "matchingItems",
        "func": "const listNetsisStockCardArray = msg.listNetsisStockCard;\nconst transferStockItemsArray = msg.transferStockItems;\n\n// const matchingItems = transferStockItemsArray.flatMap(stockCode =>\n//     listNetsisStockCardArray.filter(item => item.StokTemelBilgi.Stok_Kodu === stockCode)\n// );\n\n\n\n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    listNetsisStockCardArray\n        .filter(item => item.StokTemelBilgi.Stok_Kodu === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR ILISKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 560,
        "wires": [
            [
                "5eb71ffc293a75b8"
            ]
        ]
    },
    {
        "id": "2ed8fdb2f308ff39",
        "type": "change",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 560,
        "wires": [
            [
                "d51c0e5157902bb4"
            ]
        ]
    },
    {
        "id": "0de061d6a541cf33",
        "type": "differences",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCode",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "2ed8fdb2f308ff39"
            ]
        ]
    },
    {
        "id": "ae8890c371c77bef",
        "type": "http request",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1210,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a1e958abc61613d0",
        "type": "complete",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "scope": [
            "ae8890c371c77bef"
        ],
        "uncaught": false,
        "x": 230,
        "y": 560,
        "wires": [
            [
                "46460bfc60fe7dbf"
            ]
        ]
    },
    {
        "id": "2f101de07d11739e",
        "type": "catch",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "catch errors",
        "scope": [
            "ae8890c371c77bef"
        ],
        "uncaught": false,
        "x": 230,
        "y": 480,
        "wires": [
            [
                "92c7f455a989dc78"
            ]
        ]
    },
    {
        "id": "96baada44d1f4877",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 420,
        "wires": [
            [
                "ae8890c371c77bef"
            ]
        ]
    },
    {
        "id": "92c7f455a989dc78",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 480,
        "wires": [
            [
                "96baada44d1f4877"
            ],
            [
                "b8c186db23270a18"
            ]
        ]
    },
    {
        "id": "b8c186db23270a18",
        "type": "debug",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 480,
        "wires": []
    },
    {
        "id": "c7ea41c46373697f",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 560,
        "wires": [
            [
                "0de061d6a541cf33"
            ]
        ]
    },
    {
        "id": "46460bfc60fe7dbf",
        "type": "switch",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 560,
        "wires": [
            [
                "1d2cf5374de79379"
            ],
            [
                "c7ea41c46373697f"
            ],
            [
                "5b6148cc337bfdc9"
            ]
        ]
    },
    {
        "id": "5b6148cc337bfdc9",
        "type": "debug",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 600,
        "wires": []
    },
    {
        "id": "5eb71ffc293a75b8",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Netsis  To SFORIN Stock Card(REST)MatchingItemsOut",
        "mode": "link",
        "links": [
            "df84b79cbe394492"
        ],
        "x": 1715,
        "y": 560,
        "wires": []
    },
    {
        "id": "8c61f291fe42c220",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "compareStockCodes",
        "info": "",
        "x": 1090,
        "y": 520,
        "wires": []
    },
    {
        "id": "6da70b9a59b99025",
        "type": "subflow:317a0e3edab25639",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "env": [
            {
                "name": "Status",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 270,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "d51c0e5157902bb4",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1330,
        "y": 560,
        "wires": [
            [],
            [
                "bcfbce53a162190c"
            ]
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "1d2cf5374de79379",
        "type": "subflow:fa51d0694c73d14f",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "x": 620,
        "y": 400,
        "wires": [
            [
                "96baada44d1f4877"
            ]
        ]
    },
    {
        "id": "70d63b2bc1cd3e70",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 260,
        "y": 820,
        "wires": []
    },
    {
        "id": "40f91329a9597aba",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 920,
        "wires": [
            [
                "e2a558d60e316c06"
            ]
        ]
    },
    {
        "id": "e2a558d60e316c06",
        "type": "MSSQL",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 620,
        "y": 920,
        "wires": [
            [
                "9af6d363228efc7b"
            ]
        ]
    },
    {
        "id": "9af6d363228efc7b",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "function 20",
        "func": "msg.payload.forEach(item=>\n{\nmsg.item.data[0].barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 920,
        "wires": [
            [
                "70a3c37ab62a138d"
            ]
        ]
    },
    {
        "id": "f596c49f1580edb3",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis  To SFORIN Stock Card(REST)InTBLSTOKBAR",
        "links": [
            "c87b6b3b1f79d456"
        ],
        "x": 245,
        "y": 900,
        "wires": [
            [
                "40f91329a9597aba"
            ]
        ]
    },
    {
        "id": "70a3c37ab62a138d",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis  To SFORIN Stock Card(REST)TblstokbarResponseOUT",
        "mode": "link",
        "links": [
            "88e2158b608619ba"
        ],
        "x": 915,
        "y": 900,
        "wires": []
    },
    {
        "id": "a3ef115fa5f43ea4",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "NetsisToS4inRemoveTokeNetsisOUT",
        "mode": "link",
        "links": [
            "e7e584fba8986c15"
        ],
        "x": 1305,
        "y": 180,
        "wires": []
    },
    {
        "id": "669ac6e3dde76840",
        "type": "subflow:317a0e3edab25639",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "",
        "x": 460,
        "y": 200,
        "wires": [
            [
                "c2da631ae4d47e52"
            ]
        ]
    },
    {
        "id": "c2da631ae4d47e52",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "function 19",
        "func": "\n    //Grup KODLARINA GORE KISIT EKLENMISTIR\nmsg.url = env.get(\"NetsisUrl\") + \"api/v2/Items?q=GRUP_KODU='CIVATA' and KOD_1='SAPLAMA'\";\n    msg.headers = {\n        Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n    };\n    // netsis stok kartlarını her api döndugunde dizi içerisine alıcaz \n    global.set('netsisStockCardList', []);\n\n    // STOK KODLARINI AYRI BIR ARRAYDA TUTUYORUZ \nglobal.set('netsisStockCode', []);\n    return  msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "81464857806c43dc"
            ]
        ]
    },
    {
        "id": "81464857806c43dc",
        "type": "http request",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 880,
        "y": 200,
        "wires": [
            [
                "6a86e844d23f4744"
            ]
        ]
    },
    {
        "id": "6a86e844d23f4744",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "Process Items",
        "func": " \nlet nextUrl = msg.payload.Next?.Href;\nlet totalCount = msg.payload.TotalCount;\n\n \nmsg.nextUrl = msg.payload.Next?.Href;\nmsg.totalCount = msg.payload.TotalCount;\n\n // eklenen  diziyi alıyoruz \nlet netsisStockCardList = global.get('netsisStockCardList');\nlet netsisStockCode = global.get('netsisStockCode');\n\n//stok kodlarını bir array'e alıyorz \nmsg.payload?.Data?.map(item => netsisStockCode.push(item.StokTemelBilgi.Stok_Kodu));\nglobal.set('netsisStockCode', netsisStockCode);\nmsg.netsisStockCode = global.get('netsisStockCode');\n//////\n//netsis stoklarını ile ilgili işlem \nmsg.payload?.Data?.map(item => netsisStockCardList.push(item));\nglobal.set('netsisStockCardList', netsisStockCardList);\nmsg.listNetsisStockCard = global.get('netsisStockCardList');\n\n \n\nif (nextUrl) {\n    msg.url = nextUrl;\n    msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\n    return [msg, null,null];\n} \nelse if (msg.statusCode === 401){\n    return [null, null,msg];\n}\nelse{\n    global.set('netsisStockCardList', null);\n    msg.url=null;\n    return [null, msg, null];\n}\n\n ",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "710b26fe2c592f23"
            ],
            [
                "a3ef115fa5f43ea4"
            ],
            [
                "619be310e265ce67"
            ]
        ]
    },
    {
        "id": "710b26fe2c592f23",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "NextUrl(Netsis  To SFORIN Stock CardOut)",
        "mode": "link",
        "links": [
            "4230925012844847"
        ],
        "x": 1205,
        "y": 120,
        "wires": []
    },
    {
        "id": "4230925012844847",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "NextUrl(Netsis  To SFORIN Stock CardIn)",
        "links": [
            "710b26fe2c592f23"
        ],
        "x": 775,
        "y": 120,
        "wires": [
            [
                "81464857806c43dc"
            ]
        ]
    },
    {
        "id": "619be310e265ce67",
        "type": "subflow:317a0e3edab25639",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "",
        "env": [
            {
                "name": "Status",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1290,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "7c009849b9a4b74e",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "",
        "info": "",
        "x": 540,
        "y": 40,
        "wires": []
    },
    {
        "id": "647468f33342bbf4",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "name": "Tamam",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "d8166d4f40a6501b",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "2a7f0d36b27a0556",
        "type": "differences",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCodes",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "ff9df51942af402a"
            ]
        ]
    },
    {
        "id": "009d56552acd23b5",
        "type": "MSSQL",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 380,
        "y": 560,
        "wires": [
            [
                "517aeab92d1cf534"
            ]
        ]
    },
    {
        "id": "4ad699fbc1c85e5c",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT A.STOK_KODU, GRUP_KODU, OLCU_BR1, PAY_1, PAYDA_1, BARKOD1, BARKOD2, DBO.TRK(STOK_ADI) AS STOK_ADI, B.TUR\n    FROM TBLSTSABIT A\n    LEFT JOIN TBLSTSABITEK B ON A.STOK_KODU = B.STOK_KODU\n    WHERE SUBE_KODU IN ('-1', '${branchCode}')  AND KOD_1='CMKGARAJ' AND KOD_2='YERLI'\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 560,
        "wires": [
            [
                "009d56552acd23b5"
            ]
        ]
    },
    {
        "id": "517aeab92d1cf534",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "function 21",
        "func": "msg.netsisStockCode=msg.payload;\nlet netsisStockCodes=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 560,
        "wires": [
            [
                "2a7f0d36b27a0556"
            ]
        ]
    },
    {
        "id": "ff9df51942af402a",
        "type": "change",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "05c0e6f1b19825e3"
            ]
        ]
    },
    {
        "id": "8b37983f13e60a5d",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "matchingItems",
        "func": "const netsisStockCode = msg.netsisStockCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\n\n\n \n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    netsisStockCode\n        .filter(item => item.STOK_KODU === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR ILISKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\n\nmsg.matchingItems=matchingItems;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 560,
        "wires": [
            [
                "99de14425a992694"
            ]
        ]
    },
    {
        "id": "afd43ed992b75b2e",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)In",
        "links": [
            "1bfaa5020382981a"
        ],
        "x": 85,
        "y": 500,
        "wires": [
            [
                "4ad699fbc1c85e5c"
            ]
        ]
    },
    {
        "id": "99de14425a992694",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)matchingItemsOut",
        "mode": "link",
        "links": [
            "98816bd9b74d4eb9"
        ],
        "x": 1645,
        "y": 620,
        "wires": []
    },
    {
        "id": "05c0e6f1b19825e3",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1370,
        "y": 560,
        "wires": [
            [],
            [
                "8b37983f13e60a5d"
            ]
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "14fd7bd19dcbd822",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes=msg.netsisProductTypes;\nvar data = msg.matchingItems;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                 \"productType\": {\n                    \"typeCode\": item.TUR,\n                     \"definitionLang\": (netsisProductTypes.find(x => x.productTypeCode == item.TUR)?.productTypeCodeName) || \"\"\n                    \n                },\n                \"categories\": [\n                    {\n                        \"categoryCode\": item.GRUP_KODU,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"NetsisGroupCode\"\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"isBaseUnit\": true,\n                        \"factor\": item.PAY_1,\n                        \"divisor\": item.PAYDA_1,\n                        \"area\": 1,\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weightKg\": 1,\n                        \"volumeM3\": 1,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD1\n                    },\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD2\n                    }\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weighthKg\": 1,\n                        \"area\": 1,\n                        \"wigthtLimitKG\": 1,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.STOK_KODU,\n                        \"defaultDefinition\": item.STOK_ADI,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.STOK_KODU,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1160,
        "wires": [
            [
                "f855b6351fa8677f"
            ]
        ]
    },
    {
        "id": "ebaa82cd07fe202e",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Index",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "519d5dd7e0baa622"
            ],
            [
                "c68ca43737e3afd3"
            ]
        ]
    },
    {
        "id": "8103ddc7aa8148a5",
        "type": "http request",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProduct",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 970,
        "y": 1140,
        "wires": [
            [
                "ddc6d3b003a8a708"
            ]
        ]
    },
    {
        "id": "ddc6d3b003a8a708",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1140,
        "wires": [
            [
                "d8f4e316d1f97e7c",
                "570c99c5addac9f2"
            ],
            [
                "d8f4e316d1f97e7c"
            ],
            [
                "2ece615c2b13df72"
            ]
        ]
    },
    {
        "id": "c68ca43737e3afd3",
        "type": "debug",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f855b6351fa8677f",
        "type": "subflow:fa51d0694c73d14f",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "ebaa82cd07fe202e"
            ]
        ]
    },
    {
        "id": "d8f4e316d1f97e7c",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)ResponseOut",
        "mode": "link",
        "links": [
            "596ed20368d22575"
        ],
        "x": 1265,
        "y": 1040,
        "wires": []
    },
    {
        "id": "98816bd9b74d4eb9",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)matchingItemsIn",
        "links": [
            "99de14425a992694"
        ],
        "x": 85,
        "y": 1140,
        "wires": [
            [
                "14fd7bd19dcbd822"
            ]
        ]
    },
    {
        "id": "ba532fba28791e9a",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Product is being shipped",
        "info": "",
        "x": 190,
        "y": 1080,
        "wires": []
    },
    {
        "id": "596ed20368d22575",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)ResponseIn",
        "links": [
            "d8f4e316d1f97e7c"
        ],
        "x": 425,
        "y": 1100,
        "wires": [
            [
                "f855b6351fa8677f"
            ]
        ]
    },
    {
        "id": "5f31d440f7140521",
        "type": "subflow:7cdf28f23984a61d",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1440,
        "y": 1120,
        "wires": []
    },
    {
        "id": "570c99c5addac9f2",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1080,
        "wires": [
            [
                "5f31d440f7140521"
            ]
        ]
    },
    {
        "id": "e98781f4d949c827",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1420,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e40ac389d1f41902",
        "type": "subflow:7cdf28f23984a61d",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1380,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2ece615c2b13df72",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1200,
        "wires": [
            [
                "e40ac389d1f41902"
            ]
        ]
    },
    {
        "id": "6264233b1a16943c",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Error işlem log",
        "info": "",
        "x": 1350,
        "y": 1160,
        "wires": []
    },
    {
        "id": "519d5dd7e0baa622",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)OutTBLSTOKBAR",
        "mode": "link",
        "links": [
            "58519c213a7f5f5a"
        ],
        "x": 755,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c9c8a55bfc345060",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "info": "Netsiste stoklar için ayrı bir barkod sistemi kullanılıyor ise \nKontrol ediyorz ve sforine giden json a ekleme yapıyorz\n",
        "x": 760,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1e24bbaf141fcbbb",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)InTBLSTOKBARResponse",
        "links": [
            "21882ae1acd70ff2"
        ],
        "x": 845,
        "y": 1080,
        "wires": [
            [
                "8103ddc7aa8148a5"
            ]
        ]
    },
    {
        "id": "a4819f2ac0278e60",
        "type": "http request",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "74736a8b3f8aa8c4",
        "type": "complete",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "",
        "scope": [
            "a4819f2ac0278e60"
        ],
        "uncaught": false,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "a2f665fbd87176f1"
            ]
        ]
    },
    {
        "id": "1b1b9a0c2fc17b97",
        "type": "catch",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "catch errors",
        "scope": [
            "a4819f2ac0278e60"
        ],
        "uncaught": false,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "b560c98ad6781ae1"
            ]
        ]
    },
    {
        "id": "da16e3cf9032d134",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "a4819f2ac0278e60"
            ]
        ]
    },
    {
        "id": "b560c98ad6781ae1",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "fd39b5f40a5466e5"
            ],
            [
                "f285cf3109419bbe"
            ]
        ]
    },
    {
        "id": "f285cf3109419bbe",
        "type": "debug",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "135730bb62fe93ed",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 340,
        "wires": [
            [
                "1bfaa5020382981a"
            ]
        ]
    },
    {
        "id": "a2f665fbd87176f1",
        "type": "switch",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 290,
        "y": 340,
        "wires": [
            [],
            [
                "135730bb62fe93ed"
            ],
            [
                "7767f5a781a34294"
            ]
        ]
    },
    {
        "id": "7767f5a781a34294",
        "type": "debug",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 380,
        "wires": []
    },
    {
        "id": "72917536637091f7",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "GetAllSFORINStockCard",
        "info": "",
        "x": 210,
        "y": 120,
        "wires": []
    },
    {
        "id": "1bfaa5020382981a",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "afd43ed992b75b2e"
        ],
        "x": 705,
        "y": 340,
        "wires": []
    },
    {
        "id": "fd39b5f40a5466e5",
        "type": "subflow:fa51d0694c73d14f",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "",
        "x": 420,
        "y": 160,
        "wires": [
            [
                "da16e3cf9032d134"
            ]
        ]
    },
    {
        "id": "a4cde71b52a9ef20",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 160,
        "y": 840,
        "wires": []
    },
    {
        "id": "db643989eb6fd176",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 940,
        "wires": [
            [
                "b310cfd8ddd31c00"
            ]
        ]
    },
    {
        "id": "b310cfd8ddd31c00",
        "type": "MSSQL",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 520,
        "y": 940,
        "wires": [
            [
                "36365d0ca790f463"
            ]
        ]
    },
    {
        "id": "58519c213a7f5f5a",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)InTBLSTOKBAR",
        "links": [
            "519d5dd7e0baa622"
        ],
        "x": 125,
        "y": 920,
        "wires": [
            [
                "db643989eb6fd176"
            ]
        ]
    },
    {
        "id": "21882ae1acd70ff2",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)OutTBLSTOKBARResponse",
        "mode": "link",
        "links": [
            "1e24bbaf141fcbbb"
        ],
        "x": 905,
        "y": 940,
        "wires": []
    },
    {
        "id": "36365d0ca790f463",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "function 22",
        "func": "msg.payload.forEach(item=>\n{\nmsg.item.data[0].barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "21882ae1acd70ff2"
            ]
        ]
    },
    {
        "id": "e4f6d6ba529f892a",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "name": "NetsistoSforinCategoriesIntegration",
        "info": "Netsis'teki grup kodları\nSFORINDEKI stok kategorileri",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "8f65485889305345",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "name": "Create Sforin Produc Category",
        "info": "",
        "x": 190,
        "y": 420,
        "wires": []
    },
    {
        "id": "17fb20973f73953a",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "name": "Tamamdır",
        "info": "",
        "x": 140,
        "y": 20,
        "wires": []
    },
    {
        "id": "4f41d41ee83aa6b4",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 550,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c3a334e5f6423d0e",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    return [msg, null];\n}\nelse {\n    // Handle error\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "9ea82e46bbb474ec"
            ],
            [
                "581038513876f866"
            ]
        ]
    },
    {
        "id": "1f545552c4cdec0e",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "GenerateGroupCodeFunc",
        "func": "msg.payload = {\n   \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                \"_id\": \"\",\n                \"categoryCode\": \"NetsisGroupCode\",\n                \"definition_lang\": \"Netsis Grup Kodları\",\n                \"parentCategory\": null\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n};\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = global.get(\"SFORIN_URL\");\n\nreturn [msg, null];;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 480,
        "wires": [
            [
                "4f41d41ee83aa6b4"
            ]
        ]
    },
    {
        "id": "1aeacf026d672ef6",
        "type": "link in",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "link in 9",
        "links": [
            "08592d08724757d9"
        ],
        "x": 95,
        "y": 480,
        "wires": [
            [
                "1f545552c4cdec0e"
            ]
        ]
    },
    {
        "id": "9ea82e46bbb474ec",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "d36a51f07a52abc3"
        ],
        "x": 485,
        "y": 580,
        "wires": []
    },
    {
        "id": "a19c837ad4e696df",
        "type": "complete",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "scope": [
            "4f41d41ee83aa6b4"
        ],
        "uncaught": false,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "c3a334e5f6423d0e"
            ]
        ]
    },
    {
        "id": "326fcab0bd8dc6bf",
        "type": "catch",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "scope": [
            "4f41d41ee83aa6b4"
        ],
        "uncaught": false,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "acec8daf85dc23fe"
            ]
        ]
    },
    {
        "id": "d2c0ad086e181908",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "CheckNetsisGroupCode",
        "func": "msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\n// Bizim  datamızda netsisten gelen grup kodları alabilmemiz için NetsisGroupCode varmı yokmu kontrol ediyoruz \nmsg.payload = {\n    \"requestId\": \"\",\n    \"sender\": \"\",\n    \"data\": [ \n        {\n            \"categoryCode\": \"MAMUL\"\n        }\n    ],\n    \"current\": [\n        {\n            \"key\": \"\",\n            \"value\": \"\"\n        }\n    ]\n};\nmsg.SFORIN_URL = global.get(\"SFORIN_URL\");\n\nreturn msg;;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 140,
        "wires": [
            [
                "328284d6746e3a1b"
            ]
        ]
    },
    {
        "id": "328284d6746e3a1b",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "Sforin Category1",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetProductCategoriesByCode",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 850,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ae927ebb0636aba9",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "function 23",
        "func": "let items = msg.payload.data||[];\n\nif (items.length > 0) {\n    return [ null,msg];\n} else {\n     return [msg, null];\n    \n    \n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "08592d08724757d9"
            ],
            [
                "15a32a89145b5edd"
            ]
        ]
    },
    {
        "id": "15a32a89145b5edd",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "NetsisToSFORINFieldIntegrationRootOut",
        "mode": "link",
        "links": [
            "d36a51f07a52abc3"
        ],
        "x": 445,
        "y": 280,
        "wires": []
    },
    {
        "id": "08592d08724757d9",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "GenerateGroupCodeOut 4",
        "mode": "link",
        "links": [
            "1aeacf026d672ef6"
        ],
        "x": 445,
        "y": 240,
        "wires": []
    },
    {
        "id": "c962bc8e9e9ea4e4",
        "type": "complete",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "scope": [
            "328284d6746e3a1b"
        ],
        "uncaught": false,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "ae927ebb0636aba9"
            ]
        ]
    },
    {
        "id": "f73a859e799483a9",
        "type": "catch",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "scope": [
            "328284d6746e3a1b"
        ],
        "uncaught": false,
        "x": 110,
        "y": 340,
        "wires": [
            [
                "acec8daf85dc23fe"
            ]
        ]
    },
    {
        "id": "45bfbb5076e745f8",
        "type": "subflow:fa51d0694c73d14f",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "d2c0ad086e181908"
            ]
        ]
    },
    {
        "id": "1c8d52dc82e34ace",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Sforin Category",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 440,
        "y": 900,
        "wires": [
            [
                "ac6b5b6ef8fb49b4"
            ]
        ]
    },
    {
        "id": "bccc7e7eb7b3fbd1",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Get Sforin Category",
        "func": " msg.SFORIN_URL = global.get(\"SFORIN_URL\");\n msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 900,
        "wires": [
            [
                "1c8d52dc82e34ace"
            ]
        ]
    },
    {
        "id": "7a34cae2444eaeb5",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = flow.get(\"netsisGroupCode\");\nlet sforinCategory = flow.get(\"sforinCategory\");\n\nif (!netsisGroupCode) {\n  return [{ status: false }, null];\n}\n\nif (!sforinCategory) {\n  return [{ status: false }, null];\n}\n\n// Map the incoming objects to Sets based on their respective codes\nlet listNetsisGroupCode = new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM]));\nlet listSforinCategoryCode = new Set(sforinCategory.map(item => item.categoryCode));\n\n \nmsg.arrayNetsisGroupCode = Array.from(listNetsisGroupCode);\nmsg.arraySforinCategoryCode = Array.from(listSforinCategoryCode);\nmsg.netsisGroupCodeList=Array.from(listNetsisGroupCode).flatMap(x=>x[0])\n\nmsg.status = true;\n   \nreturn [null, msg];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 880,
        "wires": [
            [
                "8fb2ea515478697a"
            ],
            [
                "80ac82dcf60b219b"
            ]
        ]
    },
    {
        "id": "8fb2ea515478697a",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "NetsisToSforinFieldIntegrationCompareCategoryCodesOut",
        "mode": "link",
        "links": [
            "15af2bce890a94a9"
        ],
        "x": 1135,
        "y": 820,
        "wires": []
    },
    {
        "id": "15af2bce890a94a9",
        "type": "link in",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "NetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "8fb2ea515478697a"
        ],
        "x": 985,
        "y": 820,
        "wires": [
            [
                "7a34cae2444eaeb5"
            ]
        ]
    },
    {
        "id": "ac6b5b6ef8fb49b4",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Sforin Category Result",
        "func": "flow.set(\"sforinCategory\", msg.payload.data); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [
            [
                "7a34cae2444eaeb5"
            ]
        ]
    },
    {
        "id": "dec8892eae27f937",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "ConvertJson",
        "func": "let items = msg.matchingItems;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nmsg.missingCategoryCodes = items.map(item => {  \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                \"_id\": \"\",\n                \"categoryCode\": item[0],\n                \"definition_lang\": item[1],\n                \"parentCategory\": \"NetsisGroupCode\"\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.index = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1000,
        "wires": [
            [
                "c4a0097bf01382b0"
            ]
        ]
    },
    {
        "id": "402dabd67e050964",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1630,
        "y": 1140,
        "wires": [
            [
                "bc1fec0a3b9e19fa"
            ]
        ]
    },
    {
        "id": "bc1fec0a3b9e19fa",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    msg.statusCode = null\n    return [msg, null];\n}\n\nelse {\n    // Handle error\n  \n    return [null, msg];\n   \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1220,
        "wires": [
            [
                "a32df7934f2f7d5c",
                "3a6991a4927476c1"
            ],
            [
                "f81eb83b2bcee90c"
            ]
        ]
    },
    {
        "id": "a32df7934f2f7d5c",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "matchingItemsIndex",
        "func": "\nlet items = msg.missingCategoryCodes;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];; // All items processed\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1140,
        "wires": [
            [
                "402dabd67e050964"
            ],
            []
        ]
    },
    {
        "id": "d36a51f07a52abc3",
        "type": "link in",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "NetsisToSFORINFieldIntegrationRootIn",
        "links": [
            "15a32a89145b5edd",
            "9ea82e46bbb474ec"
        ],
        "x": 75,
        "y": 840,
        "wires": [
            [
                "873c9acca903bcab"
            ]
        ]
    },
    {
        "id": "ff921d62aaaa9b18",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "matchingItems",
        "func": "const arrayNetsisGroupCode = msg.arrayNetsisGroupCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\nconst matchingItems = transferStockItemsArray.flatMap(groupCode =>\n    arrayNetsisGroupCode.filter(item => item[0] === groupCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 960,
        "wires": [
            [
                "dec8892eae27f937"
            ]
        ]
    },
    {
        "id": "cc0c4ab3a7a55930",
        "type": "change",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 920,
        "wires": [
            [
                "ff921d62aaaa9b18"
            ]
        ]
    },
    {
        "id": "80ac82dcf60b219b",
        "type": "differences",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisGroupCodeList",
        "leftInputType": "msg",
        "rightInput": "arraySforinCategoryCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1300,
        "y": 880,
        "wires": [
            [
                "cc0c4ab3a7a55930"
            ]
        ]
    },
    {
        "id": "db468ab2866442ad",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Create Netsis To Sforin Product Category",
        "info": "",
        "x": 240,
        "y": 800,
        "wires": []
    },
    {
        "id": "c4a0097bf01382b0",
        "type": "subflow:fa51d0694c73d14f",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "x": 1340,
        "y": 1060,
        "wires": [
            [
                "a32df7934f2f7d5c"
            ]
        ]
    },
    {
        "id": "7878c13206b72e35",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1680,
        "y": 1360,
        "wires": []
    },
    {
        "id": "f81eb83b2bcee90c",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1320,
        "wires": [
            [
                "7878c13206b72e35"
            ]
        ]
    },
    {
        "id": "8b38d586a642782a",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Error işlem log",
        "info": "",
        "x": 1650,
        "y": 1280,
        "wires": []
    },
    {
        "id": "df9cd569a43e426b",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1200,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3a6991a4927476c1",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "ConvertLogData",
        "func": "// msg.logData=JSON.stringify(msg.item);\nmsg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1300,
        "wires": [
            [
                "1a95acdff02ab213"
            ]
        ]
    },
    {
        "id": "1a95acdff02ab213",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINFieldIntegration(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 1340,
        "wires": []
    },
    {
        "id": "9f7e741cb944e101",
        "type": "subflow:d296b4008b6072d8",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": "SELECT GRUP_KOD, DBO.TRK(GRUP_ISIM)GRUP_ISIM FROM TBLSTGRUP",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 860,
        "wires": [
            [
                "e9b9b895fb84b45f"
            ]
        ]
    },
    {
        "id": "e9b9b895fb84b45f",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\nmsg.payload = null;\nflow.set(\"netsisGroupCode\", items);\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f6b3a5a457ec15d7",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 780,
        "y": 640,
        "wires": []
    },
    {
        "id": "581038513876f866",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 600,
        "wires": [
            [
                "f6b3a5a457ec15d7"
            ]
        ]
    },
    {
        "id": "6f0bf6534965f587",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "Error işlem log",
        "info": "",
        "x": 750,
        "y": 560,
        "wires": []
    },
    {
        "id": "e62b31aae00b8535",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 320,
        "wires": []
    },
    {
        "id": "acec8daf85dc23fe",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.error.message;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "e62b31aae00b8535"
            ]
        ]
    },
    {
        "id": "422063b50a6c71c4",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "Error işlem log",
        "info": "",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "30ad72d5598c858d",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "name": "Attention User",
        "info": "Netsis'in Databaseinde Stoklarun türleri tutulmadığından\nManuel Olarak ayarlanıcaktır!!!\nDaha sonralarında ekleme oldıgında manuel düzenleme sağlanıcaktır.\n",
        "x": 250,
        "y": 140,
        "wires": []
    },
    {
        "id": "2444a4409e75f27f",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "ProductType is being shipped",
        "info": "",
        "x": 280,
        "y": 560,
        "wires": []
    },
    {
        "id": "b71d539f58e7dd19",
        "type": "link in",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "NetsisToSFORINProductTypeIntegrationIN",
        "links": [
            "50e71062bd312459",
            "c766752a5b2323da"
        ],
        "x": 205,
        "y": 620,
        "wires": [
            [
                "fac8368732c8873e"
            ]
        ]
    },
    {
        "id": "731e19687a0d03c7",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "function 24",
        "func": "\nlet items = msg.netsisProductTypeList;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.payload = item;\nmsg.item = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "9cfe6fbdaa957b93"
            ],
            []
        ]
    },
    {
        "id": "9cfe6fbdaa957b93",
        "type": "http request",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductTypeAsync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 860,
        "y": 600,
        "wires": [
            [
                "60402cd7e995d83c"
            ]
        ]
    },
    {
        "id": "60402cd7e995d83c",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 600,
        "wires": [
            [
                "c766752a5b2323da",
                "a36e29b0d3474fe6"
            ],
            [
                "c766752a5b2323da"
            ],
            [
                "90048689613f79ce"
            ]
        ]
    },
    {
        "id": "c766752a5b2323da",
        "type": "link out",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Response(NetsisToSFORINProductTypeIntegrationOUT)",
        "mode": "link",
        "links": [
            "b71d539f58e7dd19"
        ],
        "x": 1185,
        "y": 560,
        "wires": []
    },
    {
        "id": "01d0b27220dd17fd",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Error işlem log",
        "info": "",
        "x": 1190,
        "y": 720,
        "wires": []
    },
    {
        "id": "90048689613f79ce",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "0a43e71004f067ba"
            ]
        ]
    },
    {
        "id": "0a43e71004f067ba",
        "type": "subflow:7cdf28f23984a61d",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINProductTypeIntegration",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 800,
        "wires": []
    },
    {
        "id": "214930c6cfe1deae",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 920,
        "y": 720,
        "wires": []
    },
    {
        "id": "a36e29b0d3474fe6",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "ConvertLogData",
        "func": "// msg.logData=JSON.stringify(msg.item);\nmsg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 760,
        "wires": [
            [
                "cf7c82521c4f344b"
            ]
        ]
    },
    {
        "id": "cf7c82521c4f344b",
        "type": "subflow:7cdf28f23984a61d",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINProductTypeIntegration",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 940,
        "y": 800,
        "wires": []
    },
    {
        "id": "fac8368732c8873e",
        "type": "subflow:fa51d0694c73d14f",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "x": 380,
        "y": 620,
        "wires": [
            [
                "731e19687a0d03c7"
            ]
        ]
    },
    {
        "id": "400d8b1d02aa7132",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "ConvertJsonSFORIN ProdıctType",
        "func": "msg.netsisProductTypeList=[];\nmsg.matchingItems.forEach(type => {\n    msg.netsisProductTypeList.push({\n        requestId: \"\",\n        sender: \"Node-red\",\n        data: [\n            {\n                typeCode: type.productTypeCode,\n                definitionLang: type.productTypeCodeName\n            }\n        ],\n        current: [\n            {\n                key: \"\",\n                value: \"\"\n            }\n        ]\n    });\n});\nmsg.index=0;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 460,
        "wires": [
            [
                "50e71062bd312459"
            ]
        ]
    },
    {
        "id": "685e2ce6255c4888",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "headers",
        "func": "msg.SFORIN_URL = env.get(\"SFORIN_URL\");\n\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 300,
        "wires": [
            [
                "a44ddd7f28361bba"
            ]
        ]
    },
    {
        "id": "a44ddd7f28361bba",
        "type": "http request",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "Get  All ProductType",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductTypesAsync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 800,
        "y": 300,
        "wires": [
            [
                "f73238c7fe7374c7"
            ]
        ]
    },
    {
        "id": "f73238c7fe7374c7",
        "type": "change",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sforinProductTypes",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "4e482c5861f36862"
            ]
        ]
    },
    {
        "id": "c53ac1b1ca0a5db4",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "GetSforinProductType",
        "info": "Tüm SFORIN de olan product kodlarını cekıp\nManuel Olarak tanımladığımız netsisi için\nolan typelar ile karşılaştırılıp ekleme yapılacaktır",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "7b5cfbcf6a0e3f56",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "NetsisProductType",
        "info": "",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "9000d874e5477995",
        "type": "differences",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisProductTypsCode",
        "leftInputType": "msg",
        "rightInput": "sforinProductTypeCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1560,
        "y": 340,
        "wires": [
            [
                "22c3c138b89ecb4f"
            ]
        ]
    },
    {
        "id": "22c3c138b89ecb4f",
        "type": "change",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 380,
        "wires": [
            [
                "82e72b5056fab3c7"
            ]
        ]
    },
    {
        "id": "82e72b5056fab3c7",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "matchingItems",
        "func": "const arrayNetsisProductTypes = msg.netsisProductTypes;\nconst transferStockItemsArray = msg.transferStockItems;\n \nconst matchingItems = transferStockItemsArray.flatMap(typeCode =>\n    arrayNetsisProductTypes.filter(item => item.productTypeCode === typeCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 420,
        "wires": [
            [
                "400d8b1d02aa7132"
            ]
        ]
    },
    {
        "id": "4e482c5861f36862",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "SforinProductTypeMap",
        "func": "msg.sforinProductTypeCode=[]\nlet items=msg.sforinProductTypes;\n\nitems.forEach(typeCode=>{\n    msg.sforinProductTypeCode.push(typeCode.typeCode)\n})\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "770459b346fe2747"
            ]
        ]
    },
    {
        "id": "50e71062bd312459",
        "type": "link out",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "NetsisToSFORINProductTypeIntegrationOUT",
        "mode": "link",
        "links": [
            "b71d539f58e7dd19"
        ],
        "x": 1805,
        "y": 460,
        "wires": []
    },
    {
        "id": "770459b346fe2747",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "x": 1530,
        "y": 300,
        "wires": [
            [
                "9000d874e5477995"
            ],
            []
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "4ebd94f2f25892f8",
        "type": "subflow:fa51d0694c73d14f",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "x": 440,
        "y": 300,
        "wires": [
            [
                "685e2ce6255c4888"
            ]
        ]
    },
    {
        "id": "e529a80cdec9671b",
        "type": "subflow:fa51d0694c73d14f",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 600,
        "y": 220,
        "wires": [
            [
                "1f17df2fd7d8225d"
            ]
        ]
    },
    {
        "id": "f73a9fe1942c1b07",
        "type": "http request",
        "z": "79ed7abbe7cc27ac",
        "name": "GetAllIntegrationParameters",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllIntegrationParameters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1060,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6acf32846755a198",
        "type": "complete",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "scope": [
            "f73a9fe1942c1b07"
        ],
        "uncaught": false,
        "x": 410,
        "y": 420,
        "wires": [
            [
                "81f86561d7aa798e"
            ]
        ]
    },
    {
        "id": "fe43335605ecaf53",
        "type": "catch",
        "z": "79ed7abbe7cc27ac",
        "name": "catch errors",
        "scope": [
            "f73a9fe1942c1b07"
        ],
        "uncaught": false,
        "x": 410,
        "y": 340,
        "wires": [
            [
                "fe4f902a73a2387d"
            ]
        ]
    },
    {
        "id": "1f17df2fd7d8225d",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 220,
        "wires": [
            [
                "f73a9fe1942c1b07"
            ]
        ]
    },
    {
        "id": "fe4f902a73a2387d",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            [
                "683f3f8aa3fcc5f9"
            ]
        ]
    },
    {
        "id": "3d28130e9ef11fe2",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "/GetAllIntegrationParametersMap",
        "func": "var jsonPayload = msg.payload.data; // Gelen veriyi al\nvar allIntegrationParameters = []; // Tüm işlenmiş veriler burada tutulacak\n \n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(params => {\n        // Gelen her bir parametre için işlenmiş veri\n        var processedProduct = {\n            id: params._id || \"\", // _id'yi al\n            code: params.code || \"\", // code alanı\n            type: params.type || \"\", // type alanı\n            flowName: params.flowName || \"\", // flowName alanı\n            flowEndPoint: params.flowEndPoint || \"\", // flowEndPoint alanı\n            cron: params.cron || \"\", // cron ifadesi\n            lastRun: params.lastRun || null, // lastRun tarihi\n            status: params.status || \"\", // status alanı\n            direction: params.direction || \"\", // direction alanı\n            path: params.path || \"\" // path alanı\n        };\n\n        // İşlenmiş veriyi allIntegrationParameters dizisine ekle\n        allIntegrationParameters.push(processedProduct);\n    });\n}\n\n// msg.payload'u işlenmiş veri ile değiştir\nmsg.allIntegrationParameters = allIntegrationParameters;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 420,
        "wires": [
            [
                "763be7947fb7aaca"
            ]
        ]
    },
    {
        "id": "81f86561d7aa798e",
        "type": "switch",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 420,
        "wires": [
            [
                "e529a80cdec9671b",
                "86dbcbd7c16a7e59"
            ],
            [
                "3d28130e9ef11fe2"
            ],
            [
                "0e4e30cda4cf0744"
            ]
        ]
    },
    {
        "id": "683f3f8aa3fcc5f9",
        "type": "subflow:7cdf28f23984a61d",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "763be7947fb7aaca",
        "type": "subflow:fa51d0694c73d14f",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 440,
        "y": 560,
        "wires": [
            [
                "a85bd8119f73ba09"
            ]
        ]
    },
    {
        "id": "1217ca74696da277",
        "type": "http request",
        "z": "79ed7abbe7cc27ac",
        "name": "GetAllIntegrationPaths",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllIntegrationPaths",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 820,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "9ffbc8e4ae9463dd",
        "type": "complete",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "scope": [
            "1217ca74696da277"
        ],
        "uncaught": false,
        "x": 410,
        "y": 700,
        "wires": [
            [
                "4d52d9e55adc2112"
            ]
        ]
    },
    {
        "id": "7e46e158062ccd7c",
        "type": "catch",
        "z": "79ed7abbe7cc27ac",
        "name": "catch errors",
        "scope": [
            "1217ca74696da277"
        ],
        "uncaught": false,
        "x": 410,
        "y": 620,
        "wires": [
            [
                "3f6ea9b294813e58"
            ]
        ]
    },
    {
        "id": "a85bd8119f73ba09",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 560,
        "wires": [
            [
                "1217ca74696da277"
            ]
        ]
    },
    {
        "id": "3f6ea9b294813e58",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 620,
        "wires": [
            [
                "c7b3365059833bd0",
                "97ff384243e155a3"
            ]
        ]
    },
    {
        "id": "8d9f039cb17dbbed",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "GetAllIntegrationPaths",
        "func": "var jsonPayload = msg.payload.data; // Gelen veriyi al\nvar allIntegrationCode = []; // Tüm işlenmiş veriler burada tutulacak\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(params => {\n        // Gelen her bir parametre için işlenmiş veri\n        var getAllIntegrationPath = {\n            path:params.path ||\"\",\n            ip:params.ip ||\"\",\n            user:params.user ||\"\",\n            pass:params.pass ||\"\",\n            server:params.server ||\"\",\n            domain:params.domain ||\"\",\n            tokenEndPoint:params.tokenEndPoint||\"\",\n            collection: params.collection || \"\",\n            dataBase: params.dataBase || \"\"\n        };\n\n        // İşlenmiş veriyi allIntegrationParameters dizisine ekle\n        allIntegrationCode.push(getAllIntegrationPath);\n    });\n}\n\n// msg.payload'u işlenmiş veri ile değiştir\nmsg.allIntegrationCode = allIntegrationCode;\nglobal.set('allIntegrationCode', allIntegrationCode)\nglobal.set('allIntegrationParameters', msg.allIntegrationParameters)\nmsg = {\n    integrationParameter_FlowName:msg.integrationParameter_FlowName||'',\n    allIntegrationCode: allIntegrationCode,\n    allIntegrationParameters: msg.allIntegrationParameters\n};\n\n// Mesajı döndürün\nreturn { msg };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "4d52d9e55adc2112",
        "type": "switch",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 700,
        "wires": [
            [
                "763be7947fb7aaca"
            ],
            [
                "8d9f039cb17dbbed"
            ],
            []
        ]
    },
    {
        "id": "c7b3365059833bd0",
        "type": "subflow:7cdf28f23984a61d",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 1000,
        "y": 620,
        "wires": []
    },
    {
        "id": "2270d2a9a47fa455",
        "type": "comment",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "info": "Hangi flow içerinden hangi db connection a ihtiyaç duyutor ise onları cekiyoruz",
        "x": 380,
        "y": 500,
        "wires": []
    },
    {
        "id": "97ff384243e155a3",
        "type": "debug",
        "z": "79ed7abbe7cc27ac",
        "name": "debug 89",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 640,
        "wires": []
    },
    {
        "id": "86dbcbd7c16a7e59",
        "type": "debug",
        "z": "79ed7abbe7cc27ac",
        "name": "debug 91",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 420,
        "wires": []
    },
    {
        "id": "0e4e30cda4cf0744",
        "type": "debug",
        "z": "79ed7abbe7cc27ac",
        "name": "debug 92",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 340,
        "wires": []
    },
    {
        "id": "1590916a9f353689",
        "type": "function",
        "z": "d296b4008b6072d8",
        "name": "MSSQL Business",
        "func": "let mssqlData = null;\nlet allIntegrationCode = global.get('allIntegrationCode');\n\n\n\nlet path=msg?.propIntegration?.path||\"\";\nif (allIntegrationCode) {\n    // Veriyi başarıyla aldınız, işlem yapabilirsiniz\n    //ÜSTE OLAN YORUM SATIRI ACILACAK ALT TARAF KAPANICAK CANLIDA\n    // mssqlData = allIntegrationCode.find(item => item.path === path);\n    mssqlData = allIntegrationCode.find(item => item.path == \"MSSQLv_1.0\");\n    \n     // node.warn(mssqlData);\n}\n\nif (mssqlData === null) {\n    node.error(\"MSSQL configuration not found.\");\n    return;\n}\n\n\n\nconst sql = global.get('mssql');\nconst query = (msg.query && msg.query !== \"\") ? msg.query : env.get('query')  ;\n\n\n//node.warn(msg.query);\n \n//node.warn(\"msg.propIntegration.path:  \"+msg.propIntegration.path);\n\nif (!sql) {\n    node.error('MSSQL module not found in global context.');\n    return;\n}\n\nconst user = mssqlData.user;\nconst password = mssqlData.pass;\nconst server = mssqlData.ip;\nconst database = mssqlData.dataBase; // Make sure this is correctly mapped to the database name\nconst config = {\n    user: user,\n    password: password,\n    server: server,\n    database: database,\n    options: {\n        encrypt: false,  // Set to true for Azure or encrypted connections\n        enableArithAbort: true  // To handle certain arithmetic operations more safely\n    }\n};\n// Log the found config\n// node.warn(config);\n(async () => {\n    // MSSQL configuration\n  \n    let pool;\n\n    try {\n        // Establishing connection to the MSSQL server\n        pool = await sql.connect(config);\n        // Execute the query and retrieve results\n        const result = await pool.request().query(query);\n\n        // Return the result to the first output\n        msg.payload = result;\n        node.send([msg, null]);\n\n    } catch (err) {\n        // Log connection or query errors and send to second output\n        msg = {\n            error: 'MSSQL connection/query error: ' + err.message\n        };\n        msg.errorDescription = msg.error;\n        node.send([null, msg]);\n\n    } finally {\n        // Ensure connection is closed to avoid potential memory leaks\n        if (pool) {\n            try {\n                await pool.close();\n                // node.warn('MSSQL connection closed.');\n            } catch (closeErr) {\n                // node.error('Error closing MSSQL connection: ' + closeErr.message);\n                msg = {\n                    error: 'Error closing MSSQL connection: ' + closeErr.message\n                };\n                msg.errorDescription = msg.error;\n                node.send([null, msg]);\n            }\n        }\n    }\n})();\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 220,
        "wires": [
            [],
            [
                "a6c3939a6263d9a7",
                "de9677a098aa5f72"
            ]
        ],
        "info": "global.get('mssql');\r\n  için   setting.js dosyalarına functionGlobalContext: {\r\n    mssql: require('mssql')  // MSSQL modülünü global context'e ekleyin\r\n}\r\n tanımlıyoruz "
    },
    {
        "id": "a6c3939a6263d9a7",
        "type": "subflow:7cdf28f23984a61d",
        "z": "d296b4008b6072d8",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Sql Connection",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            }
        ],
        "x": 1320,
        "y": 240,
        "wires": []
    },
    {
        "id": "de9677a098aa5f72",
        "type": "debug",
        "z": "d296b4008b6072d8",
        "name": "debug 62",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 320,
        "wires": []
    },
    {
        "id": "9160e63771a80bc3",
        "type": "subflow:fa51d0694c73d14f",
        "z": "0a4f4f9f59c2be20",
        "name": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "ad4f6fbda1dd50c6"
            ]
        ]
    },
    {
        "id": "ad4f6fbda1dd50c6",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "Get Token Params",
        "func": "\nlet inregrationFlowData=msg.inregrationFlowData;\n \n    msg.payload = {\n        \"requestId\": \"\",\n        \"sender\": \"node-red\",\n        \"data\": [\n            {\n                \"_id\": inregrationFlowData.id,\n                \"code\": inregrationFlowData.code,\n                \"type\":inregrationFlowData.type,\n                \"flowName\": inregrationFlowData.flowName,\n                \"flowEndPoint\": inregrationFlowData.flowEndPoint,\n                \"cron\": inregrationFlowData.cron,\n                \"lastRun\": inregrationFlowData.lastRun,\n                \"status\": env.get('status'),\n                \"direction\": inregrationFlowData.direction,\n                \"path\": inregrationFlowData.path\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n\n     \n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "281571de8a180eb4"
            ]
        ]
    },
    {
        "id": "53bbef421caa5cdc",
        "type": "http request",
        "z": "0a4f4f9f59c2be20",
        "name": "Update State",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/UpdateIntegrationParameters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1230,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "bd31ed55391644b5",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "global Token",
        "func": "try {\n    \n    return [msg, null];  // İlk çıkışa yönlendirme (başarı durumu)\n} catch (error) {\n    msg.errorDescription = error.message || \"Hata oluştu\";\n    return [null, msg];  // İkinci çıkışa yönlendirme (hata durumu)\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "d23efe6b9d85d197"
            ],
            [
                "e49322795b489f87"
            ]
        ]
    },
    {
        "id": "42cf6086fcdc6651",
        "type": "catch",
        "z": "0a4f4f9f59c2be20",
        "name": "catch errors",
        "scope": [
            "53bbef421caa5cdc"
        ],
        "uncaught": false,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "35dc3e17e39622b3"
            ]
        ]
    },
    {
        "id": "35dc3e17e39622b3",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj = \"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg, null];\n} else {\n    msg.errorDescription = msg.error.message;\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 420,
        "wires": [
            [
                "9160e63771a80bc3"
            ],
            [
                "e49322795b489f87"
            ]
        ]
    },
    {
        "id": "d8bfbcd4830613e2",
        "type": "complete",
        "z": "0a4f4f9f59c2be20",
        "name": "",
        "scope": [
            "53bbef421caa5cdc"
        ],
        "uncaught": false,
        "x": 350,
        "y": 460,
        "wires": [
            [
                "bd31ed55391644b5"
            ]
        ]
    },
    {
        "id": "d23efe6b9d85d197",
        "type": "switch",
        "z": "0a4f4f9f59c2be20",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 460,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8fa80a8357766e9d",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "Set inregrationFlowData",
        "func": "// payload içindeki veriyi ALIYORUZ \nlet payload = msg.propIntegration;\n \n\n\n// Örnek: payload'tan bazı veriler alıp diziye ekleyebiliriz\nlet inregrationFlowData=({\n    id: payload.id,\n    code: payload.code,\n    type: payload.type,\n    flowName: payload.flowName,\n    flowEndPoint: payload.flowEndPoint,\n    cron: payload.cron,\n    lastRun: payload.lastRun,\n    status: payload.status,\n    direction: payload.direction,\n    path: payload.path\n});\n\n// Diziyi yeni payload olarak ayarlıyoruz\nmsg.inregrationFlowData = inregrationFlowData;\n\n// Mesajı bir sonraki node'a gönderiyoruz\nreturn msg;\n\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 280,
        "wires": [
            [
                "9160e63771a80bc3"
            ]
        ]
    },
    {
        "id": "e49322795b489f87",
        "type": "subflow:7cdf28f23984a61d",
        "z": "0a4f4f9f59c2be20",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Update State Integration Params",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 400,
        "wires": []
    },
    {
        "id": "281571de8a180eb4",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "53bbef421caa5cdc"
            ]
        ]
    },
    {
        "id": "66a945570b3218f8",
        "type": "subflow:8436fe1a449a7297",
        "z": "533e6c27c7c050c1",
        "name": "",
        "x": 1480,
        "y": 240,
        "wires": [
            [
                "356d75f022e409af",
                "dc2a8ad3bbb430ec"
            ],
            [
                "e214e130ac045902",
                "b355be9378d62d4f"
            ]
        ]
    },
    {
        "id": "0af745030787cf34",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1460,
        "y": 200,
        "wires": [
            [
                "66a945570b3218f8"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "b86a1ce878613e8e",
        "type": "switch",
        "z": "533e6c27c7c050c1",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "4281ad5150bcc5fa"
            ]
        ]
    },
    {
        "id": "7742927837bef88b",
        "type": "comment",
        "z": "533e6c27c7c050c1",
        "name": "",
        "info": "statusu runing'ten farklı ise çalışmaya hazır çalışıyor ise işleme alınmıyor",
        "x": 400,
        "y": 160,
        "wires": []
    },
    {
        "id": "356d75f022e409af",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1745,
        "y": 180,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "b0b68da4241e0628",
        "type": "comment",
        "z": "533e6c27c7c050c1",
        "name": "",
        "info": "RUNNING\nNOTRUNNING\nERROR\"",
        "x": 1420,
        "y": 160,
        "wires": []
    },
    {
        "id": "e214e130ac045902",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "ERROR",
                "type": "str"
            }
        ],
        "x": 1745,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "4281ad5150bcc5fa",
        "type": "function",
        "z": "533e6c27c7c050c1",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "fa949f81446b1a2a"
            ]
        ]
    },
    {
        "id": "fa949f81446b1a2a",
        "type": "cronplus",
        "z": "533e6c27c7c050c1",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "a2d387d27adb8528"
            ]
        ]
    },
    {
        "id": "9e89ade18d4172cb",
        "type": "subflow:bb656f77f61addff",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1190,
        "y": 180,
        "wires": [
            [
                "0af745030787cf34"
            ]
        ]
    },
    {
        "id": "77f1dd36c10f0fd9",
        "type": "switch",
        "z": "533e6c27c7c050c1",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1035,
        "y": 220,
        "wires": [
            [
                "9e89ade18d4172cb"
            ]
        ],
        "l": false
    },
    {
        "id": "a2d387d27adb8528",
        "type": "function",
        "z": "533e6c27c7c050c1",
        "name": "function 38",
        "func": "let propIntegration=msg.payload;\n \n \nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 945,
        "y": 220,
        "wires": [
            [
                "77f1dd36c10f0fd9"
            ]
        ],
        "l": false
    },
    {
        "id": "dc2a8ad3bbb430ec",
        "type": "subflow:bb656f77f61addff",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1770,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b355be9378d62d4f",
        "type": "subflow:bb656f77f61addff",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "Error",
                "type": "str"
            }
        ],
        "x": 1790,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3a3f94e6f5d50b01",
        "type": "subflow:01bb3059fc08565d",
        "z": "c751949c59f2c3bc",
        "name": "",
        "x": 1160,
        "y": 220,
        "wires": [
            [
                "6b7f8e87e5e14471",
                "93ad251655ab3737"
            ],
            [
                "1e9fe47099fb17ed",
                "a1a1d305a2c25891"
            ]
        ]
    },
    {
        "id": "90fe7b0388e61ee3",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1100,
        "y": 180,
        "wires": [
            [
                "3a3f94e6f5d50b01"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7b2950f4aa48db06",
        "type": "switch",
        "z": "c751949c59f2c3bc",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "15a315f8ceb25d8c"
            ]
        ]
    },
    {
        "id": "6b7f8e87e5e14471",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1585,
        "y": 180,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "1e9fe47099fb17ed",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "ERROR",
                "type": "str"
            }
        ],
        "x": 1585,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "15a315f8ceb25d8c",
        "type": "function",
        "z": "c751949c59f2c3bc",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "9b728472c861cecd"
            ]
        ]
    },
    {
        "id": "9b728472c861cecd",
        "type": "cronplus",
        "z": "c751949c59f2c3bc",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "d42d69dd09f0d759"
            ]
        ]
    },
    {
        "id": "12c11ec9e8acfb68",
        "type": "subflow:bb656f77f61addff",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "90fe7b0388e61ee3"
            ]
        ]
    },
    {
        "id": "d42d69dd09f0d759",
        "type": "function",
        "z": "c751949c59f2c3bc",
        "name": "function 37",
        "func": "let propIntegration=msg.payload;\n \n \nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 755,
        "y": 220,
        "wires": [
            [
                "7c4f69e0f47d1cf6"
            ]
        ],
        "l": false
    },
    {
        "id": "7c4f69e0f47d1cf6",
        "type": "switch",
        "z": "c751949c59f2c3bc",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 845,
        "y": 220,
        "wires": [
            [
                "12c11ec9e8acfb68"
            ]
        ],
        "l": false
    },
    {
        "id": "93ad251655ab3737",
        "type": "subflow:bb656f77f61addff",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a1a1d305a2c25891",
        "type": "subflow:bb656f77f61addff",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "ERROR",
                "type": "str"
            }
        ],
        "x": 1530,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "691a79796462bde3",
        "type": "function",
        "z": "bb656f77f61addff",
        "name": "function 35",
        "func": "let propIntegration = msg.propIntegration;\nnode.warn(msg.propIntegration);\nlet listPropIntegration = global.get('allIntegrationParameters') || [];\nlet statusValue = env.get('status');\n \nif (propIntegration && propIntegration.code) {\n    listPropIntegration = listPropIntegration.map(x => {\n        if (x.code === propIntegration.code) {\n            x.status = statusValue;\n        }\n        return x;\n    });\n\n    \n    global.set('allIntegrationParameters', listPropIntegration);\n} else {\n    node.error('propIntegration is undefined or missing the \"code\" property');\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "db9d2eccc1c66c4f",
        "type": "subflow:c34fc38f83091edb",
        "z": "cff71436fcabdffa",
        "name": "",
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "49e72d21c936c63f"
            ]
        ]
    },
    {
        "id": "6d0fc7307e09350c",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "db9d2eccc1c66c4f"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7f1db3a8fb6d4153",
        "type": "switch",
        "z": "cff71436fcabdffa",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 340,
        "wires": [
            [
                "f00c9f5a9bcb8b1e"
            ]
        ]
    },
    {
        "id": "f9d2d10b5062f8e2",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1200,
        "y": 440,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "f00c9f5a9bcb8b1e",
        "type": "function",
        "z": "cff71436fcabdffa",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 340,
        "wires": [
            [
                "bdeb72ccf65856da"
            ]
        ]
    },
    {
        "id": "bdeb72ccf65856da",
        "type": "cronplus",
        "z": "cff71436fcabdffa",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "f5a05ed2b51ab86d"
            ]
        ]
    },
    {
        "id": "f5a05ed2b51ab86d",
        "type": "function",
        "z": "cff71436fcabdffa",
        "name": "function 39",
        "func": "let propIntegration=msg.payload;\n \n\nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 775,
        "y": 340,
        "wires": [
            [
                "ac2241b0aa89c2d0"
            ]
        ],
        "l": false
    },
    {
        "id": "dcf00d6042ae2604",
        "type": "subflow:bb656f77f61addff",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "6d0fc7307e09350c"
            ]
        ]
    },
    {
        "id": "49e72d21c936c63f",
        "type": "subflow:bb656f77f61addff",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1170,
        "y": 380,
        "wires": [
            [
                "f9d2d10b5062f8e2"
            ]
        ]
    },
    {
        "id": "ac2241b0aa89c2d0",
        "type": "switch",
        "z": "cff71436fcabdffa",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 845,
        "y": 340,
        "wires": [
            [
                "dcf00d6042ae2604"
            ]
        ],
        "l": false
    },
    {
        "id": "0aa65a33874e5ec0",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "name": "NetsistoSforinCategoriesIntegration",
        "info": "S4INDE OLAN TUM GRUP KODLARINI(KOD_2) SILINIYOR",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "a76a2519da79eef8",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "DeleteNetsisGroupCode",
        "func": "msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = global.get(\"SFORIN_URL\");\n\nreturn msg;;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "ead1e9a83c598d57"
            ]
        ]
    },
    {
        "id": "ead1e9a83c598d57",
        "type": "http request",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "Sforin Category1",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/DeleteAllProductNetsisCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 870,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1ddc986150f81f61",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "MetropolUnGenerateGroupCodeOut ",
        "mode": "link",
        "links": [
            "0d109ce5201c7170"
        ],
        "x": 285,
        "y": 280,
        "wires": []
    },
    {
        "id": "884e8a7da130656c",
        "type": "complete",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "",
        "scope": [
            "ead1e9a83c598d57"
        ],
        "uncaught": false,
        "x": 150,
        "y": 280,
        "wires": [
            [
                "1ddc986150f81f61"
            ]
        ]
    },
    {
        "id": "2fc69c8d9eb46241",
        "type": "catch",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "",
        "scope": [
            "ead1e9a83c598d57"
        ],
        "uncaught": false,
        "x": 130,
        "y": 360,
        "wires": [
            [
                "f70fb1f8fc565ffa"
            ]
        ]
    },
    {
        "id": "f857d4221fcefe11",
        "type": "subflow:fa51d0694c73d14f",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "a76a2519da79eef8"
            ]
        ]
    },
    {
        "id": "eac45d8363566f7b",
        "type": "subflow:7cdf28f23984a61d",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 560,
        "y": 360,
        "wires": []
    },
    {
        "id": "f70fb1f8fc565ffa",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.error.message;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 360,
        "wires": [
            [
                "eac45d8363566f7b"
            ]
        ]
    },
    {
        "id": "c1aa45c2fbe91e0f",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "Error işlem log",
        "info": "",
        "x": 570,
        "y": 320,
        "wires": []
    },
    {
        "id": "6dc99374054a26e8",
        "type": "http request",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Sforin Category",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "a48717c13f51d78a"
            ]
        ]
    },
    {
        "id": "4ca3f97a18e92d62",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Get Sforin Category",
        "func": " msg.SFORIN_URL = global.get(\"SFORIN_URL\");\n msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 560,
        "wires": [
            [
                "6dc99374054a26e8"
            ]
        ]
    },
    {
        "id": "9c81f956a6d89063",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = flow.get(\"netsisGroupCode\");\nlet sforinCategory = flow.get(\"sforinCategory\");\n\nif (!netsisGroupCode) {\n  return [{ status: false }, null];\n}\n\nif (!sforinCategory) {\n  return [{ status: false }, null];\n}\n\n// Map the incoming objects to Sets based on their respective codes\nlet listNetsisGroupCode = new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM]));\nlet listSforinCategoryCode = new Set(sforinCategory.map(item => item.categoryCode));\n\n \nmsg.arrayNetsisGroupCode = Array.from(listNetsisGroupCode);\nmsg.arraySforinCategoryCode = Array.from(listSforinCategoryCode);\nmsg.netsisGroupCodeList=Array.from(listNetsisGroupCode).flatMap(x=>x[0])\n\nmsg.status = true;\n   \nreturn [null, msg];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "f7cdcf2f0edd64b4"
            ],
            [
                "a9151f608e0cb721"
            ]
        ]
    },
    {
        "id": "f7cdcf2f0edd64b4",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut",
        "mode": "link",
        "links": [
            "815c2ae98d00c5bf"
        ],
        "x": 1155,
        "y": 480,
        "wires": []
    },
    {
        "id": "815c2ae98d00c5bf",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "f7cdcf2f0edd64b4"
        ],
        "x": 1005,
        "y": 480,
        "wires": [
            [
                "9c81f956a6d89063"
            ]
        ]
    },
    {
        "id": "a48717c13f51d78a",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Sforin Category Result",
        "func": "flow.set(\"sforinCategory\", msg.payload.data); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 560,
        "wires": [
            [
                "9c81f956a6d89063"
            ]
        ]
    },
    {
        "id": "6c9a90593a3d872f",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "ConvertJson",
        "func": "let items = msg.matchingItems;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nmsg.missingCategoryCodes = items.map(item => {  \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                \"_id\": \"\",\n                \"categoryCode\": item[0],\n                \"definition_lang\": item[1],\n                \"parentCategory\": null,\n                \"netsisDataField\":true\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.index = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 660,
        "wires": [
            [
                "ca859a11d24a326f"
            ]
        ]
    },
    {
        "id": "4fb1884db3f59fd3",
        "type": "http request",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1650,
        "y": 800,
        "wires": [
            [
                "756712d785c49001"
            ]
        ]
    },
    {
        "id": "756712d785c49001",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    msg.statusCode = null\n    return [msg, null];\n}\n\nelse {\n    // Handle error\n  \n    return [null, msg];\n   \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 880,
        "wires": [
            [
                "660b73c8caa85f7d",
                "6780aab150360559"
            ],
            [
                "b35bc8ff878e94cb"
            ]
        ]
    },
    {
        "id": "660b73c8caa85f7d",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "matchingItemsIndex",
        "func": "\nlet items = msg.missingCategoryCodes;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];; // All items processed\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 800,
        "wires": [
            [
                "4fb1884db3f59fd3"
            ],
            [
                "16d1f410e64887fb"
            ]
        ]
    },
    {
        "id": "0d109ce5201c7170",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSFORINFieldIntegrationRootIn",
        "links": [
            "1ddc986150f81f61"
        ],
        "x": 95,
        "y": 500,
        "wires": [
            [
                "576e760d3ceae24b"
            ]
        ]
    },
    {
        "id": "5790442c0ce9fe2b",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "matchingItems",
        "func": "const arrayNetsisGroupCode = msg.arrayNetsisGroupCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\nconst matchingItems = transferStockItemsArray.flatMap(groupCode =>\n    arrayNetsisGroupCode.filter(item => item[0] === groupCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 620,
        "wires": [
            [
                "6c9a90593a3d872f"
            ]
        ]
    },
    {
        "id": "8ee71b06f782ddeb",
        "type": "change",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 580,
        "wires": [
            [
                "5790442c0ce9fe2b"
            ]
        ]
    },
    {
        "id": "a9151f608e0cb721",
        "type": "differences",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisGroupCodeList",
        "leftInputType": "msg",
        "rightInput": "arraySforinCategoryCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1320,
        "y": 540,
        "wires": [
            [
                "8ee71b06f782ddeb"
            ]
        ]
    },
    {
        "id": "d42c8ff5881498e4",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Create Netsis To Sforin Product Category",
        "info": "KOD2 LERI MANUEL ACILMA IHTIMALINE KARSI KONTROLLU BIR AKTARIM SAGLANDI",
        "x": 260,
        "y": 460,
        "wires": []
    },
    {
        "id": "ca859a11d24a326f",
        "type": "subflow:fa51d0694c73d14f",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "x": 1360,
        "y": 720,
        "wires": [
            [
                "660b73c8caa85f7d"
            ]
        ]
    },
    {
        "id": "cdb49293da75c5bd",
        "type": "subflow:7cdf28f23984a61d",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1700,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b35bc8ff878e94cb",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 980,
        "wires": [
            [
                "cdb49293da75c5bd"
            ]
        ]
    },
    {
        "id": "f217409039cc79af",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Error işlem log",
        "info": "",
        "x": 1670,
        "y": 940,
        "wires": []
    },
    {
        "id": "040c0be6b76cc14f",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1220,
        "y": 920,
        "wires": []
    },
    {
        "id": "6780aab150360559",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "ConvertLogData",
        "func": "// msg.logData=JSON.stringify(msg.item);\nmsg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 960,
        "wires": [
            [
                "6d38ea25182761c5"
            ]
        ]
    },
    {
        "id": "6d38ea25182761c5",
        "type": "subflow:7cdf28f23984a61d",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINFieldIntegration(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1bd2620d8e18327a",
        "type": "subflow:d296b4008b6072d8",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": " SELECT DISTINCT dbo.TRK(KOD_2) GRUP_KOD,dbo.TRK(ISNULL(KOD2.GRUP_ISIM,'')) GRUP_ISIM     FROM TBLSTSABIT ST     LEFT JOIN TBLSTOKKOD2 KOD2 ON KOD2.GRUP_KOD=ST.KOD_2   WHERE KOD_2 IS NOT NULL",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 520,
        "wires": [
            [
                "0da86f6b93c80314"
            ]
        ]
    },
    {
        "id": "0da86f6b93c80314",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\n\nflow.set(\"netsisGroupCode\", items);\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7ea64fbbc371f08c",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = flow.get(\"netsisGroupCode\");\nlet sforinCategory = flow.get(\"sforinCategory\");\n\nif (!netsisGroupCode) {\n  return [{ status: false }, null];\n}\n\nif (!sforinCategory) {\n  return [{ status: false }, null];\n}\n\n// Map the incoming objects to Sets based on their respective codes\nlet listNetsisGroupCode = new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM, item.ALT_GRUP_KOD, item.ALT_GRUP_ISIM]));\nlet listSforinCategoryCode = new Set(sforinCategory.map(item => item.categoryCode));\n\n \nmsg.arrayNetsisGroupCode = Array.from(listNetsisGroupCode);\nmsg.arraySforinCategoryCode = Array.from(listSforinCategoryCode);\nmsg.netsisGroupCodeList=Array.from(listNetsisGroupCode).flatMap(x=>x[2]) //ALT_GRUP_KOD KARŞILIK GELIYOR\n\nmsg.status = true;\n   \nreturn [null, msg];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1200,
        "wires": [
            [
                "559aeaa67c1aa68c"
            ],
            [
                "a9fc6d601a039a65"
            ]
        ]
    },
    {
        "id": "559aeaa67c1aa68c",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut",
        "mode": "link",
        "links": [],
        "x": 955,
        "y": 1140,
        "wires": []
    },
    {
        "id": "af2a7bc3c4a7ffdd",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [],
        "x": 715,
        "y": 1140,
        "wires": [
            [
                "7ea64fbbc371f08c"
            ]
        ]
    },
    {
        "id": "3826e280e67e472b",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "ConvertJson",
        "func": "let items = msg.matchingItems;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nmsg.missingCategoryCodes = items.map(item => {  \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                \"_id\": \"\",\n                \"categoryCode\": item[2],\n                \"definition_lang\": item[3],\n                \"parentCategory\": item[0],\n                \"netsisDataField\":true\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.index = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 1340,
        "wires": [
            [
                "79ec6beb55886709"
            ]
        ]
    },
    {
        "id": "49480f5bf7fc7dd9",
        "type": "http request",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1650,
        "y": 1460,
        "wires": [
            [
                "3c55b92814464393"
            ]
        ]
    },
    {
        "id": "3c55b92814464393",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Response",
        "func": "if (msg.statusCode === 200 || msg.statusCode===400) {\n    msg.index++;\n    msg.statusCode = null\n    \n    return [msg, null];\n}\n \n\nelse {\n    // Handle error\n  \n    return [null, msg];\n   \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1560,
        "wires": [
            [
                "18ea68b8cd0f85bd",
                "bf1ef8d3362128ba"
            ],
            [
                "c1809acaf56047d8",
                "c8a7c02d48b81dc9"
            ]
        ]
    },
    {
        "id": "18ea68b8cd0f85bd",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "matchingItemsIndex",
        "func": "\nlet items = msg.missingCategoryCodes;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];; // All items processed\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.test = msg.missingCategoryCodes.length;\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1460,
        "wires": [
            [
                "49480f5bf7fc7dd9"
            ],
            [
                "c8a7c02d48b81dc9"
            ]
        ]
    },
    {
        "id": "91c614bf350e0eea",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "matchingItems",
        "func": "const arrayNetsisGroupCode = msg.arrayNetsisGroupCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\nconst matchingItems = transferStockItemsArray.flatMap(groupCode =>\n    arrayNetsisGroupCode.filter(item => item[2] === groupCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1300,
        "wires": [
            [
                "3826e280e67e472b"
            ]
        ]
    },
    {
        "id": "498e2acdd7a96bbb",
        "type": "change",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1340,
        "y": 1260,
        "wires": [
            [
                "91c614bf350e0eea"
            ]
        ]
    },
    {
        "id": "a9fc6d601a039a65",
        "type": "differences",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisGroupCodeList",
        "leftInputType": "msg",
        "rightInput": "arraySforinCategoryCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1180,
        "y": 1200,
        "wires": [
            [
                "498e2acdd7a96bbb"
            ]
        ]
    },
    {
        "id": "06a609fd9d1ff22f",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Create Netsis To Sforin Product Category",
        "info": "KOD2 LERI MANUEL ACILMA IHTIMALINE KARSI KONTROLLU BIR AKTARIM SAGLANDI",
        "x": 260,
        "y": 1140,
        "wires": []
    },
    {
        "id": "79ec6beb55886709",
        "type": "subflow:fa51d0694c73d14f",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "x": 1360,
        "y": 1400,
        "wires": [
            [
                "18ea68b8cd0f85bd"
            ]
        ]
    },
    {
        "id": "8769ce217ae22c20",
        "type": "subflow:7cdf28f23984a61d",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1700,
        "y": 1700,
        "wires": []
    },
    {
        "id": "c1809acaf56047d8",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1660,
        "wires": [
            [
                "8769ce217ae22c20"
            ]
        ]
    },
    {
        "id": "744d130e112a8424",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Error işlem log",
        "info": "",
        "x": 1670,
        "y": 1620,
        "wires": []
    },
    {
        "id": "36a4dac9fe653cf7",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1220,
        "y": 1600,
        "wires": []
    },
    {
        "id": "bf1ef8d3362128ba",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "ConvertLogData",
        "func": "// msg.logData=JSON.stringify(msg.item);\nmsg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1640,
        "wires": [
            [
                "8773848cc5b62a20"
            ]
        ]
    },
    {
        "id": "8773848cc5b62a20",
        "type": "subflow:7cdf28f23984a61d",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINFieldIntegration(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 1680,
        "wires": []
    },
    {
        "id": "3d931c21cf043166",
        "type": "subflow:d296b4008b6072d8",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": " SELECT DISTINCT dbo.TRK(KOD_2) GRUP_KOD,                 dbo.TRK(ISNULL(KOD2.GRUP_ISIM, '')) GRUP_ISIM,                 dbo.TRK(KOD_3) ALT_GRUP_KOD,                 dbo.TRK(ISNULL(KOD3.GRUP_ISIM, '')) ALT_GRUP_ISIM FROM TBLSTSABIT ST LEFT JOIN TBLSTOKKOD2 KOD2 ON KOD2.GRUP_KOD=ST.KOD_2 LEFT JOIN TBLSTOKKOD3 KOD3 ON KOD3.GRUP_KOD=ST.KOD_3 WHERE KOD_2 IS NOT NULL   AND KOD_3 IS NOT NULL",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "35dd0b33ed7f996c"
            ]
        ]
    },
    {
        "id": "35dd0b33ed7f996c",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\n\nflow.set(\"netsisGroupCode\", items);\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1200,
        "wires": [
            [
                "7ea64fbbc371f08c"
            ]
        ]
    },
    {
        "id": "16d1f410e64887fb",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut4",
        "mode": "link",
        "links": [
            "c34224106512ce20"
        ],
        "x": 1585,
        "y": 740,
        "wires": []
    },
    {
        "id": "c34224106512ce20",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "16d1f410e64887fb"
        ],
        "x": 65,
        "y": 1200,
        "wires": [
            [
                "3d931c21cf043166"
            ]
        ]
    },
    {
        "id": "c7227421624d95d1",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "DeleteNetsisGroupCode",
        "func": "msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = global.get(\"SFORIN_URL\");\n\nreturn msg;;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1940,
        "wires": [
            [
                "96c3dac546b822f5"
            ]
        ]
    },
    {
        "id": "96c3dac546b822f5",
        "type": "http request",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "Sforin Get All Category1",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 870,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "45a3ad2317958eaf",
        "type": "complete",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "",
        "scope": [
            "96c3dac546b822f5"
        ],
        "uncaught": false,
        "x": 130,
        "y": 2060,
        "wires": [
            [
                "9df4f7571e38ba9e"
            ]
        ]
    },
    {
        "id": "b1bf6a640e7a3aeb",
        "type": "catch",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "",
        "scope": [
            "96c3dac546b822f5"
        ],
        "uncaught": false,
        "x": 110,
        "y": 2140,
        "wires": [
            [
                "69aa99fed3d8fd00"
            ]
        ]
    },
    {
        "id": "4a3a9feae1897ec0",
        "type": "subflow:fa51d0694c73d14f",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "",
        "x": 320,
        "y": 1960,
        "wires": [
            [
                "c7227421624d95d1"
            ]
        ]
    },
    {
        "id": "ee0672a9b180a601",
        "type": "subflow:7cdf28f23984a61d",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 540,
        "y": 2140,
        "wires": []
    },
    {
        "id": "69aa99fed3d8fd00",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.error.message;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2140,
        "wires": [
            [
                "ee0672a9b180a601"
            ]
        ]
    },
    {
        "id": "daf5bc3dec63e406",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "Error işlem log",
        "info": "",
        "x": 550,
        "y": 2100,
        "wires": []
    },
    {
        "id": "beeaf6c300562766",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "GET ALL msg.netsisCatagoryType",
        "info": "",
        "x": 180,
        "y": 1920,
        "wires": []
    },
    {
        "id": "c8a7c02d48b81dc9",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "GetAllProductCataOut",
        "mode": "link",
        "links": [
            "8ee4e16f7af8eb35"
        ],
        "x": 1765,
        "y": 1520,
        "wires": []
    },
    {
        "id": "8ee4e16f7af8eb35",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "GetAllProductCataIn",
        "links": [
            "c8a7c02d48b81dc9"
        ],
        "x": 105,
        "y": 1960,
        "wires": [
            [
                "4a3a9feae1897ec0"
            ]
        ]
    },
    {
        "id": "9df4f7571e38ba9e",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "function 50",
        "func": "msg.getAllNetsisProductTypes=msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "d3e0544e1409e870",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "name": "Tamam",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "8c01d939eb123f5a",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "a5bcf342b35175ca",
        "type": "differences",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCodes",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "89ad0a2a79add44f"
            ]
        ]
    },
    {
        "id": "84f6b5a28bab6643",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "function 40",
        "func": "msg.netsisStockCode=msg.payload;\nlet netsisStockCodes=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 560,
        "wires": [
            [
                "a5bcf342b35175ca"
            ]
        ]
    },
    {
        "id": "89ad0a2a79add44f",
        "type": "change",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "2f847f3ed271a069"
            ]
        ]
    },
    {
        "id": "0bf3e30ba3e4b060",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "matchingItems",
        "func": "const netsisStockCode = msg.netsisStockCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\n\n\n \n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    netsisStockCode\n        .filter(item => item.STOK_KODU === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR İLİŞKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\n\nmsg.matchingItems=matchingItems;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 560,
        "wires": [
            [
                "8d8bacc664ddc537"
            ]
        ]
    },
    {
        "id": "3e29b77e3521d84e",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)In",
        "links": [
            "b46fa05d17aefc16"
        ],
        "x": 85,
        "y": 500,
        "wires": [
            [
                "222965ddb0e09195"
            ]
        ]
    },
    {
        "id": "8d8bacc664ddc537",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)matchingItemsOut",
        "mode": "link",
        "links": [
            "c6600975483aa103"
        ],
        "x": 1645,
        "y": 620,
        "wires": []
    },
    {
        "id": "4532ac7f0859e986",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes=msg.netsisProductTypes;\nconst getAllNetsisProductTypes=msg.getAllNetsisProductTypes?.data;\nvar data = msg.matchingItems;\n;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    let groupCode = item.GRUP_KODU !== \"\" ? item.GRUP_KODU : \"\";\n    let parentCode=item.ALT_GRUP_KODU !== \"\" ? item.ALT_GRUP_KODU : \"\"\n    let s4inCatagoryGroupCode = getAllNetsisProductTypes.find(\n        x => x.categoryCode === groupCode && (x.parentCategory === null || x.parentCategory === \"\")\n    ) || \"\";\n\n    let s4inCatagoryParentCode = getAllNetsisProductTypes.find(x => x.categoryCode == parentCode && x.parentCategory ==groupCode)||\"\"\n   \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                 \"productType\": {\n                     \"typeCode\": (netsisProductTypes.find(x => x.key == groupCode)?.productTypeCode) || \"\",                     \n                     \"definitionLang\": (netsisProductTypes.find(x => x.key == groupCode)?.productTypeCodeName) || \"\"\n                    \n                },\n                \"categories\": [\n                   \n                    {\n                        \"_id\":s4inCatagoryGroupCode._id||\"\",\n                        \"categoryCode\": groupCode,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"\",\n                        \"netsisDataField\": true\n                    },\n                    {\n                        \"_id\":s4inCatagoryParentCode._id||\"\",\n                        \"categoryCode\": parentCode,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": groupCode,\n                        \"netsisDataField\": true\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"isBaseUnit\": true,\n                        \"factor\": 1.0,\n                        \"divisor\": 1.0,\n                        \"area\": 0.0,\n                        \"widthM\": 0.0,\n                        \"heightM\": 0.0,\n                        \"depthM\": 0.0,\n                        \"weightKg\": 0.0,\n                        \"volumeM3\": 0.0,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    },\n                     ...(item.OLCU_BR2? [{\n                         \"unitCode\": item.OLCU_BR2,\n                         \"isBaseUnit\": true,\n                         \"factor\": item.PAY_1,\n                         \"divisor\": item.PAYDA_1,\n                         \"area\": 0.0,\n                         \"widthM\": 0.0,\n                         \"heightM\": 0.0,\n                         \"depthM\": 0.0,\n                         \"weightKg\": 0.0,\n                         \"volumeM3\": 0.0,\n                         \"labels\": [\n                             {\n                                 \"labelCode\": \"\",\n                                 \"designFilePath\": \"\",\n                                 \"customerCode\": \"\",\n                                 \"packType\": \"\"\n                             }\n                         ]\n\n                     }]:[]),\n                     ...(item.OLCU_BR3?[{\n                         \"unitCode\": item.OLCU_BR3,\n                        \"isBaseUnit\": true,\n                         \"factor\": item.PAY2,\n                         \"divisor\": item.PAYDA2,\n                        \"area\": 0.0,\n                        \"widthM\": 0.0,\n                        \"heightM\": 0.0,\n                        \"depthM\": 0.0,\n                        \"weightKg\": 0.0,\n                        \"volumeM3\": 0.0,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                     }]:[])\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD1\n                    },\n                    ...(item.OLCU_BR2 ? [{\n                        \"unitCode\": item.OLCU_BR2,\n                        \"barcode\": item.BARKOD2\n                    }] : []),\n                    ...(item.OLCU_BR3 ? [{\n                        \"unitCode\": item.OLCU_BR3,\n                        \"barcode\": item.BARKOD3\n                    }] : [])\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": null,\n                        \"heightM\": null,\n                        \"depthM\": null,\n                        \"weighthKg\": null,\n                        \"area\": null,\n                        \"wigthtLimitKG\": null,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.STOK_KODU,\n                        \"defaultDefinition\": item.STOK_ADI,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.STOK_KODU,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n        \n    };\n    \n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 840,
        "wires": [
            [
                "a21f72fe43da0dab"
            ]
        ]
    },
    {
        "id": "c75e104d9b1606e8",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Index",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "6742c93f2b2198d3"
            ],
            []
        ]
    },
    {
        "id": "d82b08200f5c2b8f",
        "type": "http request",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/ProductSync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 970,
        "y": 820,
        "wires": [
            [
                "02661279d9e35e94"
            ]
        ]
    },
    {
        "id": "02661279d9e35e94",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 820,
        "wires": [
            [
                "b0ae507329500bc1",
                "b628d844fcac720d"
            ],
            [
                "b0ae507329500bc1"
            ],
            [
                "be78f7bcf5b6f88e"
            ]
        ]
    },
    {
        "id": "a21f72fe43da0dab",
        "type": "subflow:fa51d0694c73d14f",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "x": 520,
        "y": 840,
        "wires": [
            [
                "c75e104d9b1606e8"
            ]
        ]
    },
    {
        "id": "b0ae507329500bc1",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)ResponseOut",
        "mode": "link",
        "links": [
            "6268b9dbdf76f010"
        ],
        "x": 1265,
        "y": 720,
        "wires": []
    },
    {
        "id": "c6600975483aa103",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)matchingItemsIn",
        "links": [
            "8d8bacc664ddc537"
        ],
        "x": 85,
        "y": 820,
        "wires": [
            [
                "4532ac7f0859e986"
            ]
        ]
    },
    {
        "id": "5ac2beb0bfc134c6",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Product is being shipped",
        "info": "",
        "x": 190,
        "y": 760,
        "wires": []
    },
    {
        "id": "6268b9dbdf76f010",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "NetsisToSFORINStockCard(MMSQL)ResponseIn",
        "links": [
            "b0ae507329500bc1"
        ],
        "x": 425,
        "y": 780,
        "wires": [
            [
                "a21f72fe43da0dab"
            ]
        ]
    },
    {
        "id": "9a330421bcc26d1a",
        "type": "subflow:7cdf28f23984a61d",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1440,
        "y": 800,
        "wires": []
    },
    {
        "id": "b628d844fcac720d",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 760,
        "wires": [
            [
                "9a330421bcc26d1a"
            ]
        ]
    },
    {
        "id": "6ad28bc266cdda15",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1420,
        "y": 720,
        "wires": []
    },
    {
        "id": "42cb4ef1b0076ed6",
        "type": "subflow:7cdf28f23984a61d",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1380,
        "y": 920,
        "wires": []
    },
    {
        "id": "be78f7bcf5b6f88e",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 880,
        "wires": [
            [
                "42cb4ef1b0076ed6"
            ]
        ]
    },
    {
        "id": "5a72172dbfbc22d3",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Error işlem log",
        "info": "",
        "x": 1350,
        "y": 840,
        "wires": []
    },
    {
        "id": "6742c93f2b2198d3",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTOKBAR",
        "mode": "link",
        "links": [
            "1957f1b821b1f4f1"
        ],
        "x": 755,
        "y": 800,
        "wires": []
    },
    {
        "id": "8da1e5726ef27a97",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "info": "Netsiste stoklar için ayrı bir barkod sistemi kullanılıyor ise \nKontrol ediyorz ve sforine giden json a ekleme yapıyorz\n",
        "x": 720,
        "y": 760,
        "wires": []
    },
    {
        "id": "dd46605ec969997f",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)InTBLSTOKBARResponse",
        "links": [
            "4dda1622c9781aad"
        ],
        "x": 845,
        "y": 760,
        "wires": [
            [
                "d82b08200f5c2b8f"
            ]
        ]
    },
    {
        "id": "16b12abd898e5908",
        "type": "http request",
        "z": "17803f695ab8af0d",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 970,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b323251e02bbeb52",
        "type": "complete",
        "z": "17803f695ab8af0d",
        "name": "",
        "scope": [
            "16b12abd898e5908"
        ],
        "uncaught": false,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "5793b372ecc57601"
            ]
        ]
    },
    {
        "id": "d529d3c6f4c19cb1",
        "type": "catch",
        "z": "17803f695ab8af0d",
        "name": "catch errors",
        "scope": [
            "16b12abd898e5908"
        ],
        "uncaught": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "7cebf30eb33f99e9"
            ]
        ]
    },
    {
        "id": "d6733450b1cd3379",
        "type": "function",
        "z": "17803f695ab8af0d",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 140,
        "wires": [
            [
                "16b12abd898e5908"
            ]
        ]
    },
    {
        "id": "7cebf30eb33f99e9",
        "type": "function",
        "z": "17803f695ab8af0d",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "71a284d83e5b8267"
            ],
            [
                "76c3140e02ec5fca"
            ]
        ]
    },
    {
        "id": "76c3140e02ec5fca",
        "type": "debug",
        "z": "17803f695ab8af0d",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 240,
        "wires": []
    },
    {
        "id": "3bffe1838e90f37e",
        "type": "function",
        "z": "17803f695ab8af0d",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "b46fa05d17aefc16"
            ]
        ]
    },
    {
        "id": "5793b372ecc57601",
        "type": "switch",
        "z": "17803f695ab8af0d",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 290,
        "y": 320,
        "wires": [
            [],
            [
                "3bffe1838e90f37e"
            ],
            [
                "b220831b59927e3e"
            ]
        ]
    },
    {
        "id": "b220831b59927e3e",
        "type": "debug",
        "z": "17803f695ab8af0d",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 400,
        "wires": []
    },
    {
        "id": "393a942627e4317d",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "name": "GetAllSFORINStockCard",
        "info": "",
        "x": 210,
        "y": 100,
        "wires": []
    },
    {
        "id": "b46fa05d17aefc16",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "3e29b77e3521d84e"
        ],
        "x": 705,
        "y": 320,
        "wires": []
    },
    {
        "id": "71a284d83e5b8267",
        "type": "subflow:fa51d0694c73d14f",
        "z": "17803f695ab8af0d",
        "name": "",
        "x": 420,
        "y": 140,
        "wires": [
            [
                "d6733450b1cd3379"
            ]
        ]
    },
    {
        "id": "0e65efccab73ad96",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 180,
        "y": 1040,
        "wires": []
    },
    {
        "id": "09573dbd4c0cb283",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    WITH A1 AS ( \n SELECT\n ROW_NUMBER() OVER(partition BY KOD ORDER BY INCKEYNO ASC )+3 SIRA,\n OLCUBIRIMI, KOD  \n FROM TBLSTBIRIM  WHERE KOD='${stockCode}'\n )\n \n SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n\t\tWHEN I_YEDEK1 = 4 THEN A1.OLCUBIRIMI\n\t\tWHEN I_YEDEK1 = 5 THEN A1.OLCUBIRIMI\t\t\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n LEFT JOIN A1 ON A1.KOD=B.STOK_KODU AND I_YEDEK1=A1.SIRA\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1140,
        "wires": [
            [
                "15155f40f5b91522"
            ]
        ]
    },
    {
        "id": "1957f1b821b1f4f1",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)InTBLSTOKBAR",
        "links": [
            "6742c93f2b2198d3"
        ],
        "x": 145,
        "y": 1120,
        "wires": [
            [
                "09573dbd4c0cb283"
            ]
        ]
    },
    {
        "id": "710f012436a1ab22",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "function 41",
        "func": "msg.payload.forEach(item=>\n{\nmsg.item.data[0].barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1140,
        "wires": [
            [
                "e8585defc8d09159"
            ]
        ]
    },
    {
        "id": "ad60f36acc269401",
        "type": "subflow:d296b4008b6072d8",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "",
        "x": 370,
        "y": 560,
        "wires": [
            [
                "84f6b5a28bab6643"
            ]
        ]
    },
    {
        "id": "222965ddb0e09195",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.sforinStockCode = msg.sforinStockCode||[]\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT A.STOK_KODU,\n       dbo.TRK(STOK_ADI) AS STOK_ADI,\n       dbo.TRK(KOD_2) AS GRUP_KODU,\n       dbo.TRK(KOD_3) AS ALT_GRUP_KODU,\n       OLCU_BR1,\n       OLCU_BR2,\n       OLCU_BR3,\n       PAY_1,\n       PAYDA_1,\n       PAY2,\n       PAYDA2,\t  \n       CASE \n           WHEN BARKOD1 IS NOT NULL AND BARKOD1 <> '' THEN BARKOD1\n           WHEN OLCU_BR1 IS NOT NULL AND OLCU_BR1 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR1)\n           ELSE NULL\n       END AS BARKOD1,\n       CASE \n           WHEN BARKOD2 IS NOT NULL AND BARKOD2 <> '' THEN BARKOD2\n           WHEN OLCU_BR2 IS NOT NULL AND OLCU_BR2 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR2)\n           ELSE NULL\n       END AS BARKOD2,\n       CASE \n           WHEN BARKOD3 IS NOT NULL AND BARKOD3 <> '' THEN BARKOD3\n           WHEN OLCU_BR3 IS NOT NULL AND OLCU_BR3 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR3)\n           ELSE NULL\n       END AS BARKOD3,\n       B.TUR\nFROM TBLSTSABIT A\nLEFT JOIN TBLSTSABITEK B ON A.STOK_KODU = B.STOK_KODU\n    WHERE SUBE_KODU IN ('-1', '${branchCode}')  AND A.KOD_3 IS NOT NULL  AND    DBO.TRK(A.KOD_2) IN ('MAMUL','YARIMML','HAMMADDE','AMBALAJ','DİĞER')     \n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query=query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 560,
        "wires": [
            [
                "ad60f36acc269401"
            ]
        ]
    },
    {
        "id": "f68b4c2669c7b292",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "Netsis TBLSTBIRIM",
        "info": "",
        "x": 170,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1343bc142841a4e4",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "Netsis TBLSTBIRIM  json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n        OLCUBIRIMI,\n        KOD,\n        PAY,\n        PAYDA,\n        CONVERT(DECIMAL(18,2),NETAGIRLIK) NETAGIRLIK\n        ,CONVERT(DECIMAL(18,2),BRUTAGIRLIK) BRUTAGIRLIK,\n        CONVERT(DECIMAL(18,2),EN) EN,\n        CONVERT(DECIMAL(18,2),BOY) BOY,\n        CONVERT(DECIMAL(18,2),YUKSEKLIK) YUKSEKLIK\n    FROM TBLSTBIRIM  \n            WHERE \n                 KOD= '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1340,
        "wires": [
            [
                "83b889e0e475c165"
            ]
        ]
    },
    {
        "id": "4dda1622c9781aad",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTOKBARResponse",
        "mode": "link",
        "links": [
            "dd46605ec969997f"
        ],
        "x": 925,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cb3c99cb363b481e",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "function 42",
        "func": "msg.payload.forEach(item=>\n{\n    msg.item.data[0].units.push({\n        \"unitCode\": item.OLCUBIRIMI,\n        \"isBaseUnit\": true,\n        \"factor\": item.PAY,\n        \"divisor\":item.PAYDA,\n        \"area\": 0.0,\n        \"widthM\": item.EN,\n        \"heightM\": item.YUKSEKLIK,\n        \"depthM\": 0.0,\n        \"weightKg\": item.NETAGIRLIK,\n        \"volumeM3\": 0.0,\n        \"labels\": [\n            {\n                \"labelCode\": \"\",\n                \"designFilePath\": \"\",\n                \"customerCode\": \"\",\n                \"packType\": \"\"\n            }\n        ]\n    })\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1340,
        "wires": [
            [
                "4dda1622c9781aad"
            ]
        ]
    },
    {
        "id": "15155f40f5b91522",
        "type": "subflow:d296b4008b6072d8",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "",
        "x": 530,
        "y": 1140,
        "wires": [
            [
                "710f012436a1ab22"
            ]
        ]
    },
    {
        "id": "e8585defc8d09159",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTBIRIMesponse",
        "mode": "link",
        "links": [
            "9fa0ab1867412ac8"
        ],
        "x": 855,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9fa0ab1867412ac8",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)INTBLSTBIRIM",
        "links": [
            "e8585defc8d09159"
        ],
        "x": 165,
        "y": 1320,
        "wires": [
            [
                "1343bc142841a4e4"
            ]
        ]
    },
    {
        "id": "83b889e0e475c165",
        "type": "subflow:d296b4008b6072d8",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "",
        "x": 550,
        "y": 1340,
        "wires": [
            [
                "cb3c99cb363b481e"
            ]
        ]
    },
    {
        "id": "2f847f3ed271a069",
        "type": "subflow:e93f97e999fe62ab",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1380,
        "y": 520,
        "wires": [
            [],
            [
                "0bf3e30ba3e4b060"
            ]
        ]
    },
    {
        "id": "4facfe6a2109a10a",
        "type": "switch",
        "z": "17803f695ab8af0d",
        "name": "IsFetchS4INStocks",
        "property": "IsFetchS4INStocks",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 215,
        "y": 140,
        "wires": [
            [
                "71a284d83e5b8267"
            ],
            [
                "222965ddb0e09195"
            ]
        ],
        "l": false
    },
    {
        "id": "607330f60d089b54",
        "type": "function",
        "z": "e93f97e999fe62ab",
        "name": "Return NetsisAllProductType",
        "func": "msg.netsisProductTypsCode = []\nlet items = msg.netsisProductTypes\n \n\nitems.forEach(x => {\n    msg.netsisProductTypsCode.push(x.productTypeCode)\n})\n\n \nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ed791a059d2f5a68",
        "type": "function",
        "z": "e93f97e999fe62ab",
        "name": "Netsis Product Type",
        "func": "msg.netsisProductTypes = [\n    {\n        \"key\": \"MAMUL\",\n        \"productTypeCode\": \"M\",\n        \"productTypeCodeName\": \"Mamul\"\n    },\n    {\n        \"key\": \"YARIMML\",\n        \"productTypeCode\": \"Y\",\n        \"productTypeCodeName\": \"YARI MAMUL\"\n    },\n    {\n        \"key\": \"A\",\n        \"productTypeCode\": \"A\",\n        \"productTypeCodeName\": \"YAN URUN\"\n    },\n    {\n        \"key\": \"R\",\n        \"productTypeCode\": \"R\",\n        \"productTypeCodeName\": \"MAL.MUH.EK\"\n    },\n    {\n        \"key\": \"HAMMADDE\",\n        \"productTypeCode\": \"I\",\n        \"productTypeCodeName\": \"ILK MADDE\"\n    },\n    {   \n        \"key\":\"AMBALAJ\",\n        \"productTypeCode\": \"B\",\n        \"productTypeCodeName\": \"AMBALAJ MALZEME\"\n    },\n    {\n        \"key\": \"T\",\n        \"productTypeCode\": \"T\",\n        \"productTypeCodeName\": \"TICARI MAL\"\n    },\n    {\n        \"key\":\"DIĞER\",\n        \"productTypeCode\": \"D\",\n        \"productTypeCodeName\": \"DIGER\"\n    },\n    {\n        \"key\": \"F\",\n        \"productTypeCode\": \"F\",\n        \"productTypeCodeName\": \"FASONL\"\n    }\n]\n\n \n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "4afa2e6bcf72d66f"
            ]
        ]
    },
    {
        "id": "4afa2e6bcf72d66f",
        "type": "switch",
        "z": "e93f97e999fe62ab",
        "name": "",
        "property": "IncludenetsisProductTypsCode",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "607330f60d089b54"
            ],
            []
        ]
    },
    {
        "id": "b24fdcebb2dcf481",
        "type": "http request",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllPartners",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1010,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "60d262d68fd38bb5",
        "type": "complete",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "scope": [
            "b24fdcebb2dcf481"
        ],
        "uncaught": false,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "2abdc55b072f67ef"
            ]
        ]
    },
    {
        "id": "9fb2c66596909a2c",
        "type": "catch",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "catch errors",
        "scope": [
            "b24fdcebb2dcf481"
        ],
        "uncaught": false,
        "x": 190,
        "y": 220,
        "wires": [
            [
                "4386f9df01967957"
            ]
        ]
    },
    {
        "id": "fa342b1c82311833",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "b24fdcebb2dcf481"
            ]
        ]
    },
    {
        "id": "4386f9df01967957",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "6f3c1458adda9638"
            ],
            [
                "799dac1d4bf83dcb"
            ]
        ]
    },
    {
        "id": "2abdc55b072f67ef",
        "type": "switch",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 330,
        "y": 300,
        "wires": [
            [],
            [
                "18cfd7297ceb0607"
            ],
            [
                "38114d35862ed23e"
            ]
        ]
    },
    {
        "id": "cc380e03303b4af4",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "GetAllSFORINCustomer",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "c171daf381137d01",
        "type": "link out",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)OUT",
        "mode": "link",
        "links": [
            "a26db93e9a990c25"
        ],
        "x": 675,
        "y": 280,
        "wires": []
    },
    {
        "id": "6f3c1458adda9638",
        "type": "subflow:fa51d0694c73d14f",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "fa342b1c82311833"
            ]
        ]
    },
    {
        "id": "d1c7499ec2ea68a6",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "netsiste cari kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1050,
        "y": 440,
        "wires": []
    },
    {
        "id": "61d8f26479170d8b",
        "type": "differences",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "listnetsisCustomerCode",
        "leftInputType": "msg",
        "rightInput": "sforinCustomerCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 740,
        "y": 500,
        "wires": [
            [
                "982a57164fc3bc83"
            ]
        ]
    },
    {
        "id": "842d030b57279da7",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "function 44",
        "func": "msg.netsisCustomers=msg.payload;\nlet listnetsisCustomerCode=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisCustomers.forEach(x => listnetsisCustomerCode.push(x.CARI_KOD))\nmsg.listnetsisCustomerCode = listnetsisCustomerCode;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 500,
        "wires": [
            [
                "61d8f26479170d8b"
            ]
        ],
        "l": false
    },
    {
        "id": "982a57164fc3bc83",
        "type": "change",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unmatchedAccountCodes",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 500,
        "wires": [
            [
                "c1e488d820c2ae1a"
            ]
        ]
    },
    {
        "id": "a26db93e9a990c25",
        "type": "link in",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)In",
        "links": [
            "c171daf381137d01"
        ],
        "x": 125,
        "y": 440,
        "wires": [
            [
                "3a2246370c17d5ae"
            ]
        ]
    },
    {
        "id": "c1e488d820c2ae1a",
        "type": "link out",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)matchingItemsOut",
        "mode": "link",
        "links": [
            "7f0bd2dffc849ab5"
        ],
        "x": 1275,
        "y": 500,
        "wires": []
    },
    {
        "id": "f0c631f9dcd83c72",
        "type": "subflow:d296b4008b6072d8",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "",
        "x": 430,
        "y": 500,
        "wires": [
            [
                "842d030b57279da7"
            ]
        ]
    },
    {
        "id": "799dac1d4bf83dcb",
        "type": "subflow:7cdf28f23984a61d",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
                "type": "str"
            },
            {
                "name": "sourceModule/Flow",
                "value": "GetAllSFORINCustomer",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            }
        ],
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "38114d35862ed23e",
        "type": "subflow:7cdf28f23984a61d",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
                "type": "str"
            },
            {
                "name": "sourceModule/Flow",
                "value": "GetAllSFORINCustomer",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            }
        ],
        "x": 580,
        "y": 340,
        "wires": []
    },
    {
        "id": "3a2246370c17d5ae",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "Netsis Customer json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.getAllSforinCustomer = msg.getAllSforinCustomer || []\n// Create the query dynamically\nlet query = `\n   SELECT  \n    CS.CARI_KOD,\n    dbo.TRK(CARI_ISIM) AS CARI_ISIM,\n    dbo.TRK(CARI_ADRES) AS CARI_ADRES,\n    dbo.TRK(CARI_IL) AS CARI_IL,\n    dbo.TRK(CARI_ILCE) AS CARI_ILCE,\n    dbo.TRK(ULKE_KODU) AS ULKE_KODU,\n    CARI_TIP,\n    COALESCE(VERGI_NUMARASI, CSEK.TCKIMLIKNO) AS VKN_TC,\n    dbo.TRK(VERGI_DAIRESI) AS VERGI_DAIRESI,\n    ISNULL(CS.KAYITTARIHI, FORMAT(GETDATE(), 'yyyy.MM.dd')) AS KAYITTARIHI,\n    CS.CARI_TEL,\n    CASE CS.CARI_TIP\n        WHEN 'S' THEN 'VENDOR'\n        WHEN 'A' THEN 'CUSTOMER'\n    END AS CARI_TIPI\nFROM \n    TBLCASABIT CS\nLEFT JOIN \n    TBLCASABITEK CSEK ON CSEK.CARI_KOD = CS.CARI_KOD\nWHERE  \n    CS.CARI_TIP IN ('S', 'A')  \n    AND ISNULL(CS.C_YEDEK1, 'A') = 'A'\n\tAND CS.SUBE_KODU  IN ('-1', '${branchCode}')       \n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query=query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 500,
        "wires": [
            [
                "f0c631f9dcd83c72"
            ]
        ]
    },
    {
        "id": "18cfd7297ceb0607",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "Customers",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    Id: \"\",\n    Code: \"\",\n    DefinitionLang: \"\",\n    Company: null,\n    Type: \"\",\n    Gln: \"\",\n    Addresses: [\n        {\n            Code: \"\",\n            Name: null,\n            Street: null,\n            No: null,\n            Zip: null,\n            District: null,\n            Town: \"\",\n            City: \"\",\n            Country: \"\",\n            Phone: \"\",\n            Fax: null,\n            Web: null,\n            LatLong: null,\n            Type: null,\n            TimeZone: null,\n            TaxNo: null\n        }\n    ],\n    Dates: {\n        CreatedOn: new Date().toISOString(),\n        UpdatedOn: new Date().toISOString(),\n        LastDeliveryOn: null,\n        LastReceiptOn: null,\n        LastTransferOn: null\n    },\n    Users: {\n        CreatedBy: \"\",\n        UpdatedBy: \"\",\n        NotifyOnDelivery: null,\n        NotifyOnReceipt: null,\n        NotifyOnTransfer: null\n    },\n    PartnerAttributes: [\n        {\n            AttributeCode: \"\",\n            StrValue: null,\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        },\n        {\n            AttributeCode: \"\",\n            StrValue: \"\",\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        }\n    ]\n};\n\nvar listcustomerCode = [];\nvar listcustomer = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(c => {\n        \n        var result = {\n            Id: c._id || defaultValues.Id,\n            Code: c.code || defaultValues.Code,\n            DefinitionLang: c.definitionLang || defaultValues.DefinitionLang,\n            Company: c.company !== undefined ? c.company : defaultValues.Company,\n            Type: c.type || defaultValues.Type,\n            Gln: c.gln || defaultValues.Gln,\n            Addresses: c.addresses && c.addresses.length ? c.addresses : defaultValues.Addresses,\n            Dates: {\n                CreatedOn: c.dates?.createdOn || defaultValues.Dates.CreatedOn,\n                UpdatedOn: c.dates?.updatedOn || defaultValues.Dates.UpdatedOn,\n                LastDeliveryOn: c.dates?.lastDeliveryOn || defaultValues.Dates.LastDeliveryOn,\n                LastReceiptOn: c.dates?.lastReceiptOn || defaultValues.Dates.LastReceiptOn,\n                LastTransferOn: c.dates?.lastTransferOn || defaultValues.Dates.LastTransferOn\n            },\n            Users: {\n                CreatedBy: c.users?.createdBy || defaultValues.Users.CreatedBy,\n                UpdatedBy: c.users?.updatedBy || defaultValues.Users.UpdatedBy,\n                NotifyOnDelivery: c.users?.notifyOnDelivery !== undefined ? c.users.notifyOnDelivery : defaultValues.Users.NotifyOnDelivery,\n                NotifyOnReceipt: c.users?.notifyOnReceipt !== undefined ? c.users.notifyOnReceipt : defaultValues.Users.NotifyOnReceipt,\n                NotifyOnTransfer: c.users?.notifyOnTransfer !== undefined ? c.users.notifyOnTransfer : defaultValues.Users.NotifyOnTransfer\n            },\n            PartnerAttributes: c.partnerAttributes && c.partnerAttributes.length ? c.partnerAttributes : defaultValues.PartnerAttributes\n        };\n\n        listcustomerCode.push(result.Code); // Netsiste olmayan carileri bulmak için tüm stokkodlarını bir arraya alıyorum\n        listcustomer.push(result);\n    });\n}\n\nmsg.getAllSforinCustomer = listcustomer;\nmsg.sforinCustomerCode = listcustomerCode;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 280,
        "wires": [
            [
                "c171daf381137d01"
            ]
        ]
    },
    {
        "id": "eaf2da737977c5fe",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "ConvertJsonSforinPartner",
        "func": "// data ve msg.netsisCustomers dizilerinin varlığını ve formatlarını kontrol ediyor.\n// env.get fonksiyonunun var olup olmadığını kontrol ediyor.\n// netsisData değişkenine değer bulunmazsa varsayılan değerler kullanıyor.\nvar data = msg.unmatchedAccountCodes;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    Id: \"\",\n    Code: \"\",\n    DefinitionLang: \"\",\n    Company: \"metropolun\",\n    Type: \"\",\n    Gln: \"\",\n    Addresses: [\n        {\n            Code: \"\",\n            Name: null,\n            Street: null,\n            No: null,\n            Zip: null,\n            District: null,\n            Town: \"\",\n            City: \"\",\n            Country: \"\",\n            Phone: \"\",\n            Fax: null,\n            Web: null,\n            LatLong: null,\n            Type: null,\n            TimeZone: null,\n            TaxNo: null\n        }\n    ],\n    Dates: {\n        CreatedOn: new Date().toISOString(),\n        UpdatedOn: new Date().toISOString(),\n        LastDeliveryOn: null,\n        LastReceiptOn: null,\n        LastTransferOn: null\n    },\n    Users: {\n        CreatedBy: \"NODE-RED\",\n        UpdatedBy: \"NODE-RED\",\n        NotifyOnDelivery: null,\n        NotifyOnReceipt: null,\n        NotifyOnTransfer: null\n    },\n    PartnerAttributes: [\n        {\n            AttributeCode: \"\",\n            StrValue: null,\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        },\n        {\n            AttributeCode: \"\",\n            StrValue: \"\",\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        }\n    ]\n};\n\n// 'data' objesinin varlığını kontrol et\nif (data && Array.isArray(data)) {\n    const transformedData = data.map(c => {\n        // 'netsisCustomers' tanımlı mı ve bir dizi mi kontrol et\n        const netsisData = msg.netsisCustomers && Array.isArray(msg.netsisCustomers)\n            ? msg.netsisCustomers.find(x => x.CARI_KOD === c)\n            : null;\n\n        return {\n             \n            code: (netsisData && netsisData.CARI_KOD) || defaultValues.Code,\n            definitionLang: (netsisData && netsisData.CARI_ISIM) || defaultValues.DefinitionLang,\n            company: env.get ? env.get(\"companyCode\") : defaultValues.Company, // 'env.get' varsa kullan\n            type: (netsisData && netsisData.CARI_TIPI) || defaultValues.Type,\n            gln: \"\",\n            addresses: [{\n                code: netsisData ? netsisData.CARI_ADRES : defaultValues.Addresses[0].Code,\n                name: null,\n                street: null,\n                no: null,\n                zip: null,\n                district: null,\n                town: netsisData ? netsisData.CARI_ILCE : defaultValues.Addresses[0].Town,\n                city: netsisData ? netsisData.CARI_IL : defaultValues.Addresses[0].City,\n                country: netsisData ? netsisData.ULKE_KODU : defaultValues.Addresses[0].Country,\n                phone: netsisData ? netsisData.CARI_TEL : defaultValues.Addresses[0].Phone,\n                fax: null,\n                web: null,\n                latLong: null,\n                type: null,\n                timeZone: null,\n                taxNo: null\n            }],\n            dates: {\n                createdOn: netsisData ? netsisData.KAYITTARIHI : defaultValues.Dates.CreatedOn,\n                updatedOn: defaultValues.Dates.UpdatedOn,\n                lastDeliveryOn: defaultValues.Dates.LastDeliveryOn,\n                lastReceiptOn: defaultValues.Dates.LastReceiptOn,\n                lastTransferOn: defaultValues.Dates.LastTransferOn\n            },\n            users: {\n                createdBy: defaultValues.Users.CreatedBy,\n                updatedBy: defaultValues.Users.UpdatedBy,\n                notifyOnDelivery: defaultValues.Users.NotifyOnDelivery,\n                notifyOnReceipt: defaultValues.Users.NotifyOnReceipt,\n                notifyOnTransfer: defaultValues.Users.NotifyOnTransfer\n            },\n            notes:  null,\n            partnerAttributes: [\n                {\n                    attributeCode: \"VERGINO\",\n                    strValue: null,\n                    dateValue: null,\n                    numValue: netsisData ? netsisData.VKN_TC : defaultValues.PartnerAttributes[0].NumValue,\n                    listedValue: null,\n                    boolValue: null,\n                    remoteName: \"Vergino\"\n                },\n                {\n                    attributeCode: \"VergiDairesi\",\n                    strValue: netsisData ? netsisData.VERGI_DAIRESI : defaultValues.PartnerAttributes[1].StrValue,\n                    dateValue: null,\n                    numValue: null,\n                    listedValue: null,\n                    boolValue: null,\n                    remoteName: \"VergiDairesi\"\n                }\n            ]\n        };\n    });\n\n    const result ={\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData,\n        current: [\n            {\n                key: \"\",\n                value: \"\"\n            }\n        ]\n    };\n\n    msg.sforinPartner = result;\n    msg.index = 0;\n} else {\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsisCustomers array is missing or not in expected format.\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 780,
        "wires": [
            [
                "4ad06d787ca38a2e",
                "48422de81ff80973"
            ]
        ]
    },
    {
        "id": "460723836a4afab3",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "Index",
        "func": "\n\n// Assign msg.payload to msg.sforinPartner\nmsg.payload = msg.sforinPartner;\n\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.payload.data) && msg.payload.data.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    msg.headers = {\n        Authorization: \"Bearer \" + global.get(\"SforinToken\")\n    };\n\n    msg.SFORIN_URL = env.get(\"SFORIN_URL\");\n    msg.statusCode = null\n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 760,
        "wires": [
            [
                "abec2a942a221806"
            ],
            []
        ]
    },
    {
        "id": "abec2a942a221806",
        "type": "http request",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/PartnerSync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1010,
        "y": 760,
        "wires": [
            [
                "fab2d33027ad7506",
                "c56285e4f753814c"
            ]
        ]
    },
    {
        "id": "fab2d33027ad7506",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "c3d1d8e6d6eb7e40"
            ],
            [
                "b9e08168639edbf6"
            ],
            [
                "9e9918b6b39da872"
            ]
        ]
    },
    {
        "id": "4ad06d787ca38a2e",
        "type": "subflow:fa51d0694c73d14f",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "",
        "x": 560,
        "y": 780,
        "wires": [
            [
                "460723836a4afab3"
            ]
        ]
    },
    {
        "id": "7f0bd2dffc849ab5",
        "type": "link in",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)matchingItemsIn",
        "links": [
            "c1e488d820c2ae1a"
        ],
        "x": 125,
        "y": 760,
        "wires": [
            [
                "eaf2da737977c5fe"
            ]
        ]
    },
    {
        "id": "63cb9e6fbc108652",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "Partner is being shipped",
        "info": "",
        "x": 230,
        "y": 660,
        "wires": []
    },
    {
        "id": "1b04e49cedc832aa",
        "type": "subflow:7cdf28f23984a61d",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1480,
        "y": 740,
        "wires": []
    },
    {
        "id": "c3d1d8e6d6eb7e40",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 700,
        "wires": [
            [
                "1b04e49cedc832aa"
            ]
        ]
    },
    {
        "id": "338ac38608430c69",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1460,
        "y": 660,
        "wires": []
    },
    {
        "id": "9ebc440ff99c3a3c",
        "type": "subflow:7cdf28f23984a61d",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1420,
        "y": 860,
        "wires": []
    },
    {
        "id": "9e9918b6b39da872",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 820,
        "wires": [
            [
                "9ebc440ff99c3a3c"
            ]
        ]
    },
    {
        "id": "8f35cb35014d03db",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "Error işlem log",
        "info": "",
        "x": 1390,
        "y": 780,
        "wires": []
    },
    {
        "id": "0b1060f3984dd8ac",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "devam edilecek",
        "info": "deva",
        "x": 280,
        "y": 820,
        "wires": []
    },
    {
        "id": "bf2dac925cc58e4d",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "",
        "info": "Dizi bulunamaz ise data  cıkıış 2 den cık",
        "x": 760,
        "y": 820,
        "wires": []
    },
    {
        "id": "087b5529bb1658bd",
        "type": "switch",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "property": "IsFetchS4INPartner",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "6f3c1458adda9638"
            ],
            [
                "3a2246370c17d5ae"
            ]
        ]
    },
    {
        "id": "48422de81ff80973",
        "type": "debug",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "debug 87",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 700,
        "wires": []
    },
    {
        "id": "c56285e4f753814c",
        "type": "debug",
        "z": "3179678ca8b98244",
        "g": "683105b12f49c30e",
        "name": "debug 88",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 720,
        "wires": []
    },
    {
        "id": "f123bd878033b75f",
        "type": "switch",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "b403d6960b2e14d4"
            ]
        ]
    },
    {
        "id": "1b80e0035299eb7a",
        "type": "function",
        "z": "a464cb4f18f8f1f5",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "100af4324002a45f"
            ]
        ]
    },
    {
        "id": "100af4324002a45f",
        "type": "cronplus",
        "z": "a464cb4f18f8f1f5",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "f95a1da5a7a14982"
            ]
        ]
    },
    {
        "id": "f95a1da5a7a14982",
        "type": "function",
        "z": "a464cb4f18f8f1f5",
        "name": "function 45",
        "func": "let propIntegration=msg.payload;\n \n\nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 815,
        "y": 100,
        "wires": [
            [
                "b3661310f2bcd661"
            ]
        ],
        "l": false
    },
    {
        "id": "b3661310f2bcd661",
        "type": "switch",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 885,
        "y": 100,
        "wires": [
            [
                "6a0784553551885e"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "6a0784553551885e",
        "type": "subflow:bb656f77f61addff",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "7ad9128488b7ec67"
            ]
        ]
    },
    {
        "id": "7ad9128488b7ec67",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 180,
        "wires": [
            [
                "2fb371c280cd3dd0"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "dde8eb53fa4281ad",
        "type": "subflow:bb656f77f61addff",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "ce28ed41b247fece"
            ]
        ]
    },
    {
        "id": "ce28ed41b247fece",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1180,
        "y": 380,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "2fb371c280cd3dd0",
        "type": "subflow:3179678ca8b98244",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "IsFetchS4INPartner",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1130,
        "y": 240,
        "wires": [
            [
                "dde8eb53fa4281ad"
            ],
            [
                "dde8eb53fa4281ad"
            ]
        ]
    },
    {
        "id": "b403d6960b2e14d4",
        "type": "switch",
        "z": "a464cb4f18f8f1f5",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "1b80e0035299eb7a"
            ],
            [
                "6bee861dcdd67386"
            ]
        ]
    },
    {
        "id": "6bee861dcdd67386",
        "type": "function",
        "z": "a464cb4f18f8f1f5",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "f95a1da5a7a14982"
            ]
        ]
    },
    {
        "id": "15eb7783fe448944",
        "type": "switch",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "2cf7716e1b25a06f"
            ]
        ]
    },
    {
        "id": "cb5ff30add02d2dd",
        "type": "function",
        "z": "b9701e9ae1caaffd",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "b315cea18713b41d"
            ]
        ]
    },
    {
        "id": "b315cea18713b41d",
        "type": "cronplus",
        "z": "b9701e9ae1caaffd",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "c056f28f207c2b04"
            ]
        ]
    },
    {
        "id": "c056f28f207c2b04",
        "type": "function",
        "z": "b9701e9ae1caaffd",
        "name": "function 46",
        "func": "let propIntegration=msg.payload;\n\n\n\nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 80,
        "wires": [
            [
                "f55ceedb9839ae82"
            ]
        ],
        "l": false
    },
    {
        "id": "f55ceedb9839ae82",
        "type": "switch",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 865,
        "y": 80,
        "wires": [
            [
                "902d8aeafde902db"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "902d8aeafde902db",
        "type": "subflow:bb656f77f61addff",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "273f86b9b445d48a"
            ]
        ]
    },
    {
        "id": "273f86b9b445d48a",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1120,
        "y": 160,
        "wires": [
            [
                "7ae8e30ff01d6a80"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "cfa896092e723aaf",
        "type": "subflow:bb656f77f61addff",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "23fcab0d6f6dea2e"
            ]
        ]
    },
    {
        "id": "23fcab0d6f6dea2e",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1160,
        "y": 360,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7ae8e30ff01d6a80",
        "type": "subflow:5b2ae23bfd497a94",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "x": 960,
        "y": 220,
        "wires": [
            [
                "25d5711acb4bcc84"
            ]
        ]
    },
    {
        "id": "25d5711acb4bcc84",
        "type": "subflow:17803f695ab8af0d",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "IsFetchS4INStocks",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1430,
        "y": 220,
        "wires": [
            [
                "cfa896092e723aaf"
            ]
        ]
    },
    {
        "id": "2cf7716e1b25a06f",
        "type": "switch",
        "z": "b9701e9ae1caaffd",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 140,
        "wires": [
            [
                "cb5ff30add02d2dd"
            ],
            [
                "d50821e18ef1ff96"
            ]
        ]
    },
    {
        "id": "d50821e18ef1ff96",
        "type": "function",
        "z": "b9701e9ae1caaffd",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "649633e811ec78e5"
            ]
        ]
    },
    {
        "id": "30772c7a218b9544",
        "type": "http request",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "Get BuyerAndSellerOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllDocuments",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1090,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d675a9b6680e6bef",
        "type": "complete",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "",
        "scope": [
            "30772c7a218b9544"
        ],
        "uncaught": false,
        "x": 230,
        "y": 320,
        "wires": [
            [
                "140b08892f9d7d47"
            ]
        ]
    },
    {
        "id": "a5e2e91b845d2064",
        "type": "catch",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "catch errors",
        "scope": [
            "30772c7a218b9544"
        ],
        "uncaught": false,
        "x": 230,
        "y": 240,
        "wires": [
            [
                "bd7d0b9d21df7ed5"
            ]
        ]
    },
    {
        "id": "4d04ba72d55fd3c3",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 140,
        "wires": [
            [
                "30772c7a218b9544"
            ]
        ]
    },
    {
        "id": "bd7d0b9d21df7ed5",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "retry logic",
        "func": "msg.retries || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 240,
        "wires": [
            [
                "bd7d0e62813ab7df"
            ],
            [
                "d4fbe12ee7adc6f3"
            ]
        ]
    },
    {
        "id": "d4fbe12ee7adc6f3",
        "type": "debug",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 240,
        "wires": []
    },
    {
        "id": "eee6f7bd51d4dd1d",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "BuyerAndSellerOrder",
        "func": "// Get the JSON data\nvar buyerAndSellerOrderPayload = msg.payload.data;\n\nvar buyerAndSellerOrderDocNumber = [];\n\n// Loop through each item and push 'docNum' into buyerAndSellerOrderDocNumber array\nbuyerAndSellerOrderPayload.forEach(x => {\n        buyerAndSellerOrderDocNumber.push(x.docNum); // Collect all order numbers to compare with Netsis\n});\n\n// Assign the array to a new property in msg\nmsg.buyerAndSellerOrderDocNumber = buyerAndSellerOrderDocNumber;\nmsg.buyerAndSellerOrderPayload = buyerAndSellerOrderPayload;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 300,
        "wires": [
            [
                "bb19590bab6bf786"
            ]
        ]
    },
    {
        "id": "140b08892f9d7d47",
        "type": "switch",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 320,
        "wires": [
            [
                "bd7d0e62813ab7df"
            ],
            [
                "eee6f7bd51d4dd1d"
            ],
            [
                "bef47be5ebc9683b"
            ]
        ]
    },
    {
        "id": "bef47be5ebc9683b",
        "type": "debug",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 360,
        "wires": []
    },
    {
        "id": "0a0b1710a50ca970",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "GetAllSFORINOrderInvoice",
        "info": "",
        "x": 280,
        "y": 80,
        "wires": []
    },
    {
        "id": "bb19590bab6bf786",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "b8d8a2600d07733f"
        ],
        "x": 765,
        "y": 300,
        "wires": []
    },
    {
        "id": "bd7d0e62813ab7df",
        "type": "subflow:fa51d0694c73d14f",
        "z": "bf7e6ed2256e3a44",
        "g": "1242987d19abfe4b",
        "name": "",
        "x": 500,
        "y": 140,
        "wires": [
            [
                "4d04ba72d55fd3c3"
            ]
        ]
    },
    {
        "id": "9578b0d362f0bc8b",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "function 47",
        "func": "msg.netsisOrderPayload=msg.payload;\nlet data = msg.payload;\nlet result = {};\n// Initialize an empty array to store unique docNum values\nlet listnetsisOrderDocNum = [];\n\n// Use Set to filter unique docNum values\nlistnetsisOrderDocNum = [...new Set(msg.netsisOrderPayload.map(item => item.docNum))];\n\n// Output the unique docNum list\nmsg.listnetsisOrderDocNum = listnetsisOrderDocNum;\n\n\n// `docNum` ile gruplama yapıyoruz\ndata.forEach(item => {\n    let docNum = item.docNum;\n\n    // Eğer `docNum` zaten varsa, öğeyi mevcut objeye ekliyoruz\n    if (result[docNum]) {\n        result[docNum].items.push({\n            itemNo: item.itemNo,\n            productCode: item.productCode,\n            quantity: item.quantity,\n            unit: item.unit,\n            getWarehouseLocationCode: item.GetWarehouseLocation,\n            definitionLang: item.DefinitionLang\n        });\n    } else {\n        // Eğer yoksa, yeni bir obje oluşturup ekliyoruz\n        result[docNum] = {\n            docNum: docNum,\n            company: item.company,\n            documantTypeCode: item.documantTypeCode,\n            createdOn: item.createdOn,\n            deliveryDate: item.deliveryDate,\n            customerCode: item.CUSTOMERCODE,      \n            items: [{\n                itemNo: item.itemNo,\n                productCode: item.productCode,\n                quantity: item.quantity,\n                unit: item.unit,\n                getWarehouseLocationCode: item.GetWarehouseLocation,\n                definitionLang: item.DefinitionLang\n            }]\n        };\n    }\n});\n// Sonucu array formatına dönüştürüyoruz\nmsg.netsisOrderPayload_ = Object.values(result);\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605,
        "y": 900,
        "wires": [
            [
                "58392219b3f9c2aa"
            ]
        ],
        "l": false
    },
    {
        "id": "a209aa097313b145",
        "type": "subflow:d296b4008b6072d8",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "x": 490,
        "y": 960,
        "wires": [
            [
                "9578b0d362f0bc8b"
            ]
        ]
    },
    {
        "id": "6f00d978c94db6cf",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "BuyerAndSellerOrder",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n WITH STBIRIM AS\n  (SELECT ROW_NUMBER() OVER(PARTITION BY KOD\n                            ORDER BY INCKEYNO ASC)+3 SIRA,\n                       KOD,\n                       OLCUBIRIMI,\n                       PAY,\n                       PAYDA\n   FROM TBLSTBIRIM)\nSELECT FISNO AS docNum,\n       DB_NAME() AS company,\n       CASE SPMAS.FTIRSIP\n           WHEN 6 THEN 'MS'\n           WHEN 7 THEN 'SS'\n       END documantTypeCode,\n       SPMAS.TARIH createdOn,\n       SPMAS.SIPARIS_TEST deliveryDate,\n       SPTRA.SIRA itemNo,\n       dbo.TRK(SPTRA.STOK_KODU) productCode, --SPTRA.STHAR_GCMIK-FIRMA_DOVTUT AS quantity ,\n CASE ISNULL(SPTRA.OLCUBR,1)\n     WHEN 1 THEN SPTRA.STHAR_GCMIK-FIRMA_DOVTUT\n     ELSE (STHAR_GCMIK-FIRMA_DOVTUT)*CEVRIM\n END AS quantity,\n CASE ISNULL(SPTRA.OLCUBR,1)\n     WHEN 1 THEN ST.OLCU_BR1\n     WHEN 2 THEN ST.OLCU_BR2\n     WHEN 3 THEN ST.OLCU_BR3\n     WHEN 4 THEN BRM.OLCUBIRIMI\n     WHEN 5 THEN BRM.OLCUBIRIMI\n END AS unit,\n  SPMAS.CARI_KODU AS CUSTOMERCODE,\n    SPTRA.DEPO_KODU as GetWarehouseLocation,\n    SPTRA.DEPO_KODU as GetWarehouseLocation,\n    CASE SPTRA.EKALAN_NEDEN WHEN 1 THEN dbo.TRK(EKALAN)\n   ELSE dbo.TRK(ST.STOK_ADI) END  AS DefinitionLang\nFROM TBLSIPAMAS SPMAS\nLEFT JOIN TBLSIPATRA SPTRA ON SPMAS.FATIRS_NO = SPTRA.FISNO\nLEFT JOIN TBLSTSABIT ST ON ST.STOK_KODU=SPTRA.STOK_KODU\nLEFT JOIN STBIRIM BRM ON BRM.KOD=SPTRA.STOK_KODU\nAND ISNULL(SPTRA.OLCUBR,1)=BRM.SIRA\nWHERE SPMAS.KAPATILMIS <>'K'\n  AND SPTRA.STHAR_GCMIK-FIRMA_DOVTUT<>0\n  AND SPTRA.STHAR_HTUR<>'K'\n  AND SPMAS.SUBE_KODU IN  ('-1', '${branchCode}')     \n`;\n\n \nmsg.query=query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 960,
        "wires": [
            [
                "a209aa097313b145"
            ]
        ]
    },
    {
        "id": "4958f6ff314c62cc",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "Check",
        "func": "\n\n// Assign msg.payload to msg.netsis2s4inBuyerAndSellerOrder\nmsg.payload = msg.netsis2s4inBuyerAndSellerOrder;\n\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.payload.data) && msg.payload.data.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n     \n    msg.SFORIN_URL = env.get(\"SFORIN_URL\");\n    msg.statusCode = null\n    msg.headers = {\n        Authorization: \"Bearer \" + global.get(\"SforinToken\")\n    };\n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 960,
        "wires": [
            [
                "99b73c425bb36448"
            ],
            []
        ]
    },
    {
        "id": "99b73c425bb36448",
        "type": "http request",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/DocumentSync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1230,
        "y": 960,
        "wires": [
            [
                "1bec2230dc02f447"
            ]
        ]
    },
    {
        "id": "f462afdfca79c0cd",
        "type": "subflow:fa51d0694c73d14f",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "x": 880,
        "y": 960,
        "wires": [
            [
                "4958f6ff314c62cc"
            ]
        ]
    },
    {
        "id": "42f01e2ec49a4485",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "JSON",
        "func": "const documentData = {\n    docNum: \"\",\n    state: {\n        State: \"ACT\",\n        ProcessingState: \"WAI\",\n        SyncState: \"WAI\"\n    },\n    externalNum: \"\",\n    company: \"\",\n    documentType: {\n        Code: \"\",\n        Definition: \"\",\n        CounterCode: \"\",\n        Direction: \"\",\n        IsTwoStep: null,\n        Id: \"\"\n    },\n    documentDate: {\n        CreatedOn: null,\n        UpdatedOn: null,\n        LastMovedOn: null,\n        LastReceiptOn: null,\n        LastSyncedOn: null,\n        DocDate: null,\n        PlanedDate: null,\n        DeliveryDate: null\n    },\n    docCompanies: {\n        SoldTo: null,\n        BoughtFrom: \"\",\n        Transit: null,\n        ShipTo: null\n    },\n    documentAttributes: [],\n    documentUser: {\n        CreatedBy: \"node-red\",\n        UpdatedBy: null\n    },\n    childDocuments: null,\n    parentDocument: null,\n    documentStorageLocations: {\n        PickFrom: [],\n        PutawayTo: [],\n        IsObligatory: true\n    },\n    documentFiles: [],\n    items: [\n        {\n            ItemNo: null,\n            DocNum: \"\",\n            ProductCode: \"\",\n            Quantity: null,\n            Unit: \"\",\n            BaseQuantity: null,\n            BaseUnit: null,\n            state: {\n                State: \"ACT\",\n                ProcessingState: \"WAI\",\n                SyncState: \"WAI\"\n            },\n            reference: {\n                ErpOrder: \"\",\n                ErpOrderItemNum: \"\"\n            },\n            itemBatch: [],\n            itemSerials: [],\n            itemTolerance: {\n                PercentagePlus: 0,\n                PercentageMinus: 0,\n                QuantityPlus: 0,\n                QuantityMinus: 0,\n                Unit: 0\n            },\n            documentFiles: [],\n            documentItemAttributes: [],\n            description: {\n                DefinitionLang: \"\",\n                ShortenedDefinitionLang: \"\",\n                LongDescriptionLang: \"\"\n            },\n            documentStorageLocations: {\n                PickFrom: [],\n                PutawayTo: [],\n                IsObligatory: true\n            },\n            notes: [],\n            Id: \"\"\n        }\n    ],\n    notes: null,\n    Id: \"\"\n};\n\n// Utility function to get a value or default from template\nconst getValueOrDefault = (value, defaultValue) => value !== null && value !== undefined ? value : defaultValue;\n\nlet data = msg.netsisOrderPayload_;\n \nif (data && Array.isArray(data)) {\n    const transformedData = data.map(order => {\n      \n        return {\n            docNum: getValueOrDefault(order.docNum, documentData.docNum),\n            state: {\n                State: getValueOrDefault(null, documentData.state.State),\n                ProcessingState: getValueOrDefault(null, documentData.state.ProcessingState),\n                SyncState: getValueOrDefault(null, documentData.state.SyncState)\n            },\n            externalNum: getValueOrDefault(order.docNum, documentData.externalNum),\n            company: getValueOrDefault(order.company, documentData.company),\n            documentType: msg.getAllDocumentTypesrPayload && Array.isArray(msg.getAllDocumentTypesrPayload)\n                ? msg.getAllDocumentTypesrPayload.find(doctype => doctype.code == order.documantTypeCode)\n                : {},\n            documentDate: {\n                CreatedOn: getValueOrDefault(order.createdOn, documentData.documentDate.CreatedOn),\n                UpdatedOn: getValueOrDefault(null, documentData.documentDate.UpdatedOn),\n                LastMovedOn: getValueOrDefault(null, documentData.documentDate.LastMovedOn),\n                LastReceiptOn: getValueOrDefault(null, documentData.documentDate.LastReceiptOn),\n                LastSyncedOn: getValueOrDefault(null, documentData.documentDate.LastSyncedOn),\n                DocDate: getValueOrDefault(order.createdOn, documentData.documentDate.DocDate),\n                PlanedDate: getValueOrDefault(order.deliveryDate, documentData.documentDate.PlanedDate),\n                DeliveryDate: getValueOrDefault(order.deliveryDate, documentData.documentDate.DeliveryDate)\n            },\n            docCompanies: {\n                SoldTo: getValueOrDefault(null, documentData.docCompanies.SoldTo),\n                BoughtFrom: getValueOrDefault(order.customerCode, documentData.docCompanies.BoughtFrom),\n                Transit: getValueOrDefault(null, documentData.docCompanies.Transit),\n                ShipTo: getValueOrDefault(null, documentData.docCompanies.ShipTo)\n            },\n            documentAttributes: getValueOrDefault(null, documentData.documentAttributes),\n            documentUser: {\n                CreatedBy: getValueOrDefault(null, documentData.documentUser.CreatedBy),\n                UpdatedBy: getValueOrDefault(null, documentData.documentUser.UpdatedBy)\n            },\n            childDocuments: getValueOrDefault(null, documentData.childDocuments),\n            parentDocument: getValueOrDefault(null, documentData.parentDocument),\n            documentStorageLocations: {\n                PickFrom: getValueOrDefault(null, documentData.documentStorageLocations.PickFrom),\n                PutawayTo: getValueOrDefault(null, documentData.documentStorageLocations.PutawayTo),\n                IsObligatory: getValueOrDefault(null, documentData.documentStorageLocations.IsObligatory)\n            },\n            documentFiles: getValueOrDefault(null, documentData.documentFiles),\n            items: order.items ? order.items.map(item => ({\n                ItemNo: getValueOrDefault(item.itemNo, documentData.items[0].ItemNo),\n                DocNum: getValueOrDefault(order.docNum, documentData.docNum),\n                ProductCode: getValueOrDefault(item.productCode, documentData.items[0].ProductCode),\n                Quantity: getValueOrDefault(item.quantity, documentData.items[0].Quantity),\n                Unit: getValueOrDefault(item.unit, documentData.items[0].Unit),\n                BaseQuantity: getValueOrDefault(null, documentData.items[0].BaseQuantity),\n                BaseUnit: getValueOrDefault(null, documentData.items[0].BaseUnit),\n                state: {\n                    State: getValueOrDefault(null, documentData.items[0].state.State),\n                    ProcessingState: getValueOrDefault(null, documentData.items[0].state.ProcessingState),\n                    SyncState: getValueOrDefault(null, documentData.items[0].state.SyncState)\n                },\n                reference: {\n                    ErpOrder: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrder),\n                    ErpOrderItemNum: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrderItemNum)\n                },\n                itemBatch: getValueOrDefault(null, documentData.items[0].itemBatch),\n                itemSerials: getValueOrDefault(null, documentData.items[0].itemSerials),\n                itemTolerance: {\n                    PercentagePlus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentagePlus),\n                    PercentageMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentageMinus),\n                    QuantityPlus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityPlus),\n                    QuantityMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityMinus),\n                    Unit: getValueOrDefault(null, documentData.items[0].itemTolerance.Unit)\n                },\n                documentFiles: getValueOrDefault(null, documentData.items[0].documentFiles),\n                documentItemAttributes: getValueOrDefault(null, documentData.items[0].documentItemAttributes),\n                description: {\n                    DefinitionLang: getValueOrDefault(item.definitionLang, documentData.items[0].description.DefinitionLang),\n                    ShortenedDefinitionLang: getValueOrDefault(null, documentData.items[0].description.ShortenedDefinitionLang),\n                    LongDescriptionLang: getValueOrDefault(null, documentData.items[0].description.LongDescriptionLang)\n                },\n                documentStorageLocations: {\n                    PickFrom: getValueOrDefault(null, documentData.items[0].documentStorageLocations.PickFrom),\n                    PutawayTo: msg.getWarehouseLocationsPayload.find(x => x.code == item.getWarehouseLocationCode)?._id\n                        ? [msg.getWarehouseLocationsPayload.find(x => x.code == item.getWarehouseLocationCode)._id]\n                        : [],\n                    IsObligatory: getValueOrDefault(null, documentData.items[0].documentStorageLocations.IsObligatory)\n                },\n                notes: getValueOrDefault(null, documentData.items[0].notes),\n                \n            })) : [],\n            notes: getValueOrDefault(null, documentData.notes),\n           \n        };\n    });\n\n    const result = {\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData,\n        current: [\n            {\n                key: \"\",\n                value: \"\"\n            }\n        ]\n    };\n\n    msg.netsis2s4inBuyerAndSellerOrder = result;\n   \n} else {\n    node.warn(\"1111\");\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsis2s4inBuyerAndSellerOrder array is missing or not in expected format.\";\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 960,
        "wires": [
            [
                "f462afdfca79c0cd"
            ]
        ]
    },
    {
        "id": "b8d8a2600d07733f",
        "type": "link in",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)IN",
        "links": [
            "bb19590bab6bf786",
            "326b7025dfe0b336"
        ],
        "x": 165,
        "y": 900,
        "wires": [
            [
                "6f00d978c94db6cf"
            ]
        ]
    },
    {
        "id": "b096bb71a3c95d9d",
        "type": "http request",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "Get BuyerAndSellerOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllDocumentTypes",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1090,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "10bedebbf4e112b5",
        "type": "complete",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "",
        "scope": [
            "b096bb71a3c95d9d"
        ],
        "uncaught": false,
        "x": 230,
        "y": 720,
        "wires": [
            [
                "ecdf9c87812b0bc9"
            ]
        ]
    },
    {
        "id": "52791c5ca8a0080a",
        "type": "catch",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "catch errors",
        "scope": [
            "b096bb71a3c95d9d"
        ],
        "uncaught": false,
        "x": 230,
        "y": 640,
        "wires": [
            [
                "b5f00e0e207bbb16"
            ]
        ]
    },
    {
        "id": "12bf127cb2cf5cec",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 540,
        "wires": [
            [
                "b096bb71a3c95d9d"
            ]
        ]
    },
    {
        "id": "b5f00e0e207bbb16",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "retry logic",
        "func": "msg.retries || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 640,
        "wires": [
            [
                "7c50f1ea4224f5dc"
            ],
            [
                "dba4e8a2225245bc"
            ]
        ]
    },
    {
        "id": "7924c40ccd5e027d",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "GetAllDocumentTypes",
        "func": "\n\nmsg.getAllDocumentTypesrPayload = msg.payload.data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 760,
        "wires": [
            [
                "326b7025dfe0b336"
            ]
        ]
    },
    {
        "id": "ecdf9c87812b0bc9",
        "type": "switch",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 720,
        "wires": [
            [
                "7c50f1ea4224f5dc"
            ],
            [
                "7924c40ccd5e027d"
            ],
            [
                "dba4e8a2225245bc"
            ]
        ]
    },
    {
        "id": "5d657f0f443bca62",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "GetAllSFORINGetAllDocumentTypes",
        "info": "",
        "x": 300,
        "y": 480,
        "wires": []
    },
    {
        "id": "326b7025dfe0b336",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "b8d8a2600d07733f"
        ],
        "x": 745,
        "y": 760,
        "wires": []
    },
    {
        "id": "7c50f1ea4224f5dc",
        "type": "subflow:fa51d0694c73d14f",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "",
        "x": 500,
        "y": 540,
        "wires": [
            [
                "12bf127cb2cf5cec"
            ]
        ]
    },
    {
        "id": "76d109d28fcfdf66",
        "type": "subflow:7cdf28f23984a61d",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 980,
        "y": 740,
        "wires": []
    },
    {
        "id": "dba4e8a2225245bc",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 700,
        "wires": [
            [
                "76d109d28fcfdf66"
            ]
        ]
    },
    {
        "id": "1bec2230dc02f447",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n   \n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 960,
        "wires": [
            [
                "654144ca271cdc68"
            ],
            [
                "0f8da2a3854bd4a6"
            ],
            [
                "72ac58da9d503711"
            ]
        ]
    },
    {
        "id": "d0c104ede4c5627f",
        "type": "subflow:7cdf28f23984a61d",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1720,
        "y": 960,
        "wires": []
    },
    {
        "id": "654144ca271cdc68",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 920,
        "wires": [
            [
                "d0c104ede4c5627f"
            ]
        ]
    },
    {
        "id": "0e78bff0e53efa44",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1700,
        "y": 880,
        "wires": []
    },
    {
        "id": "eb7f34cf3e822144",
        "type": "subflow:7cdf28f23984a61d",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1660,
        "y": 1080,
        "wires": []
    },
    {
        "id": "72ac58da9d503711",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 1040,
        "wires": [
            [
                "eb7f34cf3e822144"
            ]
        ]
    },
    {
        "id": "2006e578b221a865",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "Error işlem log",
        "info": "",
        "x": 1610,
        "y": 1000,
        "wires": []
    },
    {
        "id": "a3b0ee45a215571e",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "function 48",
        "func": "msg.retrie || 0\nmsg.errorMesaj = \"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg, null];\n} else {\n\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 880,
        "wires": [
            [
                "2d0d9fb1ae93f48a"
            ],
            [
                "72ac58da9d503711"
            ]
        ]
    },
    {
        "id": "3049a7107f25c59d",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "olcubrm 0 olanlar kontrol edilecek",
        "info": "olcubrm 0 olanlar kontrol edilecek",
        "x": 350,
        "y": 920,
        "wires": []
    },
    {
        "id": "0763c8735243e42b",
        "type": "http request",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "Get BuyerAndSellerOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetWarehouseLocations",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1070,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "79669afa9d392d90",
        "type": "complete",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "",
        "scope": [
            "0763c8735243e42b"
        ],
        "uncaught": false,
        "x": 210,
        "y": 1460,
        "wires": [
            [
                "48b7d6fea57de9d5"
            ]
        ]
    },
    {
        "id": "fdac71a5902687fe",
        "type": "catch",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "catch errors",
        "scope": [
            "0763c8735243e42b"
        ],
        "uncaught": false,
        "x": 210,
        "y": 1380,
        "wires": [
            [
                "9992175cf38c7f2a"
            ]
        ]
    },
    {
        "id": "dc1349e1d6cd6744",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1280,
        "wires": [
            [
                "0763c8735243e42b"
            ]
        ]
    },
    {
        "id": "9992175cf38c7f2a",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "retry logic",
        "func": "msg.retries || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1380,
        "wires": [
            [
                "460d11bbbad7f31a"
            ],
            [
                "51d5544ae0849495"
            ]
        ]
    },
    {
        "id": "fe7f1fd6938b9b86",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "GetWarehouseLocations",
        "func": "// Get the JSON data\nmsg.getWarehouseLocationsPayload = msg.payload.data;\n\n\n\nreturn msg;\n\n\n \n \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1440,
        "wires": [
            [
                "c08a4b7860d81ea4"
            ]
        ]
    },
    {
        "id": "48b7d6fea57de9d5",
        "type": "switch",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 1460,
        "wires": [
            [
                "460d11bbbad7f31a"
            ],
            [
                "fe7f1fd6938b9b86"
            ],
            [
                "51d5544ae0849495"
            ]
        ]
    },
    {
        "id": "2e4ad7cfa8663c77",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "GetAllSFORINGetWarehouseLocations",
        "info": "",
        "x": 290,
        "y": 1220,
        "wires": []
    },
    {
        "id": "460d11bbbad7f31a",
        "type": "subflow:fa51d0694c73d14f",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "",
        "x": 480,
        "y": 1280,
        "wires": [
            [
                "dc1349e1d6cd6744"
            ]
        ]
    },
    {
        "id": "51d5544ae0849495",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1380,
        "wires": [
            [
                "45f1e2111ef4d70d"
            ]
        ]
    },
    {
        "id": "45f1e2111ef4d70d",
        "type": "subflow:7cdf28f23984a61d",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "GetAllSFORINGetWarehouseLocations",
                "type": "str"
            },
            {
                "name": "sourceModule/Flow",
                "value": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 1380,
        "wires": []
    },
    {
        "id": "58392219b3f9c2aa",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0 Out_GetwareHouse",
        "mode": "link",
        "links": [
            "6b1db2938b49fc97"
        ],
        "x": 645,
        "y": 900,
        "wires": []
    },
    {
        "id": "6b1db2938b49fc97",
        "type": "link in",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0 In_GetwareHouse",
        "links": [
            "58392219b3f9c2aa"
        ],
        "x": 205,
        "y": 1280,
        "wires": [
            [
                "460d11bbbad7f31a"
            ]
        ]
    },
    {
        "id": "c08a4b7860d81ea4",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "g": "8f53555fb01c63d0",
        "name": "ResultGetWarehouseLocationsOut",
        "mode": "link",
        "links": [
            "f1ac5c0632527d2c"
        ],
        "x": 775,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f1ac5c0632527d2c",
        "type": "link in",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "ResultGetWarehouseLocationsIn",
        "links": [
            "c08a4b7860d81ea4"
        ],
        "x": 585,
        "y": 1000,
        "wires": [
            [
                "42f01e2ec49a4485"
            ]
        ]
    },
    {
        "id": "d64bb0ce43f56b78",
        "type": "switch",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 160,
        "wires": [
            [
                "53f19905e5016960"
            ]
        ]
    },
    {
        "id": "7243bc819eefb089",
        "type": "function",
        "z": "f62922f2ea3dfbe6",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "55f93553634c4633"
            ]
        ]
    },
    {
        "id": "55f93553634c4633",
        "type": "cronplus",
        "z": "f62922f2ea3dfbe6",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "cbc46b3a636fc32b"
            ]
        ]
    },
    {
        "id": "cbc46b3a636fc32b",
        "type": "function",
        "z": "f62922f2ea3dfbe6",
        "name": "function 49",
        "func": "let propIntegration=msg.payload;\n \n\nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 120,
        "wires": [
            [
                "5fd47f67e0d4c1c4"
            ]
        ],
        "l": false
    },
    {
        "id": "5fd47f67e0d4c1c4",
        "type": "switch",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 945,
        "y": 120,
        "wires": [
            [
                "bad816a008a51f7f"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "bad816a008a51f7f",
        "type": "subflow:bb656f77f61addff",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "2fb20ebccfff0950"
            ]
        ]
    },
    {
        "id": "2fb20ebccfff0950",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1200,
        "y": 200,
        "wires": [
            [
                "76a9a062cb075745"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "1ccbfd52b75b7c7f",
        "type": "subflow:bb656f77f61addff",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "b742b94d7c798c1b"
            ]
        ]
    },
    {
        "id": "b742b94d7c798c1b",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 400,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "76a9a062cb075745",
        "type": "subflow:bf7e6ed2256e3a44",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "1ccbfd52b75b7c7f"
            ],
            [
                "1ccbfd52b75b7c7f"
            ]
        ]
    },
    {
        "id": "53f19905e5016960",
        "type": "switch",
        "z": "f62922f2ea3dfbe6",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "7243bc819eefb089"
            ],
            [
                "e8a6bab622d45dd9"
            ]
        ]
    },
    {
        "id": "e8a6bab622d45dd9",
        "type": "function",
        "z": "f62922f2ea3dfbe6",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "cbc46b3a636fc32b"
            ]
        ]
    },
    {
        "id": "73a39c4d26d953f7",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "706f23c6f30383df",
        "name": "",
        "url": "SFORIN2Netsis_InsertStock_MSSQL_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 100,
        "wires": [
            [
                "3b4d93c16d3a5168"
            ]
        ]
    },
    {
        "id": "0a9d0c09e5e66bfc",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "706f23c6f30383df",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1000,
        "y": 100,
        "wires": []
    },
    {
        "id": "800f172a148debe2",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "706f23c6f30383df",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Aktarım başarılı.\",\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 100,
        "wires": [
            [
                "0a9d0c09e5e66bfc"
            ]
        ]
    },
    {
        "id": "1dd8035c60ce989d",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "706f23c6f30383df",
        "name": "SFORIN to Netsis Stock Card(MSSQL)",
        "info": "",
        "x": 250,
        "y": 60,
        "wires": []
    },
    {
        "id": "66ea17c08b9dbd90",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "12c2f3079075e98b",
        "name": "",
        "url": "SFORIN2Netsis_InsertStock_Rest_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 280,
        "wires": [
            [
                "6ad448f9a70ec0ae"
            ]
        ]
    },
    {
        "id": "aa2a44f844bd5722",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "12c2f3079075e98b",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1120,
        "y": 280,
        "wires": []
    },
    {
        "id": "f6f0cf50a4a358aa",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "12c2f3079075e98b",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Aktarım başarılı.\",\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 280,
        "wires": [
            [
                "aa2a44f844bd5722"
            ]
        ]
    },
    {
        "id": "8ee80d8e6fb9b7dc",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "12c2f3079075e98b",
        "name": "SFORIN to Netsis Stock Card(Rest)",
        "info": "",
        "x": 240,
        "y": 240,
        "wires": []
    },
    {
        "id": "316b5a0a239a2c20",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "fb7c7f527c78e092",
        "name": "",
        "url": "Netsis2SFORIN_InsertStock_Rest_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 270,
        "y": 460,
        "wires": [
            [
                "d928709505e723b9"
            ]
        ]
    },
    {
        "id": "6511671270bb981d",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "fb7c7f527c78e092",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1120,
        "y": 460,
        "wires": []
    },
    {
        "id": "b59e709b49ffbc58",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "fb7c7f527c78e092",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Aktarım başarılı.\",\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 460,
        "wires": [
            [
                "6511671270bb981d"
            ]
        ]
    },
    {
        "id": "d541408c55a68f9f",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "fb7c7f527c78e092",
        "name": "Netsis  To SFORIN Stock Card(REST)",
        "info": "",
        "x": 250,
        "y": 420,
        "wires": []
    },
    {
        "id": "5c4b09de06572d97",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "2559be7f150b7436",
        "name": "",
        "url": "Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 620,
        "wires": [
            [
                "386d57ac9b4e7638"
            ]
        ]
    },
    {
        "id": "db9c75c6aef4f10c",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "2559be7f150b7436",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1120,
        "y": 620,
        "wires": []
    },
    {
        "id": "be0d5d30b7e02e90",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2559be7f150b7436",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Aktarım başarılı.\",\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 620,
        "wires": [
            [
                "db9c75c6aef4f10c"
            ]
        ]
    },
    {
        "id": "b89a9a7d58f87d47",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "2559be7f150b7436",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)",
        "info": "",
        "x": 250,
        "y": 580,
        "wires": []
    },
    {
        "id": "35930a7d3a915a90",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "29b238b19b78a24b",
        "name": "",
        "url": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 780,
        "wires": [
            [
                "88b4cf6c8c3666ea"
            ]
        ]
    },
    {
        "id": "45c3178534c0e16d",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "29b238b19b78a24b",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1120,
        "y": 780,
        "wires": []
    },
    {
        "id": "32eb9c991ec5ea3f",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "29b238b19b78a24b",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Aktarım başarılı.\",\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 780,
        "wires": [
            [
                "45c3178534c0e16d"
            ]
        ]
    },
    {
        "id": "6e8404b6a19ab18e",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "29b238b19b78a24b",
        "name": "NetsisToSFORINFieldIntegration(MMSQL)",
        "info": "",
        "x": 260,
        "y": 740,
        "wires": []
    },
    {
        "id": "96e2565c84d35dff",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "3c4e8c93618bf8f5",
        "name": "",
        "url": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 920,
        "wires": [
            [
                "54fb37b5146084ab"
            ]
        ]
    },
    {
        "id": "65db466543736034",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "3c4e8c93618bf8f5",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1120,
        "y": 920,
        "wires": []
    },
    {
        "id": "d99f18df9a178802",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "3c4e8c93618bf8f5",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"success\",\n    message: \"Aktarım başarılı.\",\n    timestamp: new Date().toISOString()\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 920,
        "wires": [
            [
                "65db466543736034"
            ]
        ]
    },
    {
        "id": "b6dd1452cf044784",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "3c4e8c93618bf8f5",
        "name": "NetsisToSFORINProductTypeIntegration",
        "info": "",
        "x": 260,
        "y": 880,
        "wires": []
    },
    {
        "id": "3b4d93c16d3a5168",
        "type": "subflow:c34fc38f83091edb",
        "z": "97e7314f695bb652",
        "g": "706f23c6f30383df",
        "name": "",
        "x": 565,
        "y": 100,
        "wires": [
            [
                "800f172a148debe2"
            ]
        ],
        "l": false
    },
    {
        "id": "6ad448f9a70ec0ae",
        "type": "subflow:73bcc0f49f21e3cf",
        "z": "97e7314f695bb652",
        "g": "12c2f3079075e98b",
        "name": "",
        "x": 585,
        "y": 280,
        "wires": [
            [
                "f6f0cf50a4a358aa"
            ]
        ],
        "l": false
    },
    {
        "id": "d928709505e723b9",
        "type": "subflow:7defd81363e19950",
        "z": "97e7314f695bb652",
        "g": "fb7c7f527c78e092",
        "name": "",
        "x": 585,
        "y": 460,
        "wires": [
            [
                "b59e709b49ffbc58"
            ]
        ],
        "l": false
    },
    {
        "id": "386d57ac9b4e7638",
        "type": "subflow:c98479901d9e9b95",
        "z": "97e7314f695bb652",
        "g": "2559be7f150b7436",
        "name": "",
        "x": 595,
        "y": 620,
        "wires": [
            [
                "be0d5d30b7e02e90"
            ]
        ],
        "l": false
    },
    {
        "id": "88b4cf6c8c3666ea",
        "type": "subflow:01bb3059fc08565d",
        "z": "97e7314f695bb652",
        "g": "29b238b19b78a24b",
        "name": "",
        "x": 585,
        "y": 780,
        "wires": [
            [
                "32eb9c991ec5ea3f"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "54fb37b5146084ab",
        "type": "subflow:8436fe1a449a7297",
        "z": "97e7314f695bb652",
        "g": "3c4e8c93618bf8f5",
        "name": "",
        "x": 595,
        "y": 920,
        "wires": [
            [
                "d99f18df9a178802"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "1826ee9bcabfc964",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "",
        "url": "MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 330,
        "y": 1080,
        "wires": [
            [
                "e47f8c49f8f6c022"
            ]
        ]
    },
    {
        "id": "cce8f946aa3f45d9",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1170,
        "y": 1080,
        "wires": []
    },
    {
        "id": "6d3ab5afe316e058",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toLocaleString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0') }]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1060,
        "wires": [
            [
                "cce8f946aa3f45d9"
            ]
        ]
    },
    {
        "id": "659798a6d80fb00a",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "info": "",
        "x": 350,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2cccaae036a25b9b",
        "type": "subflow:b9701e9ae1caaffd",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 775,
        "y": 1080,
        "wires": [
            [
                "6d3ab5afe316e058"
            ],
            [
                "4f378fca2f4fd15c"
            ]
        ],
        "l": false
    },
    {
        "id": "c68136d45539bedd",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "",
        "x": 665,
        "y": 1080,
        "wires": [
            [
                "2cccaae036a25b9b"
            ]
        ],
        "l": false
    },
    {
        "id": "4f378fca2f4fd15c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"The program is running.\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toLocaleString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0')}]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1100,
        "wires": [
            [
                "cce8f946aa3f45d9"
            ]
        ]
    },
    {
        "id": "e47f8c49f8f6c022",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "79c60a5c83f1f09d",
        "name": "function 51",
        "func": "// burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set('res_MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0',msg.res)\nmsg.integrationParameter_FlowName=msg.req.url;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605,
        "y": 1080,
        "wires": [
            [
                "c68136d45539bedd"
            ]
        ],
        "l": false
    },
    {
        "id": "4f184f848d4cf740",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "url": "MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1260,
        "wires": [
            [
                "84924e6e0470a11f"
            ]
        ]
    },
    {
        "id": "dd81d2e8b3a0179d",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1160,
        "y": 1260,
        "wires": []
    },
    {
        "id": "4e36532310976efb",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toLocaleString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0') }];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1240,
        "wires": [
            [
                "dd81d2e8b3a0179d"
            ]
        ]
    },
    {
        "id": "bf9de75c1d34fac8",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
        "info": "",
        "x": 340,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f3f8ebe822bf26c4",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "x": 655,
        "y": 1260,
        "wires": [
            [
                "e09ad973954473b9"
            ]
        ],
        "l": false
    },
    {
        "id": "0995b23b70969aaf",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"The program is running.\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toLocaleString() // Yerel tarih ve saat\n};\n \nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0') }];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1280,
        "wires": [
            [
                "dd81d2e8b3a0179d"
            ]
        ]
    },
    {
        "id": "84924e6e0470a11f",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "function 52",
        "func": "// burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\n\nmsg.integrationParameter_FlowName=msg.req.url;\n//respons dönüş için lazım\nflow.set(\"res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0\", msg.res);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 1260,
        "wires": [
            [
                "f3f8ebe822bf26c4"
            ]
        ],
        "l": false
    },
    {
        "id": "e09ad973954473b9",
        "type": "subflow:a464cb4f18f8f1f5",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 725,
        "y": 1260,
        "wires": [
            [
                "4e36532310976efb"
            ],
            [
                "0995b23b70969aaf"
            ]
        ],
        "l": false
    },
    {
        "id": "f93ef21edcdbfe77",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "url": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 1440,
        "wires": [
            [
                "ebf9b753c0db2888"
            ]
        ]
    },
    {
        "id": "9114887d0e7b9eb5",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1240,
        "y": 1500,
        "wires": []
    },
    {
        "id": "5699609978be02fc",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toLocaleString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0') }]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1480,
        "wires": [
            [
                "9114887d0e7b9eb5",
                "fe04c86380256fe1"
            ]
        ]
    },
    {
        "id": "243ead1bc779db84",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
        "info": "",
        "x": 380,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ea8abe837b06040d",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "x": 665,
        "y": 1500,
        "wires": [
            [
                "583958b872d4e043"
            ]
        ],
        "l": false
    },
    {
        "id": "8adf75c55d4276ff",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"The program is running.\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toLocaleString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0')}]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1520,
        "wires": [
            [
                "9114887d0e7b9eb5",
                "b4ed7f0c34af5f24"
            ]
        ]
    },
    {
        "id": "ebf9b753c0db2888",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "function 53",
        "func": "// burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\n\nmsg.integrationParameter_FlowName=msg.req.url;\n//respons dönüş için lazım\nflow.set(\"res_MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0\", msg.res);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 695,
        "y": 1440,
        "wires": [
            [
                "ea8abe837b06040d"
            ]
        ],
        "l": false
    },
    {
        "id": "583958b872d4e043",
        "type": "subflow:f62922f2ea3dfbe6",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 775,
        "y": 1500,
        "wires": [
            [
                "5699609978be02fc"
            ],
            [
                "8adf75c55d4276ff"
            ]
        ],
        "l": false
    },
    {
        "id": "b4ed7f0c34af5f24",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "debug 93",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1620,
        "wires": []
    },
    {
        "id": "fe04c86380256fe1",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "debug 94",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1",
        "type": "inject",
        "z": "f1a7c99c.1d3f48",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "2"
            ]
        ]
    },
    {
        "id": "2",
        "type": "file in",
        "z": "f1a7c99c.1d3f48",
        "name": "Read Excel File",
        "filename": "/home/excel/TEST.xlsx",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "16a22ba26f8a1e88"
            ]
        ]
    },
    {
        "id": "16a22ba26f8a1e88",
        "type": "book",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "raw": false,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "d8d868693869951f"
            ]
        ]
    },
    {
        "id": "d8d868693869951f",
        "type": "sheet",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "sheetName": "Sayfa1",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "c5ee342f5b77a304"
            ]
        ]
    },
    {
        "id": "c5ee342f5b77a304",
        "type": "sheet-to-json",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "raw": "false",
        "range": "A1:I99999",
        "header": "default",
        "blankrows": true,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "d74b8a94b7d2f5aa"
            ]
        ]
    },
    {
        "id": "3314665f78edf16f",
        "type": "debug",
        "z": "f1a7c99c.1d3f48",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "listExcelValue",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 260,
        "wires": []
    },
    {
        "id": "d74b8a94b7d2f5aa",
        "type": "change",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "listExcelValue",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 975,
        "y": 260,
        "wires": [
            [
                "3314665f78edf16f"
            ]
        ],
        "l": false
    },
    {
        "id": "69e914bdcd5da288",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes = msg.netsisProductTypes;  //NETSİS İÇİN GELEN VERİLERDE TYPE ESLEMESI YAPIP NAME ALIYORZ\nvar data = msg.listExcelValue;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                \"productType\": {\n                    \"typeCode\": item.TUR || \"D\",\n                    \"definitionLang\": (netsisProductTypes.find(x => x.productTypeCode == item.TUR)?.productTypeCodeName) || \"DIGER\"\n                    \n                },\n                \"categories\": [\n                    {\n                        \"categoryCode\": item.StokTemelBilgi.Grup_Kodu,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"NetsisGroupCode\"\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"isBaseUnit\": true,\n                        \"factor\": item.StokTemelBilgi.Pay_1,\n                        \"divisor\": item.StokTemelBilgi.Payda_1,\n                        \"area\": 1,\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weightKg\": 1,\n                        \"volumeM3\": 1,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod1\n                    },\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod2\n                    }\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weighthKg\": 1,\n                        \"area\": 1,\n                        \"wigthtLimitKG\": 1,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                        \"defaultDefinition\": item.StokTemelBilgi.Stok_Adi,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "0fc304d9a0397cdd"
            ]
        ]
    },
    {
        "id": "d233cb08ef080f8c",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "function 16",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item=item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 520,
        "wires": [
            [],
            [
                "2cd911f23f85bec2"
            ]
        ]
    },
    {
        "id": "b8d3af0c103ae1a8",
        "type": "http request",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProduct",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1130,
        "y": 520,
        "wires": [
            [
                "fabcb961c6197190"
            ]
        ]
    },
    {
        "id": "fabcb961c6197190",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 520,
        "wires": [
            [
                "4c771b7d72ec5214"
            ],
            [],
            [
                "6748ad1477caafc2"
            ]
        ]
    },
    {
        "id": "2cd911f23f85bec2",
        "type": "debug",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 560,
        "wires": []
    },
    {
        "id": "0fc304d9a0397cdd",
        "type": "subflow:fa51d0694c73d14f",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "x": 700,
        "y": 540,
        "wires": [
            [
                "d233cb08ef080f8c"
            ]
        ]
    },
    {
        "id": "cbc7bfc52b797780",
        "type": "comment",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "Product is being shipped",
        "info": "",
        "x": 210,
        "y": 460,
        "wires": []
    },
    {
        "id": "4c771b7d72ec5214",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 460,
        "wires": [
            [
                "c5da913ea07b269c"
            ]
        ]
    },
    {
        "id": "c5da913ea07b269c",
        "type": "subflow:7cdf28f23984a61d",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1660,
        "y": 500,
        "wires": []
    },
    {
        "id": "e9ca6b2287058cea",
        "type": "comment",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1620,
        "y": 420,
        "wires": []
    },
    {
        "id": "6748ad1477caafc2",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 580,
        "wires": [
            [
                "4e1bbcf93be288f7"
            ]
        ]
    },
    {
        "id": "4e1bbcf93be288f7",
        "type": "subflow:7cdf28f23984a61d",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1560,
        "y": 640,
        "wires": []
    },
    {
        "id": "19b7e563d0120af7",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 190,
        "y": 540,
        "wires": [
            [],
            [
                "69e914bdcd5da288"
            ]
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "f4973aa11bd2c838",
        "type": "comment",
        "z": "68459bb5ee15fc71",
        "name": "",
        "info": "Tetiklenecek cron ayarlaması ve node-red entegrasyon parametrelerini okur",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "89b91074653e42f8",
        "type": "switch",
        "z": "68459bb5ee15fc71",
        "name": "flowName Switch",
        "property": "payload.flowName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SFORIN2Netsis_InsertStock_MSSQL_v1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 645,
        "y": 200,
        "wires": [
            [
                "4d79a7540825ca01"
            ],
            [
                "e9b00d76b05cca6f"
            ],
            [
                "a9a7fbf037ab7c98"
            ],
            [
                "9c64778cbb22874a"
            ],
            [
                "a83e1f4b90df6f2f"
            ],
            [
                "7bd7f234ee5da2ee"
            ],
            [
                "dda4347789d8592e"
            ]
        ],
        "l": false
    },
    {
        "id": "676cf3610d10c8e3",
        "type": "split",
        "z": "68459bb5ee15fc71",
        "name": "Flow Name Split",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 585,
        "y": 200,
        "wires": [
            [
                "89b91074653e42f8"
            ]
        ],
        "l": false
    },
    {
        "id": "4d79a7540825ca01",
        "type": "subflow:533e6c27c7c050c1",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1220,
        "y": 80,
        "wires": []
    },
    {
        "id": "e9b00d76b05cca6f",
        "type": "subflow:c751949c59f2c3bc",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1210,
        "y": 140,
        "wires": []
    },
    {
        "id": "a9a7fbf037ab7c98",
        "type": "subflow:cff71436fcabdffa",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1190,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "dda4347789d8592e",
        "type": "debug",
        "z": "68459bb5ee15fc71",
        "name": "OtherWise",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 560,
        "wires": []
    },
    {
        "id": "a83e1f4b90df6f2f",
        "type": "subflow:a464cb4f18f8f1f5",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1050,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "17de0232786154c4",
        "type": "function",
        "z": "68459bb5ee15fc71",
        "name": "Set Prop",
        "func": "\n \nmsg.payload=global.get('allIntegrationParameters')\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 535,
        "y": 220,
        "wires": [
            [
                "676cf3610d10c8e3"
            ]
        ],
        "l": false
    },
    {
        "id": "bb93ba3fc38d50e5",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 435,
        "y": 200,
        "wires": [
            [
                "17de0232786154c4"
            ]
        ],
        "l": false
    },
    {
        "id": "4925ffd17a7f6459",
        "type": "cronplus",
        "z": "68459bb5ee15fc71",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "bb93ba3fc38d50e5"
            ]
        ]
    },
    {
        "id": "3694d2189d43b4f7",
        "type": "inject",
        "z": "68459bb5ee15fc71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 100,
        "wires": [
            [
                "bb93ba3fc38d50e5"
            ]
        ]
    },
    {
        "id": "ea9fa413f8ea865b",
        "type": "function",
        "z": "68459bb5ee15fc71",
        "name": "Set Cron",
        "func": "msg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": \"*/10 * * * * *\",\n    \"payloadType\": \"json\",\n    \"payload\": { \"action\":\"Test\"}\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "4925ffd17a7f6459"
            ]
        ]
    },
    {
        "id": "f6314757a576dd0c",
        "type": "inject",
        "z": "68459bb5ee15fc71",
        "name": "Inject JSON",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "ea9fa413f8ea865b"
            ]
        ]
    },
    {
        "id": "9c64778cbb22874a",
        "type": "subflow:b9701e9ae1caaffd",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1060,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7bd7f234ee5da2ee",
        "type": "subflow:f62922f2ea3dfbe6",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1100,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "inject_fetch_cron",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "Fetch CRON and Status",
        "props": [],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1320,
        "y": 120,
        "wires": [
            [
                "function_fetch_data"
            ]
        ]
    },
    {
        "id": "function_fetch_data",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "Simulate Fetch CRON and Status",
        "func": "msg.payload = {}; \nmsg.payload.cron = \"*/15 * * * * *\"; // 15 saniyelik CRON\nmsg.payload.status = true; // Simüle edilmiş işlem durumu\nflow.set('cron', msg.payload.cron);\nflow.set('status', msg.payload.status);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "dynamic_cron_trigger",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "Dynamic CRON Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1310,
        "y": 220,
        "wires": [
            [
                "check_status_function"
            ]
        ]
    },
    {
        "id": "check_status_function",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "Check Status",
        "func": "let status = flow.get(\"status\");\nif(status) {\n    msg.payload = \"METHABA DUNYA\";\n    return msg;\n} else {\n    node.warn(\"Status is false, not triggering message\");\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 220,
        "wires": [
            [
                "debug_output"
            ]
        ]
    },
    {
        "id": "debug_output",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "Debug Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 220,
        "wires": []
    },
    {
        "id": "443feae218b01232",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "6ef8732eb0726477",
        "name": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "c1cd1026eade5518"
            ]
        ]
    },
    {
        "id": "a6d4139469485bd7",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "443feae218b01232"
            ]
        ]
    },
    {
        "id": "946c8c674fd250ed",
        "type": "http request",
        "z": "6ef8732eb0726477",
        "name": "Sforin Category",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "f961e517332e27da"
            ]
        ]
    },
    {
        "id": "6cb049e9d29a5d0c",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "DeleteNetsisGroupCode",
        "func": "msg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.test= global.get(\"SforinToken\");\nreturn msg;;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "946c8c674fd250ed",
                "02e06d069442de2d"
            ]
        ]
    },
    {
        "id": "f961e517332e27da",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 160,
        "wires": []
    },
    {
        "id": "e1ffed8387dc9e1a",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "e29ce416e7cdc43e"
            ]
        ]
    },
    {
        "id": "e29ce416e7cdc43e",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "6ef8732eb0726477",
        "name": "",
        "x": 320,
        "y": 540,
        "wires": [
            [
                "3dc3b8068cb60ed6"
            ]
        ]
    },
    {
        "id": "3dc3b8068cb60ed6",
        "type": "subflow:bf7e6ed2256e3a44",
        "z": "6ef8732eb0726477",
        "name": "",
        "x": 1420,
        "y": 560,
        "wires": [
            [
                "2d0557cf7a8bcde9"
            ],
            [
                "abd479d3cecf10b0"
            ]
        ]
    },
    {
        "id": "3203ea3ed6400810",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 340,
        "wires": []
    },
    {
        "id": "27bbe8c2a5316081",
        "type": "subflow:17803f695ab8af0d",
        "z": "6ef8732eb0726477",
        "name": "",
        "env": [
            {
                "name": "IsFetchS4INStocks",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "1234b32afef880be"
            ]
        ],
        "info": "S4IN PROGRAMINDA TUM STOKLARI CEKIP NETSISTE VAR MI YOKMU KONTROL ETMEK İSTEMİYOR İSEK \"FALSE\" DEGER GONDERILECEK ISTENMESI DURUMUNDA \"TRUE\" GONDERILECEKTIR"
    },
    {
        "id": "2d0557cf7a8bcde9",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 560,
        "wires": []
    },
    {
        "id": "abd479d3cecf10b0",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 80",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 640,
        "wires": []
    },
    {
        "id": "1234b32afef880be",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 81",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 820,
        "wires": []
    },
    {
        "id": "bc07c98e872cd3a6",
        "type": "subflow:5b2ae23bfd497a94",
        "z": "6ef8732eb0726477",
        "name": "",
        "x": 640,
        "y": 640,
        "wires": [
            [
                "27bbe8c2a5316081"
            ]
        ]
    },
    {
        "id": "36d5a22f87ad81fb",
        "type": "subflow:fa51d0694c73d14f",
        "z": "6ef8732eb0726477",
        "name": "",
        "x": 600,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5ea6f74069a7bec4",
        "type": "http request",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "Get BuyerAndSellerOrder",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetWarehouseLocations",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1090,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "3ff9d7e2114ebee6",
        "type": "complete",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "",
        "scope": [
            "5ea6f74069a7bec4"
        ],
        "uncaught": false,
        "x": 230,
        "y": 1120,
        "wires": [
            [
                "95f550781d6755bd"
            ]
        ]
    },
    {
        "id": "1890cc5d5c49407c",
        "type": "catch",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "catch errors",
        "scope": [
            "5ea6f74069a7bec4"
        ],
        "uncaught": false,
        "x": 230,
        "y": 1040,
        "wires": [
            [
                "49dc2113b508a602"
            ]
        ]
    },
    {
        "id": "abf71b4791b9d153",
        "type": "function",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 940,
        "wires": [
            [
                "5ea6f74069a7bec4"
            ]
        ]
    },
    {
        "id": "49dc2113b508a602",
        "type": "function",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "retry logic",
        "func": "msg.retries || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1040,
        "wires": [
            [
                "e464f23a4cb0db81"
            ],
            [
                "ed09d757b379952e",
                "7a23b7dbee23e90c"
            ]
        ]
    },
    {
        "id": "f21ce3536a80e220",
        "type": "function",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "GetWarehouseLocations",
        "func": "// Get the JSON data\nmsg.getWarehouseLocationsPayload = msg.payload.data;\n\n\n\nreturn msg;\n\n\n \n \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "f7342eaf2862b385"
            ]
        ]
    },
    {
        "id": "95f550781d6755bd",
        "type": "switch",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 1120,
        "wires": [
            [
                "e464f23a4cb0db81"
            ],
            [
                "f21ce3536a80e220"
            ],
            [
                "ed09d757b379952e"
            ]
        ]
    },
    {
        "id": "b7a6c9c8427553da",
        "type": "comment",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "GetAllSFORINGetWarehouseLocations",
        "info": "",
        "x": 310,
        "y": 880,
        "wires": []
    },
    {
        "id": "e464f23a4cb0db81",
        "type": "subflow:fa51d0694c73d14f",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "",
        "x": 500,
        "y": 940,
        "wires": [
            [
                "abf71b4791b9d153"
            ]
        ]
    },
    {
        "id": "ed09d757b379952e",
        "type": "function",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "a20779063fc4c7c1"
            ]
        ]
    },
    {
        "id": "a20779063fc4c7c1",
        "type": "subflow:7cdf28f23984a61d",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "GetAllSFORINGetWarehouseLocations",
                "type": "str"
            },
            {
                "name": "sourceModule/Flow",
                "value": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 880,
        "y": 1040,
        "wires": []
    },
    {
        "id": "f7342eaf2862b385",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "debug 85",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 1120,
        "wires": []
    },
    {
        "id": "7a23b7dbee23e90c",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "g": "b7e7039210c831e5",
        "name": "debug 86",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a14ac3a079c0fc9d",
        "type": "subflow:7cdf28f23984a61d",
        "z": "6ef8732eb0726477",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "TEST1",
                "type": "str"
            },
            {
                "name": "sourceModule/Flow",
                "value": "TEST2",
                "type": "str"
            },
            {
                "name": "destinationSystem",
                "value": "TEST3",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 360,
        "wires": []
    },
    {
        "id": "c1cd1026eade5518",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 320,
        "wires": [
            [
                "a14ac3a079c0fc9d"
            ]
        ]
    },
    {
        "id": "02e06d069442de2d",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "aaaaaaaaaaaaaaa",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 60,
        "wires": []
    }
]