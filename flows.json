[
    {
        "id": "97e7314f695bb652",
        "type": "tab",
        "label": "UrlCollection",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f1a7c99c.1d3f48",
        "type": "tab",
        "label": "Excel to JSON Flow",
        "disabled": false,
        "info": ""
    },
    {
        "id": "68459bb5ee15fc71",
        "type": "tab",
        "label": "Flow 23",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ef8732eb0726477",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3aca90fb83019832",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fa51d0694c73d14f",
        "type": "subflow",
        "name": "Get Token SFORINAPI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 80,
                "wires": [
                    {
                        "id": "fc4e6bca72218567"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1170,
                "y": 340,
                "wires": [
                    {
                        "id": "1aaf0ca1bcd31c5c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "defaultData",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "317a0e3edab25639",
        "type": "subflow",
        "name": "Token Netsis",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 380,
                "wires": [
                    {
                        "id": "359bbc3396c63271"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1450,
                "y": 200,
                "wires": [
                    {
                        "id": "420f6597bca31418",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1170,
                "y": 440,
                "wires": [
                    {
                        "id": "3252a64b6291f4e5",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Status",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "30dd5fc9ce2b5545",
        "type": "subflow",
        "name": "NetsisProductType",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 200,
                "wires": [
                    {
                        "id": "12cd4977e5b8f047"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1000,
                "y": 200,
                "wires": [
                    {
                        "id": "50d3c1690610e3fe",
                        "port": 0
                    }
                ]
            },
            {
                "x": 660,
                "y": 220,
                "wires": [
                    {
                        "id": "53f3d73604363dbe",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7cdf28f23984a61d",
        "type": "subflow",
        "name": "MongoDbNodeRedLog_V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 140,
                "wires": [
                    {
                        "id": "659af4d22c3253a7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1270,
                "y": 200,
                "wires": [
                    {
                        "id": "659af4d22c3253a7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "sourceModule/Flow",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c34fc38f83091edb",
        "type": "subflow",
        "name": "SFORIN2Netsis_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "37cbd46fe4fdbaf5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 780,
                "wires": [
                    {
                        "id": "2bfef7a835ff1b51",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "73bcc0f49f21e3cf",
        "type": "subflow",
        "name": "SFORIN2Netsis_InsertStock_Rest_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 320,
                "y": 220,
                "wires": [
                    {
                        "id": "4169215be0943297"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 660,
                "wires": [
                    {
                        "id": "530910680df15e9e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7defd81363e19950",
        "type": "subflow",
        "name": "Netsis2SFORIN_InsertStock_Rest_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 400,
                "y": 120,
                "wires": [
                    {
                        "id": "669ac6e3dde76840"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 1260,
                "wires": [
                    {
                        "id": "0edcffb0cc6fe6e9",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c98479901d9e9b95",
        "type": "subflow",
        "name": "Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "fd39b5f40a5466e5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 1240,
                "wires": [
                    {
                        "id": "ebaa82cd07fe202e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "01bb3059fc08565d",
        "type": "subflow",
        "name": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 140,
                "wires": [
                    {
                        "id": "45bfbb5076e745f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1680,
                "y": 1080,
                "wires": [
                    {
                        "id": "a32df7934f2f7d5c",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1660,
                "y": 1240,
                "wires": [
                    {
                        "id": "bc1fec0a3b9e19fa",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8436fe1a449a7297",
        "type": "subflow",
        "name": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 260,
                "y": 300,
                "wires": [
                    {
                        "id": "4ebd94f2f25892f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 700,
                "wires": [
                    {
                        "id": "731e19687a0d03c7",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1240,
                "y": 680,
                "wires": [
                    {
                        "id": "60402cd7e995d83c",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "79ed7abbe7cc27ac",
        "type": "subflow",
        "name": "Node-Red-Inregrations",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 110,
                "y": 130,
                "wires": [
                    {
                        "id": "1f17df2fd7d8225d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 490,
                "wires": [
                    {
                        "id": "8d9f039cb17dbbed",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Type",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d296b4008b6072d8",
        "type": "subflow",
        "name": "MSSQL Connection",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "1590916a9f353689"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 180,
                "wires": [
                    {
                        "id": "ae78335a68bfbfb5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 920,
                "y": 330,
                "wires": [
                    {
                        "id": "2e8d889d55adcab8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "query",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0a4f4f9f59c2be20",
        "type": "subflow",
        "name": "Update State Integration Params",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 50,
                "wires": [
                    {
                        "id": "8fa80a8357766e9d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1430,
                "y": 220,
                "wires": [
                    {
                        "id": "3d6f163e3aa9eaf5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "status",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "533e6c27c7c050c1",
        "type": "subflow",
        "name": "GroupNetsis2SFORIN_ProductTypeIntegration_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 220,
                "wires": [
                    {
                        "id": "b86a1ce878613e8e"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c751949c59f2c3bc",
        "type": "subflow",
        "name": "GROUP Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 200,
                "wires": [
                    {
                        "id": "7b2950f4aa48db06"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bb656f77f61addff",
        "type": "subflow",
        "name": "Set propIntegration",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 240,
                "wires": [
                    {
                        "id": "691a79796462bde3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 240,
                "wires": [
                    {
                        "id": "691a79796462bde3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "status",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "cff71436fcabdffa",
        "type": "subflow",
        "name": "GROUP SFORIN2Netsis_InsertStock_MSSQL_v1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 300,
                "wires": [
                    {
                        "id": "7f1db3a8fb6d4153"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1460,
                "y": 440,
                "wires": [
                    {
                        "id": "f9d2d10b5062f8e2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5b2ae23bfd497a94",
        "type": "subflow",
        "name": "NTSF000V1.0",
        "info": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
        "category": "",
        "in": [
            {
                "x": 90,
                "y": 150,
                "wires": [
                    {
                        "id": "69afe7af16898732"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 720,
                "y": 1330,
                "wires": [
                    {
                        "id": "9df4f7571e38ba9e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "17803f695ab8af0d",
        "type": "subflow",
        "name": "NTSP000V1.0",
        "info": "Netsis2SFORIN_InsertStock",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 120,
                "wires": [
                    {
                        "id": "4facfe6a2109a10a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 540,
                "wires": [
                    {
                        "id": "c75e104d9b1606e8",
                        "port": 1
                    },
                    {
                        "id": "1aaad88f0896c456",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IsFetchS4INStocks",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e93f97e999fe62ab",
        "type": "subflow",
        "name": "MetropolUnNetsisProductType",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 200,
                "wires": [
                    {
                        "id": "ed791a059d2f5a68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1080,
                "y": 160,
                "wires": [
                    {
                        "id": "607330f60d089b54",
                        "port": 0
                    }
                ]
            },
            {
                "x": 820,
                "y": 280,
                "wires": [
                    {
                        "id": "4afa2e6bcf72d66f",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3179678ca8b98244",
        "type": "subflow",
        "name": "NTSC000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "087b5529bb1658bd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 960,
                "y": 530,
                "wires": [
                    {
                        "id": "460723836a4afab3",
                        "port": 1
                    },
                    {
                        "id": "9b2aaf769f5d8d85",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "IsFetchS4INPartner",
                "type": "bool",
                "value": "true"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a464cb4f18f8f1f5",
        "type": "subflow",
        "name": "GNTSC000V1.0",
        "info": "Netsis2SFORIN_Customers",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 160,
                "wires": [
                    {
                        "id": "f123bd878033b75f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1480,
                "y": 380,
                "wires": [
                    {
                        "id": "ce28ed41b247fece",
                        "port": 0
                    }
                ]
            },
            {
                "x": 860,
                "y": 160,
                "wires": [
                    {
                        "id": "b3661310f2bcd661",
                        "port": 1
                    },
                    {
                        "id": "f123bd878033b75f",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b9701e9ae1caaffd",
        "type": "subflow",
        "name": "GNTSF000V1.0",
        "info": "Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "15eb7783fe448944"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1440,
                "y": 360,
                "wires": [
                    {
                        "id": "23fcab0d6f6dea2e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 900,
                "y": 140,
                "wires": [
                    {
                        "id": "f55ceedb9839ae82",
                        "port": 1
                    },
                    {
                        "id": "15eb7783fe448944",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "bf7e6ed2256e3a44",
        "type": "subflow",
        "name": "NTSBSO000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 90,
                "wires": [
                    {
                        "id": "019be7c744de779e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1170,
                "y": 230,
                "wires": [
                    {
                        "id": "f28bc80528e3b4c5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1110,
                "y": 330,
                "wires": [
                    {
                        "id": "4958f6ff314c62cc",
                        "port": 1
                    },
                    {
                        "id": "f28bc80528e3b4c5",
                        "port": 1
                    },
                    {
                        "id": "3274dca64fd42307",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f62922f2ea3dfbe6",
        "type": "subflow",
        "name": "GNTSBSO000V1.0",
        "info": "Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 160,
                "wires": [
                    {
                        "id": "d64bb0ce43f56b78"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1520,
                "y": 380,
                "wires": [
                    {
                        "id": "b742b94d7c798c1b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 960,
                "y": 200,
                "wires": [
                    {
                        "id": "5fd47f67e0d4c1c4",
                        "port": 1
                    },
                    {
                        "id": "d64bb0ce43f56b78",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e35d14410b661a09",
        "type": "subflow",
        "name": "SFORINAPI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "53f5a4039399a533"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1030,
                "y": 130,
                "wires": [
                    {
                        "id": "131dbe6786cec9dd",
                        "port": 1
                    }
                ]
            },
            {
                "x": 880,
                "y": 310,
                "wires": [
                    {
                        "id": "131dbe6786cec9dd",
                        "port": 3
                    },
                    {
                        "id": "131dbe6786cec9dd",
                        "port": 2
                    },
                    {
                        "id": "474c7f31a2279615",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Url",
                "type": "str",
                "value": ""
            },
            {
                "name": "Method",
                "type": "str",
                "value": "POST"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e02241cc3f021318",
        "type": "subflow",
        "name": "GDelIntLog ",
        "info": "GroupDeleteIntegrationLog",
        "category": "",
        "in": [
            {
                "x": 130,
                "y": 100,
                "wires": [
                    {
                        "id": "1683e5b00b9f78c7"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1300,
                "y": 510,
                "wires": [
                    {
                        "id": "b7498c4725ccf723",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e00c065eb7c30613",
        "type": "subflow",
        "name": "DelIntLogO000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 170,
                "y": 210,
                "wires": [
                    {
                        "id": "d68543ab51e43e79"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 190,
                "wires": [
                    {
                        "id": "3afaae6869304943",
                        "port": 0
                    }
                ]
            },
            {
                "x": 720,
                "y": 260,
                "wires": [
                    {
                        "id": "a62f912397ac8718",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Interval",
                "type": "num",
                "value": "10"
            },
            {
                "name": "Url",
                "type": "str",
                "value": "CleanLog"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1053798a29903688",
        "type": "subflow",
        "name": "GINTSYNC000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 110,
                "y": 110,
                "wires": [
                    {
                        "id": "3e93a71dc459266c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1100,
                "y": 460,
                "wires": [
                    {
                        "id": "aa7e289d6f686621",
                        "port": 0
                    }
                ]
            },
            {
                "x": 880,
                "y": 220,
                "wires": [
                    {
                        "id": "8748e1435351d013",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "706eaf0decd289cd",
        "type": "subflow",
        "name": "INTSYNC000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 230,
                "wires": [
                    {
                        "id": "7b33eea33a809a6f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1290,
                "y": 220,
                "wires": [
                    {
                        "id": "f60fd7c6d80646cb",
                        "port": 1
                    },
                    {
                        "id": "cac14d83f4649482",
                        "port": 0
                    },
                    {
                        "id": "e22042e2e01c2dce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "407e1a0c9ab51943",
        "type": "subflow",
        "name": "INTSYNCSP000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 60,
                "wires": [
                    {
                        "id": "b3bf129809ba23dc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 990,
                "y": 290,
                "wires": [
                    {
                        "id": "aa53b956aec822c9",
                        "port": 0
                    }
                ]
            },
            {
                "x": 970,
                "y": 420,
                "wires": [
                    {
                        "id": "aa53b956aec822c9",
                        "port": 1
                    },
                    {
                        "id": "8f58190b0c42e00e",
                        "port": 1
                    },
                    {
                        "id": "eb168f58f0bd3ecd",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f80e2a714bd438bd",
        "type": "subflow",
        "name": "INTSYSCNTSC000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 180,
                "y": 290,
                "wires": [
                    {
                        "id": "f240d42321eb272f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 320,
                "wires": [
                    {
                        "id": "36be859ccfe3d4b5",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1010,
                "y": 240,
                "wires": [
                    {
                        "id": "18c871d56049234c",
                        "port": 1
                    },
                    {
                        "id": "36be859ccfe3d4b5",
                        "port": 1
                    },
                    {
                        "id": "a02c15375f73a691",
                        "port": 1
                    },
                    {
                        "id": "c2649c7d54b9c708",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a0444666d3c69ec9",
        "type": "subflow",
        "name": "GINTSYNCSP000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 210,
                "y": 170,
                "wires": [
                    {
                        "id": "8b42b50d0ee3af6a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 250,
                "wires": [
                    {
                        "id": "9abd6b0225d6ae52",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5608c41bb386c85b",
        "type": "subflow",
        "name": "GINTSYSCNTSC000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 190,
                "y": 140,
                "wires": [
                    {
                        "id": "af8fa2a954b2bbfa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 490,
                "y": 200,
                "wires": [
                    {
                        "id": "15a1d9cbef0fd28f",
                        "port": 1
                    },
                    {
                        "id": "abefcced94558a62",
                        "port": 0
                    },
                    {
                        "id": "d0abbf6459ca8b48",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4a994836a6392703",
        "type": "subflow",
        "name": "INTNTSBSO000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 170,
                "wires": [
                    {
                        "id": "7f8114e04290d140"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1140,
                "y": 310,
                "wires": [
                    {
                        "id": "23327e292123f24b",
                        "port": 0
                    }
                ]
            },
            {
                "x": 960,
                "y": 270,
                "wires": [
                    {
                        "id": "4118875c7f82f83b",
                        "port": 1
                    },
                    {
                        "id": "23327e292123f24b",
                        "port": 1
                    },
                    {
                        "id": "b35aeea817a34da1",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e83dd01867d6527c",
        "type": "subflow",
        "name": "GNTSBSO000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 170,
                "y": 120,
                "wires": [
                    {
                        "id": "107498694ec2a151"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 550,
                "y": 230,
                "wires": [
                    {
                        "id": "d314a1e44e24c82b",
                        "port": 1
                    },
                    {
                        "id": "b80b02ecfcf2aee8",
                        "port": 0
                    },
                    {
                        "id": "b80e38507b5bdd2d",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2edf95049d03fe02",
        "type": "subflow",
        "name": "NTSF000V1.1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 100,
                "wires": [
                    {
                        "id": "89547ef5d2693443"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 780,
                "y": 650,
                "wires": [
                    {
                        "id": "2f17c1d0853dcd5f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fc936f675a46124b",
        "type": "subflow",
        "name": "NetsisApiV1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 120,
                "wires": [
                    {
                        "id": "a3dad7ab3fe1bc68"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "a3dad7ab3fe1bc68",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1340,
                "y": 270,
                "wires": [
                    {
                        "id": "51cd88a319665df6",
                        "port": 0
                    },
                    {
                        "id": "3cae524a04864887",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "RestUrl",
                "type": "str",
                "value": ""
            },
            {
                "name": "ChooseRequestMethod",
                "type": "str",
                "value": "POST"
            },
            {
                "name": "repeatCount",
                "type": "num",
                "value": "1"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c823b85caa289042",
        "type": "subflow",
        "name": "GNTSPD000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 130,
                "y": 150,
                "wires": [
                    {
                        "id": "d1f0be44a0e8f7f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1550,
                "y": 430,
                "wires": [
                    {
                        "id": "b30ad249dc203f0c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 990,
                "y": 260,
                "wires": [
                    {
                        "id": "03096c4dc4f957d4",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8a27645487b5e36b",
        "type": "subflow",
        "name": "NTSPD000V1.0",
        "info": "ProductionDoc",
        "category": "",
        "in": [
            {
                "x": 210,
                "y": 140,
                "wires": [
                    {
                        "id": "5fb7317ccb04afb0"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1770,
                "y": 170,
                "wires": [
                    {
                        "id": "91d4d062b703a331",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1700,
                "y": 240,
                "wires": [
                    {
                        "id": "91d4d062b703a331",
                        "port": 1
                    },
                    {
                        "id": "20827dae192116ca",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "subflow-dynamic-mapping",
        "type": "subflow",
        "name": "Dynamic JSON Mapper",
        "info": "This subflow dynamically maps JSON data based on provided mappings for Header and Items.",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "function-dynamic-mapping"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 160,
                "wires": [
                    {
                        "id": "function-dynamic-mapping",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "RootMapping",
                "type": "json",
                "value": "{\"HeaderTarget\": \"FatUst\", \"ItemsTarget\": \"FatKalem\"}"
            },
            {
                "name": "HeaderMapping",
                "type": "json",
                "value": "[{\"source\": \"orderNo\", \"target\": \"FatNo\"}, {\"source\": \"Date\", \"target\": \"FatTarih\"}, {\"source\": \"User\", \"target\": \"Kullanici\"}]"
            },
            {
                "name": "ItemMapping",
                "type": "json",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"Miktar\"},{\"source\":\"Unit\",\"target\":\"Birim\"},{\"source\":\"OrderLineNo\",\"target\":\"SiraNo\"},{\"source\":\"WarehouseCode\",\"target\":\"DepoKodu\"}]"
            },
            {
                "name": "DefaultHeader",
                "type": "str",
                "value": ""
            },
            {
                "name": "DefaultItems",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ccc4f9f8e6f67860",
        "type": "subflow",
        "name": "S2NSWAY000V1_0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 70,
                "wires": [
                    {
                        "id": "17dd36a28748d550"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9ef239d14888af27",
        "type": "subflow",
        "name": "STNBWAY000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 90,
                "y": 80,
                "wires": [
                    {
                        "id": "c5f27ce0338c31b5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1990,
                "y": 120,
                "wires": [
                    {
                        "id": "0858b95ba622a39f",
                        "port": 0
                    },
                    {
                        "id": "c75810f63ff5f8b0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1990,
                "y": 260,
                "wires": [
                    {
                        "id": "5a0258fea29e4d08",
                        "port": 1
                    },
                    {
                        "id": "289a0bef95410df6",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "5d0772e7b4d40c7d",
        "type": "subflow",
        "name": "STNWTRF001V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 230,
                "y": 70,
                "wires": [
                    {
                        "id": "8ae4765a8c923539"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "dd21aeba43582ce3",
        "type": "subflow",
        "name": "STNWENT000V1_0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 540,
                "y": 170,
                "wires": [
                    {
                        "id": "559e4ee976f9d343"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ddcc1ea5734e68f3",
        "type": "subflow",
        "name": "STNWEX000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "94608eb23ce1fc19"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2a1dc06c4b793347",
        "type": "subflow",
        "name": "STNFGRWC000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 130,
                "wires": [
                    {
                        "id": "e2c41f405270e1cf"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c1457f7fe69a15e3",
        "type": "subflow",
        "name": "S2NSWAY000V1test",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 210,
                "wires": [
                    {
                        "id": "0caee4a797e8b576"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "03cb704bd5b0b530",
        "type": "subflow",
        "name": "INTNTSPD000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 150,
                "y": 100,
                "wires": [
                    {
                        "id": "181071696f3f147c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1550,
                "y": 60,
                "wires": [
                    {
                        "id": "b78e1e5a32e427c0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1620,
                "y": 270,
                "wires": [
                    {
                        "id": "c6489662c8f86a78",
                        "port": 1
                    },
                    {
                        "id": "b78e1e5a32e427c0",
                        "port": 1
                    },
                    {
                        "id": "43e53292a235d42b",
                        "port": 1
                    },
                    {
                        "id": "0210b7973afea401",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f56e4df3e14fab23",
        "type": "subflow",
        "name": "GINTNTSPD000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 230,
                "wires": [
                    {
                        "id": "c94f2b4b0b42c4f8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 550,
                "y": 370,
                "wires": [
                    {
                        "id": "8f1bc1012e9820b6",
                        "port": 1
                    },
                    {
                        "id": "195d7159bb1b2e96",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e269717c57799658",
        "type": "subflow",
        "name": "GSTNRI000V1.0",
        "info": "ReportItem\r\n\r\nETIKET ICIN NETSISTE SAHA TABLO ESLEME EKRANINDA \r\nSELECTBOX OLARAK GELEN VERILERE EKLENECEK\r\n",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 150,
                "wires": [
                    {
                        "id": "ea3b9ea1851ccce5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1560,
                "y": 460,
                "wires": [
                    {
                        "id": "0dc5ba0548881405",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1020,
                "y": 290,
                "wires": [
                    {
                        "id": "17c81f4c089ce04e",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "manuel",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "19476c64dff52355",
        "type": "subflow",
        "name": "STNRI000V1.0",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 380,
                "y": 160,
                "wires": [
                    {
                        "id": "eb7d82aeea335f8a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1640,
                "y": 190,
                "wires": [
                    {
                        "id": "2d6789fff4bdf3f1",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1670,
                "y": 250,
                "wires": [
                    {
                        "id": "2d6789fff4bdf3f1",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "23b1b01cc4ce5a0d",
        "type": "subflow",
        "name": "MongoDbConnect",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 210,
                "y": 90,
                "wires": [
                    {
                        "id": "67e2f88fa8d25a8f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 690,
                "y": 80,
                "wires": [
                    {
                        "id": "67e2f88fa8d25a8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "query",
                "type": "str",
                "value": ""
            },
            {
                "name": "collection",
                "type": "str",
                "value": ""
            },
            {
                "name": "IsUpdated",
                "type": "bool",
                "value": "false"
            },
            {
                "name": "IsDelete",
                "type": "bool",
                "value": "false"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9552037f5da4c3a1",
        "type": "subflow",
        "name": "Subflow 1",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "1bd2a61f8400e469",
        "type": "subflow",
        "name": "STNPWAY000V1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "5a72081df7313a1a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 750,
                "y": 240,
                "wires": [
                    {
                        "id": "5fe17ef42c1afeb2",
                        "port": 1
                    },
                    {
                        "id": "a93bfe04a399b238",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "22db7f4bcd69fa91",
        "type": "subflow",
        "name": "STNSINV000V1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "bfdf8f915f026d47"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1910,
                "y": 50,
                "wires": [
                    {
                        "id": "e53607234fb31c5a",
                        "port": 0
                    },
                    {
                        "id": "a69839ab8ac45c50",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f353afe31d73612e",
        "type": "subflow",
        "name": "SFORIN Attribute MAP",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "b81ca77b6c47979b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 150,
                "wires": [
                    {
                        "id": "b81ca77b6c47979b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "SourceJson",
                "type": "json",
                "value": "{\"FatNo\":\"documentNo\",\"OrderLineNo\":\"documentItemNo\",\"Material\":\"productCode\"}"
            }
        ],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d7d3df76259713a2",
        "type": "subflow",
        "name": "Subflow 2",
        "info": "",
        "in": [],
        "out": []
    },
    {
        "id": "95c542b74b7a0db4",
        "type": "subflow",
        "name": "STNWTRF000V1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 90,
                "wires": [
                    {
                        "id": "8ac1b8b61ff4cb1b"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a7ee580a04fce715",
        "type": "subflow",
        "name": "STNSINV000V1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 170,
                "wires": [
                    {
                        "id": "5dda567ba258037d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b9b9f807cf3a5e6a",
        "type": "subflow",
        "name": "STNSWAY000V2",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 230,
                "wires": [
                    {
                        "id": "36fb8f3d03f5079e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 890,
                "y": 350,
                "wires": [
                    {
                        "id": "faed198381b04e69",
                        "port": 1
                    }
                ]
            },
            {
                "x": 700,
                "y": 370,
                "wires": [
                    {
                        "id": "5cae34a1ec866405",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "9a81aa788c97846f",
        "type": "subflow",
        "name": "S2N SALES WAYBILL V2",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "3386111447866c45"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1920,
                "y": 120,
                "wires": [
                    {
                        "id": "af1e1d2d7e89fa74",
                        "port": 0
                    },
                    {
                        "id": "e37265fa75804079",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "994d236e9dad90dc",
        "type": "subflow",
        "name": "IsShipmentMatchingOrderV001",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 90,
                "y": 70,
                "wires": [
                    {
                        "id": "ebd0afbed1c80e10"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2ad6940233ab0133",
        "type": "subflow",
        "name": "UpdateShipmentNum",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "47c0794ac7e1b93d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d2197442821c3f1f",
        "type": "subflow",
        "name": "IsShipmentMatchingOrderItemV001",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 200,
                "y": 70,
                "wires": [
                    {
                        "id": "ed4202e0db5f2ef0"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "94eb378f85b6e7bb",
        "type": "subflow",
        "name": "STNRDN000V1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 450,
                "y": 170,
                "wires": [
                    {
                        "id": "c1d40b0f288918f2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1630,
                "y": 250,
                "wires": [
                    {
                        "id": "ed7ea79cc147fa26",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1650,
                "y": 340,
                "wires": [
                    {
                        "id": "ed7ea79cc147fa26",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7797de26835d320a",
        "type": "subflow",
        "name": "GSTNRDN000V1",
        "info": "SATISTAN IADE",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "5a509a3f0ba47e4c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "55047cbfc0388bed",
        "type": "subflow",
        "name": "GSTNRDN000V1-AI",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": [
                    {
                        "id": "c0a17ee6574eac10"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3ab9e684f951f1bf",
        "type": "subflow",
        "name": "STNRDNAI000V1",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 150,
                "y": 210,
                "wires": [
                    {
                        "id": "bbab13d0d86135ad"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 210,
                "wires": [
                    {
                        "id": "42a6285c3a21dde0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1540,
                "y": 400,
                "wires": [
                    {
                        "id": "42a6285c3a21dde0",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "20af6c29a4fea0a1",
        "type": "subflow",
        "name": "GetSalesWaybillNumber",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 70,
                "wires": [
                    {
                        "id": "f6838dd424349be7"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f3de0ac6bfb0216b",
        "type": "subflow",
        "name": "BtnSendDocumentPrint",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 70,
                "y": 210,
                "wires": [
                    {
                        "id": "c7f076817e3312c6"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f95fc539736e93fc",
        "type": "group",
        "z": "f1a7c99c.1d3f48",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "69e914bdcd5da288",
            "d233cb08ef080f8c",
            "b8d3af0c103ae1a8",
            "fabcb961c6197190",
            "2cd911f23f85bec2",
            "0fc304d9a0397cdd",
            "cbc7bfc52b797780",
            "4c771b7d72ec5214",
            "c5da913ea07b269c",
            "e9ca6b2287058cea",
            "6748ad1477caafc2",
            "4e1bbcf93be288f7",
            "19b7e563d0120af7"
        ],
        "x": 74,
        "y": 379,
        "w": 1732,
        "h": 302
    },
    {
        "id": "9c638029e6a502f7",
        "type": "group",
        "z": "c34fc38f83091edb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1092e26ede67c90d",
            "53c08a45a642e47b",
            "cb6d0098ab2f5b08",
            "8718f946e9693a70",
            "5a25d86414943c98",
            "679a352f386ac881",
            "c806c17cec29c3ce",
            "cbe3fd8d71dfaafc",
            "2b4bd4abec322b6a",
            "88db9b841ebb3929",
            "37cbd46fe4fdbaf5",
            "a7f8959b3820e088"
        ],
        "x": 154,
        "y": 159,
        "w": 792,
        "h": 302
    },
    {
        "id": "43c38bd59b12a723",
        "type": "group",
        "z": "73bcc0f49f21e3cf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f8f0a54b3b3981f",
            "46098b541d83894d",
            "f7c3cf75ad1cd3ad",
            "e1bddc7ba88c31ff",
            "036721ca56da574a",
            "4773923cf77e68b8",
            "6f8459932c16cb57",
            "8d0b5b4b9c6005ea",
            "4a8d53d8472af3aa",
            "2dfa9bc630189151",
            "4169215be0943297"
        ],
        "x": 214,
        "y": 119,
        "w": 1012,
        "h": 362
    },
    {
        "id": "16d68ae37c966577",
        "type": "group",
        "z": "73bcc0f49f21e3cf",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6d82dee7e9c3eaa6",
            "64c8bf14f9283849",
            "b4a48818b854434e",
            "2664c89f94d5d263",
            "1d0893d325e7fde9",
            "1748498982788e78",
            "66a7d3b048815c81",
            "45a16768398968b6",
            "f7400f4f69f3f0b9",
            "14a1bd9a6f799d0f",
            "edbe8e9841006ec9",
            "80f841d0f57da599",
            "6c0aba63526c969d",
            "30fe69813cca3656",
            "69919dd567898653",
            "1d35d56abb2fe346",
            "5280b858ea5f0f27",
            "60ed029db915ba30",
            "1003bee7386f0ee4",
            "530910680df15e9e"
        ],
        "x": 214,
        "y": 519,
        "w": 1272,
        "h": 462
    },
    {
        "id": "cac22249c3b2266f",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2d714c1a3b03f9cd",
            "0edcffb0cc6fe6e9",
            "410334039bcf7090",
            "e45ffea3e99d0f81",
            "146030b32dde17df",
            "da441135bb95cdbf",
            "e6ee46bbf293f5a4",
            "2b4b492e83e2b9a5",
            "8b96a69c8c3fd36d",
            "8ce8edf07e100f74",
            "df84b79cbe394492",
            "03c4bf59d993773f",
            "58e8a2a6f6fc0502",
            "3493b3bbd2dc2ff2",
            "1304999a0b718ecd",
            "2006cf42c69414d2",
            "c87b6b3b1f79d456",
            "88e2158b608619ba"
        ],
        "x": 134,
        "y": 1019,
        "w": 1732,
        "h": 302
    },
    {
        "id": "17c24c3c0a543d66",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e7e584fba8986c15",
            "bcfbce53a162190c",
            "2ed8fdb2f308ff39",
            "0de061d6a541cf33",
            "ae8890c371c77bef",
            "a1e958abc61613d0",
            "2f101de07d11739e",
            "96baada44d1f4877",
            "92c7f455a989dc78",
            "b8c186db23270a18",
            "c7ea41c46373697f",
            "46460bfc60fe7dbf",
            "5b6148cc337bfdc9",
            "5eb71ffc293a75b8",
            "8c61f291fe42c220",
            "6da70b9a59b99025",
            "d51c0e5157902bb4",
            "1d2cf5374de79379"
        ],
        "x": 134,
        "y": 339,
        "w": 1622,
        "h": 302
    },
    {
        "id": "a8f1fd19b36198e2",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "70d63b2bc1cd3e70",
            "40f91329a9597aba",
            "e2a558d60e316c06",
            "9af6d363228efc7b",
            "f596c49f1580edb3",
            "70a3c37ab62a138d"
        ],
        "x": 134,
        "y": 779,
        "w": 822,
        "h": 182
    },
    {
        "id": "d03a79754f9c3a19",
        "type": "group",
        "z": "7defd81363e19950",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a3ef115fa5f43ea4",
            "669ac6e3dde76840",
            "c2da631ae4d47e52",
            "81464857806c43dc",
            "6a86e844d23f4744",
            "710b26fe2c592f23",
            "4230925012844847",
            "619be310e265ce67"
        ],
        "x": 364,
        "y": 79,
        "w": 1022,
        "h": 202
    },
    {
        "id": "15cac131f8c56bbf",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d8166d4f40a6501b",
            "2a7f0d36b27a0556",
            "009d56552acd23b5",
            "4ad699fbc1c85e5c",
            "517aeab92d1cf534",
            "ff9df51942af402a",
            "8b37983f13e60a5d",
            "afd43ed992b75b2e",
            "99de14425a992694",
            "05c0e6f1b19825e3"
        ],
        "x": 44,
        "y": 459,
        "w": 1642,
        "h": 202
    },
    {
        "id": "ce76bc547c1a82fe",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "14fd7bd19dcbd822",
            "ebaa82cd07fe202e",
            "8103ddc7aa8148a5",
            "ddc6d3b003a8a708",
            "c68ca43737e3afd3",
            "f855b6351fa8677f",
            "d8f4e316d1f97e7c",
            "98816bd9b74d4eb9",
            "ba532fba28791e9a",
            "596ed20368d22575",
            "5f31d440f7140521",
            "570c99c5addac9f2",
            "e98781f4d949c827",
            "e40ac389d1f41902",
            "2ece615c2b13df72",
            "6264233b1a16943c",
            "519d5dd7e0baa622",
            "c9c8a55bfc345060",
            "1e24bbaf141fcbbb"
        ],
        "x": 44,
        "y": 999,
        "w": 1542,
        "h": 282
    },
    {
        "id": "fd942685049f2a2a",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a4819f2ac0278e60",
            "74736a8b3f8aa8c4",
            "1b1b9a0c2fc17b97",
            "da16e3cf9032d134",
            "b560c98ad6781ae1",
            "f285cf3109419bbe",
            "135730bb62fe93ed",
            "a2f665fbd87176f1",
            "7767f5a781a34294",
            "72917536637091f7",
            "1bfaa5020382981a",
            "fd39b5f40a5466e5"
        ],
        "x": 54,
        "y": 79,
        "w": 1012,
        "h": 342
    },
    {
        "id": "73465d896b75a003",
        "type": "group",
        "z": "c98479901d9e9b95",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a4cde71b52a9ef20",
            "db643989eb6fd176",
            "b310cfd8ddd31c00",
            "58519c213a7f5f5a",
            "21882ae1acd70ff2",
            "36365d0ca790f463"
        ],
        "x": 34,
        "y": 799,
        "w": 912,
        "h": 182
    },
    {
        "id": "0bd7c6a05fec8e32",
        "type": "group",
        "z": "01bb3059fc08565d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4f41d41ee83aa6b4",
            "c3a334e5f6423d0e",
            "1f545552c4cdec0e",
            "1aeacf026d672ef6",
            "9ea82e46bbb474ec",
            "a19c837ad4e696df",
            "326fcab0bd8dc6bf",
            "f6b3a5a457ec15d7",
            "581038513876f866",
            "6f0bf6534965f587"
        ],
        "x": 34,
        "y": 439,
        "w": 892,
        "h": 282
    },
    {
        "id": "1898c16223ea88ea",
        "type": "group",
        "z": "01bb3059fc08565d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d2c0ad086e181908",
            "328284d6746e3a1b",
            "ae927ebb0636aba9",
            "15a32a89145b5edd",
            "08592d08724757d9",
            "c962bc8e9e9ea4e4",
            "f73a859e799483a9",
            "45bfbb5076e745f8",
            "e62b31aae00b8535",
            "acec8daf85dc23fe",
            "422063b50a6c71c4"
        ],
        "x": 34,
        "y": 99,
        "w": 932,
        "h": 282
    },
    {
        "id": "6060336732b76733",
        "type": "group",
        "z": "01bb3059fc08565d",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "1c8d52dc82e34ace",
            "bccc7e7eb7b3fbd1",
            "7a34cae2444eaeb5",
            "8fb2ea515478697a",
            "15af2bce890a94a9",
            "ac6b5b6ef8fb49b4",
            "dec8892eae27f937",
            "402dabd67e050964",
            "bc1fec0a3b9e19fa",
            "a32df7934f2f7d5c",
            "d36a51f07a52abc3",
            "ff921d62aaaa9b18",
            "cc0c4ab3a7a55930",
            "80ac82dcf60b219b",
            "873c9acca903bcab",
            "db468ab2866442ad",
            "c4a0097bf01382b0",
            "7878c13206b72e35",
            "f81eb83b2bcee90c",
            "8b38d586a642782a",
            "df9cd569a43e426b",
            "3a6991a4927476c1",
            "1a95acdff02ab213",
            "9f7e741cb944e101",
            "e9b9b895fb84b45f"
        ],
        "x": 34,
        "y": 759,
        "w": 1792,
        "h": 642
    },
    {
        "id": "7d4587540a2c8610",
        "type": "group",
        "z": "8436fe1a449a7297",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2444a4409e75f27f",
            "b71d539f58e7dd19",
            "731e19687a0d03c7",
            "9cfe6fbdaa957b93",
            "60402cd7e995d83c",
            "c766752a5b2323da",
            "01d0b27220dd17fd",
            "90048689613f79ce",
            "0a43e71004f067ba",
            "214930c6cfe1deae",
            "a36e29b0d3474fe6",
            "cf7c82521c4f344b",
            "fac8368732c8873e"
        ],
        "x": 134,
        "y": 519,
        "w": 1232,
        "h": 322
    },
    {
        "id": "bdf338825a745484",
        "type": "group",
        "z": "8436fe1a449a7297",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "400d8b1d02aa7132",
            "685e2ce6255c4888",
            "a44ddd7f28361bba",
            "f73238c7fe7374c7",
            "c53ac1b1ca0a5db4",
            "7b5cfbcf6a0e3f56",
            "9000d874e5477995",
            "22c3c138b89ecb4f",
            "82e72b5056fab3c7",
            "4e482c5861f36862",
            "50e71062bd312459",
            "770459b346fe2747",
            "4ebd94f2f25892f8"
        ],
        "x": 154,
        "y": 199,
        "w": 1692,
        "h": 302
    },
    {
        "id": "108f2ffe217f63da",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1ddc986150f81f61",
            "7856ed62352954d2",
            "69afe7af16898732"
        ],
        "x": 204,
        "y": 109,
        "w": 402,
        "h": 82
    },
    {
        "id": "5b75673458d774a7",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "9c81f956a6d89063",
            "f7cdcf2f0edd64b4",
            "815c2ae98d00c5bf",
            "a48717c13f51d78a",
            "6c9a90593a3d872f",
            "756712d785c49001",
            "660b73c8caa85f7d",
            "5790442c0ce9fe2b",
            "8ee71b06f782ddeb",
            "a9151f608e0cb721",
            "576e760d3ceae24b",
            "d42c8ff5881498e4",
            "1bd2620d8e18327a",
            "0da86f6b93c80314",
            "16d1f410e64887fb",
            "3ad7633f50f04d77",
            "e14d384df9717c5e",
            "4a2250cf6b38dbd5",
            "0d109ce5201c7170"
        ],
        "x": 4,
        "y": 239,
        "w": 1652,
        "h": 502
    },
    {
        "id": "92d86d0b5bb6ae36",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "7ea64fbbc371f08c",
            "559aeaa67c1aa68c",
            "af2a7bc3c4a7ffdd",
            "3826e280e67e472b",
            "3c55b92814464393",
            "18ea68b8cd0f85bd",
            "91c614bf350e0eea",
            "498e2acdd7a96bbb",
            "a9fc6d601a039a65",
            "06a609fd9d1ff22f",
            "3d931c21cf043166",
            "35dd0b33ed7f996c",
            "c34224106512ce20",
            "c8a7c02d48b81dc9",
            "3bafb5c1d6a57de8",
            "785b19eb945c2f82"
        ],
        "x": 44,
        "y": 769,
        "w": 1712,
        "h": 462
    },
    {
        "id": "167f4d272f155624",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8c01d939eb123f5a",
            "a5bcf342b35175ca",
            "84f6b5a28bab6643",
            "89ad0a2a79add44f",
            "0bf3e30ba3e4b060",
            "3e29b77e3521d84e",
            "8d8bacc664ddc537",
            "ad60f36acc269401",
            "222965ddb0e09195",
            "2f847f3ed271a069"
        ],
        "x": 44,
        "y": 229,
        "w": 1612,
        "h": 142
    },
    {
        "id": "c80683f7b8cf0f73",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0e65efccab73ad96",
            "09573dbd4c0cb283",
            "1957f1b821b1f4f1",
            "710f012436a1ab22",
            "15155f40f5b91522",
            "e8585defc8d09159"
        ],
        "x": 44,
        "y": 599,
        "w": 842,
        "h": 182
    },
    {
        "id": "fbf5966f1914eea8",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f68b4c2669c7b292",
            "1343bc142841a4e4",
            "4dda1622c9781aad",
            "cb3c99cb363b481e",
            "9fa0ab1867412ac8",
            "83b889e0e475c165",
            "7c742ff9435814d7",
            "b0fc70906e1e758d",
            "b0ae507329500bc1",
            "e545fad3eafd4bb2"
        ],
        "x": 44,
        "y": 789,
        "w": 1522,
        "h": 182
    },
    {
        "id": "5e45d235ed7ac2ab",
        "type": "group",
        "z": "3179678ca8b98244",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cc380e03303b4af4",
            "c171daf381137d01",
            "18cfd7297ceb0607",
            "087b5529bb1658bd",
            "2fb08d96857c7418",
            "bd3178b47aab36b8"
        ],
        "x": 114,
        "y": 39,
        "w": 822,
        "h": 122
    },
    {
        "id": "87d43c6fb5912917",
        "type": "group",
        "z": "3179678ca8b98244",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d1c7499ec2ea68a6",
            "61d8f26479170d8b",
            "842d030b57279da7",
            "982a57164fc3bc83",
            "a26db93e9a990c25",
            "c1e488d820c2ae1a",
            "f0c631f9dcd83c72",
            "3a2246370c17d5ae"
        ],
        "x": 134,
        "y": 179,
        "w": 1222,
        "h": 152
    },
    {
        "id": "a5e0ee44f2fb8456",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7924c40ccd5e027d",
            "5d657f0f443bca62",
            "326b7025dfe0b336",
            "3906d1cee2d6724b",
            "019be7c744de779e"
        ],
        "x": 54,
        "y": 9,
        "w": 772,
        "h": 122
    },
    {
        "id": "68643bb6b5be193f",
        "type": "group",
        "z": "5b2ae23bfd497a94",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "beeaf6c300562766",
            "8ee4e16f7af8eb35",
            "9df4f7571e38ba9e",
            "2401222dd1c72698",
            "79fbda80b82610b8"
        ],
        "x": 54,
        "y": 1239,
        "w": 542,
        "h": 122
    },
    {
        "id": "8f53555fb01c63d0",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fe7f1fd6938b9b86",
            "2e4ad7cfa8663c77",
            "6b1db2938b49fc97",
            "c08a4b7860d81ea4",
            "c2d2d091215c03b5",
            "0fd6fe89414c30de"
        ],
        "x": 64,
        "y": 549,
        "w": 702,
        "h": 142
    },
    {
        "id": "24904440bd5e033d",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f93ef21edcdbfe77",
            "9114887d0e7b9eb5",
            "5699609978be02fc",
            "243ead1bc779db84",
            "ea8abe837b06040d",
            "8adf75c55d4276ff",
            "ebf9b753c0db2888",
            "583958b872d4e043",
            "cd7c7b47e6c79aac",
            "7e0182e4bfdda21d",
            "42c544e9b157280e",
            "3c7137841de56924",
            "d7394d56848f5e93",
            "c73e20343dadb802",
            "d974a20cfb396a46",
            "5f0053ed46ed42e2"
        ],
        "x": 34,
        "y": 439,
        "w": 1302,
        "h": 202
    },
    {
        "id": "f1b021d67d3aeb12",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4facfe6a2109a10a",
            "a0921c0d0fcc767d",
            "3bffe1838e90f37e",
            "b46fa05d17aefc16",
            "393a942627e4317d",
            "26b3917c8dd7e461"
        ],
        "x": 44,
        "y": 49,
        "w": 682,
        "h": 152
    },
    {
        "id": "69a8c850b940485b",
        "type": "group",
        "z": "17803f695ab8af0d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4532ac7f0859e986",
            "c75e104d9b1606e8",
            "c6600975483aa103",
            "5ac2beb0bfc134c6",
            "6268b9dbdf76f010",
            "6742c93f2b2198d3",
            "8da1e5726ef27a97",
            "dd46605ec969997f",
            "1aaad88f0896c456",
            "c7610deb9c793f2b",
            "7980b367fb9566ad"
        ],
        "x": 44,
        "y": 399,
        "w": 1142,
        "h": 182
    },
    {
        "id": "c7a67d413d6b7731",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4f184f848d4cf740",
            "dd81d2e8b3a0179d",
            "4e36532310976efb",
            "bf9de75c1d34fac8",
            "f3f8ebe822bf26c4",
            "0995b23b70969aaf",
            "84924e6e0470a11f",
            "e09ad973954473b9",
            "b2ad742b7f3c7e3e",
            "a971d69137c421cb",
            "1953c0e70b2aba3b",
            "c8522c19b9137229",
            "c4cb9dda0b66fa19",
            "b30693a96214840f",
            "1f2c60ebec88d9b4",
            "c64ea4addeb56552",
            "9b05a8eec3171753"
        ],
        "x": 34,
        "y": 239,
        "w": 1202,
        "h": 192
    },
    {
        "id": "2d127e1eaf3e467e",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9742d94b378f408a",
            "0e749228f66d19be",
            "bcc8ae3226885dad",
            "5e5579a90a0eec10",
            "117d1b3c16173e4c",
            "a1bd186d52d5cacc",
            "1b8dd17010af6ca6",
            "3441e14e765a31c9",
            "367a664259a1e4ce",
            "e50bac451dbfc007",
            "bd183366d7e0c8f1",
            "be3a674f2b228bc0",
            "5eb1fbf2a53ee55b",
            "a0da0d36311e3c37",
            "81ed5fa227580ffc",
            "29e2e0e619900f52"
        ],
        "x": 34,
        "y": 659,
        "w": 1272,
        "h": 202
    },
    {
        "id": "58b0549190818c1b",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ccc41aa1d5389d96",
            "2a6619051dde8322",
            "fc29ac2694918cc2",
            "a929dd4877a854c6",
            "158a3e9de0180018",
            "9159f1a71b9a15b9",
            "b6423a72fb5054ac",
            "fd7be0bc412501bc",
            "e396f198e6579e3d",
            "70393404e17b9443",
            "5647e814423e8bd3",
            "d7acf2ceaf30b571",
            "187cc24b8dbebcd2",
            "6891f57e5aae2321",
            "3499bad52a1448be",
            "9b1c3271ddd8c9d5",
            "6021a56577228627"
        ],
        "x": 34,
        "y": 859,
        "w": 1272,
        "h": 212
    },
    {
        "id": "5ea72d766d893c6d",
        "type": "group",
        "z": "407e1a0c9ab51943",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "04e72e5f4ec91246",
            "7eed762f4e3f6193",
            "88986fc37ad192db",
            "06a4b0d5322eda83",
            "9d8294e76b3b08e1",
            "54136bce38894be8"
        ],
        "x": 94,
        "y": 679,
        "w": 912,
        "h": 182
    },
    {
        "id": "623651476803831e",
        "type": "group",
        "z": "407e1a0c9ab51943",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2f4feb7b21a1313",
            "eaec09464da207b0",
            "b9db5cfef88ec62a",
            "811c740404e23a0a",
            "e85ed9bf3b3d4d58",
            "a1a3b78eb3bd1b85"
        ],
        "x": 94,
        "y": 489,
        "w": 842,
        "h": 182
    },
    {
        "id": "08eeb7ef81fd0b35",
        "type": "group",
        "z": "407e1a0c9ab51943",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eb168f58f0bd3ecd",
            "e6c8c08dc2b5095c",
            "b22edceb0d4cb1f8",
            "af807ab8af8e751e",
            "6ee0bf5b102aeb17",
            "46ff991c56b6b9bc",
            "aa53b956aec822c9"
        ],
        "x": 94,
        "y": 279,
        "w": 872,
        "h": 192
    },
    {
        "id": "36baab9c434a7c9f",
        "type": "group",
        "z": "407e1a0c9ab51943",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "827dcc80c9d3666e",
            "f9ac06d81e8e4515",
            "8f58190b0c42e00e",
            "0908b919782b07dc",
            "e698d705d59bcb96",
            "e24717d7cd0dc85e",
            "6dadc790adc81a53",
            "9604d49a521fd5a8",
            "4f17cb55e00acae7",
            "b3bf129809ba23dc",
            "b9868c07d7d275b5",
            "0aa4836c21ad06a1"
        ],
        "x": 94,
        "y": 109,
        "w": 1612,
        "h": 152
    },
    {
        "id": "a79837f72a1b5d49",
        "type": "group",
        "z": "f80e2a714bd438bd",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6db83e3d0c5c7554",
            "a02c15375f73a691",
            "f240d42321eb272f",
            "18c871d56049234c",
            "c2649c7d54b9c708",
            "36be859ccfe3d4b5"
        ],
        "x": 154,
        "y": 169,
        "w": 1092,
        "h": 222
    },
    {
        "id": "2817b92c6ba6251d",
        "type": "group",
        "z": "4a994836a6392703",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2c183b2c9d370a4",
            "d99da5c764952d30",
            "9f49cd0452209994",
            "2ddf5f9abb4d2bff",
            "7f8114e04290d140"
        ],
        "x": 84,
        "y": 79,
        "w": 772,
        "h": 122
    },
    {
        "id": "4ffcfc17d9807587",
        "type": "group",
        "z": "4a994836a6392703",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4118875c7f82f83b",
            "b35aeea817a34da1",
            "4449edd9439843a8",
            "d2599882a497a316",
            "5cab40d488b8ed67",
            "e0b5b2e8ae455ae7",
            "b071bb445e7d186c",
            "23327e292123f24b",
            "700c657d22d0cacb"
        ],
        "x": 74,
        "y": 279,
        "w": 972,
        "h": 162
    },
    {
        "id": "04be4bbb805f6483",
        "type": "group",
        "z": "4a994836a6392703",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d3126e2db3130484",
            "b525e6871c7e5d79",
            "694f397723177783",
            "de56bd29c6e3434b",
            "56622741fabbdf31",
            "e771463ed8140dd9",
            "87743355ad736859",
            "18ef2cd7a375fa85"
        ],
        "x": 74,
        "y": 529,
        "w": 692,
        "h": 162
    },
    {
        "id": "88e40feae09cb4d7",
        "type": "group",
        "z": "2edf95049d03fe02",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "c8c9d4575946d7d9",
            "c8f5e470ee1a4ab9",
            "dd57b90e298b4119",
            "68472188d30b4e5e",
            "4fe26556de5f8fc1",
            "2a70d2ce7afd5fb7",
            "1b10eb3ceb06f325",
            "8226c7a9619f82f3",
            "89547ef5d2693443"
        ],
        "x": 34,
        "y": 179,
        "w": 1752,
        "h": 192
    },
    {
        "id": "f3713ffc90b82f1b",
        "type": "group",
        "z": "2edf95049d03fe02",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "bd5863f279d8acbe",
            "d4916d0c55f34b57",
            "78a520e94ecac894",
            "ade37fd3d6884a0d",
            "4500df576b032b37",
            "96c8a7c233cc7b29",
            "931f640414d07621",
            "d3ae7c1a110ecf05",
            "e6ef8bb4aeec3bf0",
            "742e24344cd1cbad"
        ],
        "x": 24,
        "y": 399,
        "w": 1782,
        "h": 142
    },
    {
        "id": "7819cc31128657b2",
        "type": "group",
        "z": "2edf95049d03fe02",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "01cf3ea9ee41d1a8",
            "7897ab6d6c5e4f57",
            "2f17c1d0853dcd5f",
            "9e550fb64304ba19",
            "7a1a8ddb1e6d9651",
            "3370eb434dc8c65e"
        ],
        "x": 34,
        "y": 569,
        "w": 542,
        "h": 162
    },
    {
        "id": "c61dc7b72c1cb6c1",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e5707922a5aba9e7",
            "67a746b11685e2a7",
            "62bb6c30d098a456",
            "7aed8d10b28ca4b8",
            "bb0a944e914f3093",
            "bc7aa20cdf0da3ef",
            "bcf8421640cf49c5",
            "feef0e255128d3d6",
            "8e7bc49537739b2e",
            "f862e3da37008126",
            "8075d22e253b4e13",
            "0b7bab7758d0f053",
            "719ddd38f8a4efc3",
            "5876f658b7bd127b",
            "32d473cb825d6220",
            "7dc18f431e0de57e",
            "6598f640ed63229d",
            "4018fd9e05cef24d"
        ],
        "x": 24,
        "y": 1849,
        "w": 1222,
        "h": 182
    },
    {
        "id": "eaea8916b86f0291",
        "type": "group",
        "z": "ccc4f9f8e6f67860",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e0921e81eae9d87e",
            "17dd36a28748d550",
            "c019cf85a425d802",
            "e009ad2aec34e52c",
            "54a380c993027735",
            "4ea56a7a8dbf06b7",
            "204e4c7a5d7cfd6a",
            "bc4ee7273c6618a5",
            "b3dc7d48ef8f59be",
            "73d422ceef763272",
            "bca32c9a073479ad",
            "9944ab08c6ca5fc1",
            "b477db32229842ee",
            "47adbb736dc97325",
            "d5b550e7fece540d",
            "c5f4bb91d823838c",
            "7230b70e1a88d898",
            "75778646aef5f360",
            "bf4f82484a5f3bce",
            "f235bf4213131a7c",
            "cffd02da26061153"
        ],
        "x": 194,
        "y": 79,
        "w": 1642,
        "h": 502
    },
    {
        "id": "a49dbe2ba93bc9f7",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fa7a75c7734fa67c",
            "358d0fba9413ea32",
            "f1ac2bb4123070d2",
            "74f34ff289a840e0"
        ],
        "x": 34,
        "y": 1259,
        "w": 642,
        "h": 132
    },
    {
        "id": "7fa9daa49aea977c",
        "type": "group",
        "z": "5d0772e7b4d40c7d",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "013efbbba054d98c",
            "8ae4765a8c923539",
            "9ac01bd32ff7edcd",
            "18f417bd7132171d",
            "c166e897452ea0a2",
            "fa471c42192040e0",
            "2a0c3264649da094",
            "c3768f8361071b0c",
            "9b2c68f26c2623e0",
            "1f56c8919c07a708",
            "eb331c8c32deaa1d",
            "3b388fa9be5fa075"
        ],
        "x": 104,
        "y": 159,
        "w": 1382,
        "h": 312
    },
    {
        "id": "a349a564e122784c",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1dfb5c135fbec4e2",
            "622a25d6c2eb4419",
            "6ce70b3c30648697"
        ],
        "x": 34,
        "y": 1409,
        "w": 562,
        "h": 112
    },
    {
        "id": "0d2e94a9e1ef7022",
        "type": "group",
        "z": "dd21aeba43582ce3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7807e8f98cd6f630",
            "559e4ee976f9d343",
            "567c79d6b0c53b04",
            "7afd481b9d48fcd1",
            "dcee01621bfab79c",
            "e7ee5385f8de97fd",
            "d57ff27416a49126",
            "27207b995aeb64f2",
            "da0f70f519dcd91d",
            "108d9b74615d318f",
            "ac2f27697587c30c",
            "1bb6c13a48aa8276"
        ],
        "x": 624,
        "y": 189,
        "w": 1382,
        "h": 302
    },
    {
        "id": "825b36caf3e60296",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "18db56f1c849e7f3",
            "1bcd5e4157520214",
            "68d3e0b4e82830a2",
            "413faa702679ebe5",
            "12353e3dbc62620e"
        ],
        "x": 24,
        "y": 1549,
        "w": 762,
        "h": 122
    },
    {
        "id": "67a2890d02f58176",
        "type": "group",
        "z": "ddcc1ea5734e68f3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2343dcde078c0de1",
            "dcf5c52429103c36",
            "75c8c70a80585425",
            "263393d0dfbf5305",
            "94608eb23ce1fc19",
            "f54c264a9d99416a",
            "dee9a999c0a00e11",
            "402d0d012bdfafb2",
            "820212a268fdfe83",
            "ab0ff447a64f012c",
            "c9ddde8853d8daca",
            "f00d65ed85189650"
        ],
        "x": 114,
        "y": 119,
        "w": 1652,
        "h": 302
    },
    {
        "id": "d098266a21ed6898",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c937a0e91548200a",
            "1d23ef183e2aa3ca",
            "48f397e1e0034dc3",
            "6e4e7585c77d4b99",
            "2557673fb7283910"
        ],
        "x": 24,
        "y": 1689,
        "w": 782,
        "h": 132
    },
    {
        "id": "4b9d29631a6a83c4",
        "type": "group",
        "z": "c1457f7fe69a15e3",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3d527ebf2f5da739",
            "0caee4a797e8b576",
            "991e7900be59744c",
            "f5eb9f583ee3fb82",
            "900d035c135ff04b",
            "75415a36ecb9e79f",
            "20f3445faca4ac8a",
            "c7a70b5ef0d64f36",
            "5c1e73838ceb54c7",
            "f97804e429fcda6d",
            "1dbc5ab823d969f0",
            "845afc77ec50a148",
            "1ffb1393454fad27",
            "8807175d7ec7a39c",
            "f75c6ee39c5ae12d",
            "4af6ca01524958dc",
            "2d2984fa699fe0d4",
            "5e741f11bda748d9",
            "e15a9f5e56dd1762",
            "48f5877bd292bee0",
            "92454af63018d947"
        ],
        "x": 164,
        "y": 169,
        "w": 1642,
        "h": 452
    },
    {
        "id": "1416aa57eea7f6ab",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "731cb016cad40634",
            "d29854e26c303893",
            "26ce8c092a5b0ff4",
            "cb4559f120fed806",
            "312985ed4dd627a8",
            "6d34ab8d4702b766",
            "8227d40cf18cf315",
            "53d1f2772ce53521",
            "317c30fd5918ecbf",
            "af5816b80d17c368"
        ],
        "x": 804,
        "y": 1319,
        "w": 752,
        "h": 272
    },
    {
        "id": "a260dd7ead858d39",
        "type": "group",
        "z": "19476c64dff52355",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "ff811ca4c29d6655",
            "a1d34f3b1faac279",
            "6eee1db3b92634ae",
            "eb7d82aeea335f8a",
            "81635a958b45d037",
            "2d6789fff4bdf3f1"
        ],
        "x": 474,
        "y": 109,
        "w": 1042,
        "h": 152
    },
    {
        "id": "571b024112261756",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1094ec5aea408f67",
            "2b28f7bd7aae9dd0",
            "677ce43385e07bc3",
            "77fbc1ac328ebe09",
            "f73144f74bfd4c1c",
            "e03e71997ef080b0",
            "57feddc30d95aa24",
            "effe8b59792f8ed5",
            "215dc845a4f42499",
            "af6e70f72b00ae82",
            "4b1517ac8c95b1f1",
            "8de10c6ea1223e85",
            "dc6d71cb34ef086c",
            "d2e79db1b4822d04"
        ],
        "x": 34,
        "y": 2189,
        "w": 1272,
        "h": 202
    },
    {
        "id": "0ade6e9b8e25f5a2",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cce8f946aa3f45d9",
            "6d3ab5afe316e058",
            "659798a6d80fb00a",
            "2cccaae036a25b9b",
            "c68136d45539bedd",
            "4f378fca2f4fd15c",
            "e47f8c49f8f6c022",
            "0d0ad8239df80579",
            "cc8d5118bd29b498",
            "1826ee9bcabfc964",
            "d5a070459c17282b",
            "8afa6b7e3ad6423f",
            "d74caaec6d92d640",
            "9b0d5a4ffef20246",
            "7bfe053cda25a1df",
            "c08e5046461d6e3f",
            "7213500630533c17"
        ],
        "x": 34,
        "y": 39,
        "w": 1222,
        "h": 192
    },
    {
        "id": "4370a35114295e81",
        "type": "group",
        "z": "bf7e6ed2256e3a44",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a209aa097313b145",
            "b8d8a2600d07733f",
            "4958f6ff314c62cc",
            "3049a7107f25c59d",
            "58392219b3f9c2aa",
            "f1ac5c0632527d2c",
            "f28bc80528e3b4c5",
            "e9ee95d4490298d6",
            "f0d171c22281ef56",
            "3cd79d877477ffd7",
            "b66d1938ee5b83ee",
            "3274dca64fd42307",
            "0521086704c8473a",
            "7b05a3288c3c0c62",
            "65a1a05d70b78cc0"
        ],
        "x": 54,
        "y": 159,
        "w": 1142,
        "h": 302
    },
    {
        "id": "94df2c76b014e91a",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "06188f4d04df993c",
            "d53603cc58737a8c",
            "84aa2bd75f6182c5",
            "acde09f1a34fecf2",
            "b41c1dd8f734d83e",
            "7cc1fb2b36ec1359"
        ],
        "x": 24,
        "y": 2029,
        "w": 762,
        "h": 142
    },
    {
        "id": "a5d0bd7e0538715e",
        "type": "group",
        "z": "9ef239d14888af27",
        "name": "",
        "style": {
            "label": true
        },
        "nodes": [
            "0858b95ba622a39f",
            "4bc00aa89bca27d9",
            "2b1d22185f323dd2",
            "c5f27ce0338c31b5",
            "3dce7a533d1cf6d0",
            "66acd97ca597c47c",
            "5d0f3d48f430aaba",
            "2ca966aede7939dc",
            "2ab892472c31a362",
            "020a7c06aee57295",
            "283d31b81ea43379",
            "92df67b1a91e36aa",
            "3e80d5367a18bb0c",
            "f98613779e1b1fa8",
            "4502f908659e379c",
            "209f8283ffcca544",
            "29ff395eec903b96",
            "5a0258fea29e4d08",
            "c75810f63ff5f8b0",
            "0bb745620aed0c74",
            "5b05ac44432206bd",
            "c9ae78118c25c668",
            "6a9947be10b41dfa",
            "289a0bef95410df6",
            "260e396473311b1b",
            "3fdde4abc487fc2e",
            "b9761f83fc9e8ce6",
            "5738e6743dd0dc6d",
            "fe3a431b5793db6a",
            "7575473c6d2c8a74",
            "7ccf586cbdc8fab7",
            "3e11708962d48809"
        ],
        "x": 94,
        "y": 59,
        "w": 2082,
        "h": 512
    },
    {
        "id": "16904a16559010b8",
        "type": "group",
        "z": "22db7f4bcd69fa91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bfdf8f915f026d47",
            "d6ddde0b93070b47",
            "b3c654be09303b9e",
            "3c31cc01726692c3",
            "0ac2fe8fcf829a7a",
            "2103dec4beb68d4d",
            "8265d91efa1a2756",
            "ddce7cc3bca0ba25",
            "20bcba265930f94d",
            "07716291db05c331",
            "a4711bab3ea1879d",
            "5589b04f38728c49",
            "a12fbeca8d48c4fd",
            "87264891355ecce4",
            "2ff4a82706066c13",
            "a69839ab8ac45c50",
            "842e15337c9e6e7b"
        ],
        "x": 54,
        "y": -11,
        "w": 1422,
        "h": 292
    },
    {
        "id": "d10910f84c58e11b",
        "type": "group",
        "z": "22db7f4bcd69fa91",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5f2cc383fa444deb",
            "03567b0df0d469f1",
            "16406d8afb15ea70",
            "fb613f7945c328e1",
            "dbc2a2cbedbb530d",
            "1eec4bda321f76c4",
            "4f3e3fca3f7026f9",
            "104d78fa434adde3",
            "596a2a2f7ed22c37",
            "43b2a3c1ac8177cc",
            "e53607234fb31c5a",
            "f627ce5dc4312efe",
            "707bdeac3499fbdb",
            "d74c29549fb8ac47",
            "4d96959c13e58a44",
            "ce3a6305846b1400",
            "7b114eb4805baccf",
            "63ad62e1bd71e6b9"
        ],
        "x": 154,
        "y": 329,
        "w": 1452,
        "h": 462
    },
    {
        "id": "7f0d10fd6c405ddc",
        "type": "group",
        "z": "9a81aa788c97846f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3386111447866c45",
            "3005911c94bfd092",
            "28fb3eda907bf994",
            "8b454a70eb94f7bc",
            "0dc9b34aee71e639",
            "906aefec5b39222b",
            "cfc270f826c8b3d1",
            "fecffdc39a544257",
            "b2eb188d27c2a8a8",
            "4692d5c85e8e0950",
            "af023af94181b884",
            "55619b73c7a1b9f0",
            "1e9abc41fc7c6d3d",
            "ed885f427ff9e190",
            "e37265fa75804079",
            "d96c6fc73b0fab89"
        ],
        "x": 54,
        "y": -11,
        "w": 1592,
        "h": 352
    },
    {
        "id": "ce0d6a43298d2e6c",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3f7b0deda8be60c5",
            "c3de0b931351a718",
            "ecf33d932f8d832b",
            "ba6a36f0cf73392f",
            "251a3b0ef5a3d794",
            "507f29be63bfca14",
            "812e303095ba860b",
            "147e3751e0b23391",
            "45a0b09aa4ae1c9f"
        ],
        "x": 804,
        "y": 1109,
        "w": 772,
        "h": 202
    },
    {
        "id": "a9dbbc0277cd0bc2",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "b1523bf64ec4d717",
            "f01ca43ac70b7252",
            "135e31a417368a81"
        ],
        "x": 824,
        "y": 1599,
        "w": 662,
        "h": 122
    },
    {
        "id": "a4c5260a2239eb4a",
        "type": "group",
        "z": "9a81aa788c97846f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "684dc9db1dd3463a",
            "36f4ad3b8d30e7d9",
            "85729c6b5003de2d",
            "2958c6d8acacb567",
            "40c425937dc52dc6",
            "75345cb3b7d99b7a",
            "7dd8c854a74e3b3e",
            "eb4c99d365e1a4ff",
            "df76bf9bd31a8555",
            "4fc18c5de7776a03",
            "af1e1d2d7e89fa74",
            "dc9dd4f28bcfe149",
            "f7e622e545fa9b76",
            "55fbd934494ddc31",
            "d4200f42526d143e",
            "593718fd5412c8f3",
            "f14f4cf4c8fa0da2"
        ],
        "x": 244,
        "y": 399,
        "w": 1292,
        "h": 352
    },
    {
        "id": "675f92b94f331e80",
        "type": "group",
        "z": "97e7314f695bb652",
        "name": "",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#ffff00"
        },
        "nodes": [
            "40aa1efad85fb3aa",
            "17a24e5ae07dbd76",
            "ec56fac55b0af0ed",
            "936f8ef1fc39c3a6",
            "652d286d6f851a2f",
            "6b711bb422e116d0",
            "a619d5bb3a69a1ca",
            "055cbaa40e76a1a8",
            "6e5194dbe9d9a12b"
        ],
        "x": 834,
        "y": 1719,
        "w": 1262,
        "h": 122
    },
    {
        "id": "549a4dca03d0fc64",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a006333aa90bf58b",
            "f7b7bd98b919958c",
            "89ec2f16c612017d"
        ],
        "x": 44,
        "y": 1089,
        "w": 702,
        "h": 112
    },
    {
        "id": "ea9c9fb8ccb11447",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f88158f49c3e1064",
            "ea62db1fcb4f3811",
            "b80f5d655852566a"
        ],
        "x": 1514,
        "y": 1589,
        "w": 722,
        "h": 122
    },
    {
        "id": "b33aae025374f94d",
        "type": "group",
        "z": "94eb378f85b6e7bb",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c1d40b0f288918f2",
            "a9279d25dd0a8024",
            "ee92fcd4f3c9ef3c",
            "023e8a9b8c3ad734",
            "19589be1e18a1e3a",
            "3462c309e5607db8",
            "41b76320066d73df",
            "2330a0a502eb1116",
            "ed7ea79cc147fa26"
        ],
        "x": 524,
        "y": 139,
        "w": 982,
        "h": 425
    },
    {
        "id": "c72f133eaa3905d6",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3e00bb71bc4a0e6c",
            "8e78f02623be842b",
            "b9bdb77b68d2d1b3"
        ],
        "x": 1574,
        "y": 1429,
        "w": 482,
        "h": 142
    },
    {
        "id": "7fd394ef736b1dfd",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e06673041ac0a0bc",
            "8fe4b2f331149b51",
            "f092fb285ff94d6d"
        ],
        "x": 1584,
        "y": 1269,
        "w": 542,
        "h": 142
    },
    {
        "id": "d8d382cb55ab08da",
        "type": "group",
        "z": "97e7314f695bb652",
        "name": "Netsis Araç Şablon",
        "style": {
            "label": true
        },
        "nodes": [
            "986164bcecd04e30",
            "39bd27eda8f27c6e",
            "98a567ff315446f8",
            "21c1e70f264c1dd1",
            "9f40c5736908d48c"
        ],
        "x": 1604,
        "y": 1089,
        "w": 592,
        "h": 182
    },
    {
        "id": "6cb1da64a6630ec0",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cf11334523e158c8",
            "00577bddccab486f",
            "0909a2ebf59b0580"
        ],
        "x": 1604,
        "y": 939,
        "w": 572,
        "h": 132
    },
    {
        "id": "fbd838edef29f218",
        "type": "group",
        "z": "97e7314f695bb652",
        "name": "Shipping_Vehicles_Detail",
        "style": {
            "label": true
        },
        "nodes": [
            "f758928db9cd4a5d",
            "a0fab05470bac30b",
            "2a2677384e16a136",
            "8bb27c8c851f677d",
            "633e779c8162ac66",
            "2e9552a344cd474c"
        ],
        "x": 1394,
        "y": 779,
        "w": 952,
        "h": 152
    },
    {
        "id": "2c9e0b2ace361a57",
        "type": "group",
        "z": "97e7314f695bb652",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7823206bd2fc3dc4",
            "79398adc4659539e",
            "35964d7c748b3480",
            "145d7e3ee1a6c8fd",
            "ae4186b82be82e39",
            "45dbaf1bc347449c",
            "355c1c80f6fb97d9"
        ],
        "x": 1484,
        "y": 599,
        "w": 982,
        "h": 182
    },
    {
        "id": "88bae8cb99425734",
        "type": "group",
        "z": "97e7314f695bb652",
        "name": "Tekara Yazıcıya gönder",
        "style": {
            "label": true
        },
        "nodes": [
            "0f13199d5a1a4fb0",
            "51b2d902da657c23",
            "57b7457cce0cd571",
            "c0d8b3a5b8edc27f",
            "8a3376313de784b0",
            "42ac81a8f619ef5c",
            "adb88c604793231e",
            "2704ee50c02d887b",
            "2ff03ea4ac72a0c2",
            "d71d446575b87df4"
        ],
        "x": 1474,
        "y": 349,
        "w": 932,
        "h": 192
    },
    {
        "id": "873c9acca903bcab",
        "type": "junction",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "x": 120,
        "y": 860,
        "wires": [
            [
                "bccc7e7eb7b3fbd1",
                "9f7e741cb944e101"
            ]
        ]
    },
    {
        "id": "576e760d3ceae24b",
        "type": "junction",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "1bd2620d8e18327a",
                "3ad7633f50f04d77"
            ]
        ]
    },
    {
        "id": "58028b978f2ec8ca",
        "type": "junction",
        "z": "a0444666d3c69ec9",
        "x": 410,
        "y": 150,
        "wires": [
            [
                "9abd6b0225d6ae52"
            ]
        ]
    },
    {
        "id": "010c1053c884cfa6",
        "type": "junction",
        "z": "a0444666d3c69ec9",
        "x": 950,
        "y": 110,
        "wires": [
            [
                "58028b978f2ec8ca"
            ]
        ]
    },
    {
        "id": "6e25e13e3f11bb4c",
        "type": "junction",
        "z": "5608c41bb386c85b",
        "x": 550,
        "y": 120,
        "wires": [
            [
                "15a1d9cbef0fd28f"
            ]
        ]
    },
    {
        "id": "03f3f95f82d20675",
        "type": "junction",
        "z": "5608c41bb386c85b",
        "x": 1160,
        "y": 100,
        "wires": [
            [
                "6e25e13e3f11bb4c"
            ]
        ]
    },
    {
        "id": "dab9ee4804859605",
        "type": "junction",
        "z": "e83dd01867d6527c",
        "x": 270,
        "y": 270,
        "wires": [
            [
                "107498694ec2a151"
            ]
        ]
    },
    {
        "id": "77b8d55e52ead813",
        "type": "junction",
        "z": "e83dd01867d6527c",
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "dab9ee4804859605"
            ]
        ]
    },
    {
        "id": "5ee3829f60f5faaa",
        "type": "junction",
        "z": "f56e4df3e14fab23",
        "x": 1450,
        "y": 450,
        "wires": [
            [
                "414683ac2ef5becd"
            ]
        ]
    },
    {
        "id": "414683ac2ef5becd",
        "type": "junction",
        "z": "f56e4df3e14fab23",
        "x": 200,
        "y": 500,
        "wires": [
            [
                "c94f2b4b0b42c4f8"
            ]
        ]
    },
    {
        "id": "8884be601ef59152",
        "type": "junction",
        "z": "1bd2a61f8400e469",
        "x": 1000,
        "y": 10,
        "wires": [
            [
                "a93bfe04a399b238"
            ]
        ]
    },
    {
        "id": "df8c0b88.91b0a8",
        "type": "MSSQL-CN",
        "name": "Local MSSQL Server Connection",
        "server": "192.168.40.31",
        "encyption": false,
        "database": "CAMKIRAN23"
    },
    {
        "id": "bbd9f7364a36898c",
        "type": "global-config",
        "name": "global-config",
        "env": [
            {
                "name": "SFORIN_URL",
                "value": "http://192.168.25.9:5001/",
                "type": "str"
            },
            {
                "name": "userName",
                "value": "1",
                "type": "str"
            },
            {
                "name": "password",
                "value": "1",
                "type": "str"
            },
            {
                "name": "companyCode",
                "value": "metropolun",
                "type": "str"
            },
            {
                "name": "NetsisUrl",
                "value": "http://192.168.25.10:7171/",
                "type": "str"
            },
            {
                "name": "Bady",
                "value": "grant_type=password&branchcode=0&password=SISBIM%&username=SISBIM&dbname=METROPOL25&dbuser=TEMELSET&dbpassword=&dbtype=0",
                "type": "str"
            },
            {
                "name": "BranchCode",
                "value": "0",
                "type": "str"
            },
            {
                "name": "logUrlPath",
                "value": "wmsmaster/api/WmsMaster/CreateIntegrationLog",
                "type": "str"
            },
            {
                "name": "INT_TBLSTSABIT",
                "value": "TBLSTSABIT",
                "type": "str"
            },
            {
                "name": "INT_TBLCASABIT",
                "value": "TBLCASABIT",
                "type": "str"
            },
            {
                "name": "INT_TBLSIPAMAS",
                "value": "TBLSIPAMAS",
                "type": "str"
            },
            {
                "name": "documentStorageLocations_Plant",
                "value": "METROPOL",
                "type": "str"
            },
            {
                "name": "INT_TBLISEMRI",
                "value": "TBLISEMRI",
                "type": "str"
            },
            {
                "name": "MongoDbNamePath",
                "value": "MongoDbV_1.0",
                "type": "str"
            },
            {
                "name": "InvoiceHtmlPath",
                "value": "C:/InvoicePrint",
                "type": "str"
            },
            {
                "name": "InvoiceHtmlPath_GUVENLIK",
                "value": "C:/InvoicePrint_4_GUVENLIK",
                "type": "str"
            },
            {
                "name": "InvoiceHtmlPath_MELIH",
                "value": "C:/InvoicePrint_2_IKYAZICI",
                "type": "str"
            }
        ]
    },
    {
        "id": "fc4e6bca72218567",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "Get Token Params",
        "func": "global.set(\"companyCode\", env.get(\"companyCode\"))\nglobal.set(\"SFORIN_URL\", env.get(\"SFORIN_URL\") )\n\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.payload = {\n    data: [\n        {\n            userName: env.get(\"userName\"),\n            password: env.get(\"password\"),\n            companyCode: env.get(\"companyCode\"),\n            rememberMe: true\n        }\n    ],   \n     methodName: \"auth/api/v1/authenticate/token\",\n   \n    clientPath: \"/login\",\n    sender: \"\",\n    current: [\n        {\n            key: \"UserId\",\n            value: \"\"\n        },\n        {\n            key: \"Company\",\n            value: \"\"\n        },\n        {\n            key: \"Language\",\n            value: \"tr\"\n        }\n    ]\n};\n\nflow.set('GetTokenParams',msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "8f9f0d729ee14091"
            ]
        ]
    },
    {
        "id": "8f9f0d729ee14091",
        "type": "http request",
        "z": "fa51d0694c73d14f",
        "name": "Get Token",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}auth/api/v1/authenticate/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 670,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1aaf0ca1bcd31c5c",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "global Token",
        "func": "var token= msg.payload?.data[0]?.accessToken;\n\nif(token)\n{\nglobal.set(\"SforinToken\",token)\nmsg.token=token;\n}\nmsg.dataPayload=msg.dataPayload\nreturn msg  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 350,
        "wires": [
            []
        ]
    },
    {
        "id": "ed7dde49642f30a3",
        "type": "catch",
        "z": "fa51d0694c73d14f",
        "name": "catch errors",
        "scope": [
            "8f9f0d729ee14091"
        ],
        "uncaught": false,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "7e2fe64a37f665ab"
            ]
        ]
    },
    {
        "id": "7e2fe64a37f665ab",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "retry logic",
        "func": "msg.retrie || 0\n \nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg, null];\n} else {\n\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 260,
        "wires": [
            [
                "fc4e6bca72218567"
            ],
            [
                "d11c46486885b0a1"
            ]
        ]
    },
    {
        "id": "84dd65d3bccc3277",
        "type": "complete",
        "z": "fa51d0694c73d14f",
        "name": "",
        "scope": [
            "8f9f0d729ee14091"
        ],
        "uncaught": false,
        "x": 210,
        "y": 520,
        "wires": [
            [
                "e1f5827474c83c23"
            ]
        ]
    },
    {
        "id": "e1f5827474c83c23",
        "type": "switch",
        "z": "fa51d0694c73d14f",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 400,
        "y": 520,
        "wires": [
            [
                "7e2fe64a37f665ab"
            ],
            [
                "ea6309ba3b83cb15"
            ],
            [
                "ea6309ba3b83cb15"
            ]
        ]
    },
    {
        "id": "fad9dfbfa56c24f5",
        "type": "subflow:7cdf28f23984a61d",
        "z": "fa51d0694c73d14f",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "Get Token SFORINAPI",
                "type": "str"
            }
        ],
        "x": 980,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "ea6309ba3b83cb15",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload = {};\nif (Array.isArray(result?.data) && result.data.length > 0) {\n    responsePayload = result.data[0];\n} else {\n    result=null;\n}\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"Token\" || \"\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"No message provided\", // Fallback message\n    jobResult: result?.jobResult || 2, // Job result from payload or default\n    integrationName: \"token\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(flow.get('GetTokenParams') || {}), // Serialized request payload\n   // responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "1aaf0ca1bcd31c5c",
                "fad9dfbfa56c24f5"
            ],
            []
        ]
    },
    {
        "id": "d11c46486885b0a1",
        "type": "function",
        "z": "fa51d0694c73d14f",
        "name": "LogJson",
        "func": "\n\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\n\n// Populate the data object dynamically\nconst data = [{\n   \n    dataKey: \"Token\" || \"\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"No message provided\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"token\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData:\"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(flow.get('GetTokenParams') || {}), // Serialized request payload\n    responsePayload: JSON.stringify(msg.errorMesaj || {}) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 270,
        "wires": [
            [
                "1a71d344c8db040f"
            ]
        ]
    },
    {
        "id": "1a71d344c8db040f",
        "type": "subflow:7cdf28f23984a61d",
        "z": "fa51d0694c73d14f",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "Get Token SFORINAPI",
                "type": "str"
            }
        ],
        "x": 870,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "a476b4f9b05e3658",
        "type": "comment",
        "z": "317a0e3edab25639",
        "name": "Get Token Netsis",
        "info": "",
        "x": 600,
        "y": 180,
        "wires": []
    },
    {
        "id": "acbe4da6cc47716f",
        "type": "http request",
        "z": "317a0e3edab25639",
        "name": "Netsis Token Post",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "{{{NetsisUrl}}}api/v2/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 830,
        "y": 230,
        "wires": [
            []
        ]
    },
    {
        "id": "5bdc9f1ff86ee825",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "Set URL",
        "func": " \nmsg.NetsisUrl = env.get('NetsisUrl')\nmsg.payload =env.get('Bady')\nmsg.dataPayload_ =env.get('Bady')\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 240,
        "wires": [
            [
                "acbe4da6cc47716f"
            ]
        ]
    },
    {
        "id": "d7218cdf6af30ede",
        "type": "complete",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "acbe4da6cc47716f"
        ],
        "uncaught": false,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "6927bab174930352"
            ]
        ]
    },
    {
        "id": "61b207c2836dcd6a",
        "type": "catch",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "acbe4da6cc47716f"
        ],
        "uncaught": false,
        "x": 570,
        "y": 360,
        "wires": [
            [
                "126ed9aef48ba81f"
            ]
        ]
    },
    {
        "id": "420f6597bca31418",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "Get Token func",
        "func": "// .issued ve .expires değerlerini al\nlet issued = new Date(msg.payload[\".issued\"]);\nlet expires = new Date(msg.payload[\".expires\"]);\nlet now = new Date();\n\n// Türkiye saatine göre (UTC+3) ayarlama\nlet issuedTR = new Date(issued.getTime() + 3 * 60 * 60 * 1000);\nlet expiresTR = new Date(expires.getTime() + 3 * 60 * 60 * 1000);\n//let nowTR = new Date(now.getTime() + 3 * 60 * 60 * 1000);\n\n\n// Netsis Tokeni global olarak acıyoruz\nglobal.set(\"NetsisToken\", msg.payload.access_token)\nglobal.set(\"RefreshToken\", msg.payload.refresh_token)\nglobal.set(\"issuedDate\", issuedTR)\nglobal.set(\"expiresDate\", expiresTR)\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 190,
        "wires": [
            []
        ]
    },
    {
        "id": "6927bab174930352",
        "type": "switch",
        "z": "317a0e3edab25639",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 300,
        "wires": [
            [
                "420f6597bca31418",
                "d2673a3c66472576"
            ],
            [
                "6d10eb37f8cf99b9"
            ]
        ]
    },
    {
        "id": "b710834ee31ae2b4",
        "type": "comment",
        "z": "317a0e3edab25639",
        "name": "KillToken Netsis",
        "info": "",
        "x": 600,
        "y": 560,
        "wires": []
    },
    {
        "id": "a2fd184a2044d0f2",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "Set Headers",
        "func": "\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\nmsg.NetsisUrl = env.get(\"NetsisUrl\")\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "f285f5aa1b1cf541"
            ]
        ]
    },
    {
        "id": "f285f5aa1b1cf541",
        "type": "http request",
        "z": "317a0e3edab25639",
        "name": "HTTP GET Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{NetsisUrl}}}api/v2/revoke",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 840,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "caba7a870024fba6",
        "type": "complete",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "f285f5aa1b1cf541"
        ],
        "uncaught": false,
        "x": 610,
        "y": 680,
        "wires": [
            [
                "82eaba9b376ffb27"
            ]
        ]
    },
    {
        "id": "82eaba9b376ffb27",
        "type": "switch",
        "z": "317a0e3edab25639",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 680,
        "wires": [
            [
                "2e58e6d01aad3e72"
            ],
            [
                "2e58e6d01aad3e72"
            ]
        ]
    },
    {
        "id": "33c69375e9ed97c1",
        "type": "catch",
        "z": "317a0e3edab25639",
        "name": "",
        "scope": [
            "f285f5aa1b1cf541"
        ],
        "uncaught": false,
        "x": 590,
        "y": 720,
        "wires": [
            [
                "1aa6e5a599662d26"
            ]
        ]
    },
    {
        "id": "359bbc3396c63271",
        "type": "switch",
        "z": "317a0e3edab25639",
        "name": "",
        "property": "Status",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 380,
        "wires": [
            [
                "5bdc9f1ff86ee825"
            ],
            [
                "a2fd184a2044d0f2"
            ]
        ]
    },
    {
        "id": "85352307ee8bf786",
        "type": "comment",
        "z": "317a0e3edab25639",
        "name": "Token Status",
        "info": "True ise Token oluştur\nFalse ise Token revoke",
        "x": 310,
        "y": 320,
        "wires": []
    },
    {
        "id": "6d10eb37f8cf99b9",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||false; //default false\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload;\n \nif ( isDubug) {\n    responsePayload = result;\n}\n//node.warn(msg.payload);\n\n\n// input.statusCode kontrol ediyoruz\nlet jobResult_ = (result?.statusCode === 200 || result?.statusCode === 400) ? 0 : 2;\n \n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"Netsis-Token\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult: jobResult_, // Job result from payload or default\n    integrationName: \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info ,\n    flowName:  \"Netsis-Token\",   \n    requestPayload: JSON.stringify(msg.dataPayload_ || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 330,
        "wires": [
            [
                "3252a64b6291f4e5"
            ]
        ]
    },
    {
        "id": "126ed9aef48ba81f",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\n\n// Populate the data object dynamically\nconst data = [{\n   \n    dataKey: env.get(\"Url\") || msg.url, // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"No message provided\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    flowName: \"Netsis-Token\",\n    additionalData:\"\", // Extra info    \n    requestPayload: JSON.stringify(msg.dataPayload_ || {}), // Serialized request payload\n    responsePayload: JSON.stringify(msg.error.message || {}) // Serialized response payload\n}];\n\n// dönüş değper verilcek \nconst flowName=msg?.propIntegration?.flowName;\nif(global.get(flowName+'_payload_res_status'))\n{\n    global.set(flowName+'_payload_res')\n}\n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 380,
        "wires": [
            [
                "3252a64b6291f4e5"
            ]
        ]
    },
    {
        "id": "445f68b033b3be7b",
        "type": "subflow:7cdf28f23984a61d",
        "z": "317a0e3edab25639",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "Token Netsis",
                "type": "env"
            },
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1370,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "d2673a3c66472576",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||false; //default false\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload;\n \nif ( isDubug) {\n    responsePayload = result;\n}\n//node.warn(msg.payload);\n\n\n \n\n// Populate the data object dynamically\nconst data = [{\n    dataKey:\"Netsis-Token\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult: 0, // Job result from payload or default\n    integrationName: \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info ,\n    flowName:  \"Netsis-Token\",   \n    requestPayload: JSON.stringify(msg.dataPayload_ || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "445f68b033b3be7b"
            ]
        ]
    },
    {
        "id": "2e58e6d01aad3e72",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||true; //default false\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload;\n \nif ( isDubug) {\n    responsePayload = result;\n}\n//node.warn(msg.payload);\n\n\n \n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"Netsis-Token-Revoke\" , // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult: 0, // Job result from payload or default\n    integrationName: \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info ,\n    flowName:  \"Netsis-Token-Revoke\",   \n    requestPayload: null, // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 660,
        "wires": [
            [
                "c0238aa6884fbc32"
            ]
        ]
    },
    {
        "id": "1aa6e5a599662d26",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\n\n// Populate the data object dynamically\nconst data = [{\n   \n     dataKey: \"Netsis-Token-Revoke\" , // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"No message provided\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    flowName: \"Netsis-Token\",\n    additionalData:\"\", // Extra info    \n    requestPayload: JSON.stringify(msg.payload || {}), // Serialized request payload\n    responsePayload: JSON.stringify(msg.error.message || {}) // Serialized response payload\n}];\n\n// dönüş değper verilcek \nconst flowName=msg?.propIntegration?.flowName;\nif(global.get(flowName+'_payload_res_status'))\n{\n    global.set(flowName+'_payload_res')\n}\n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 730,
        "wires": [
            [
                "c0238aa6884fbc32"
            ]
        ]
    },
    {
        "id": "c0238aa6884fbc32",
        "type": "subflow:7cdf28f23984a61d",
        "z": "317a0e3edab25639",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "Token Netsis",
                "type": "env"
            },
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1290,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "3252a64b6291f4e5",
        "type": "function",
        "z": "317a0e3edab25639",
        "name": "retry logic",
        "func": "msg.retrie || 0\n \nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg, null];\n} else {\n\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "445f68b033b3be7b",
                "5bdc9f1ff86ee825"
            ],
            []
        ]
    },
    {
        "id": "50d3c1690610e3fe",
        "type": "function",
        "z": "30dd5fc9ce2b5545",
        "name": "Return NetsisAllProductType",
        "func": "msg.netsisProductTypsCode = []\nlet items = msg.netsisProductTypes\n \n\nitems.forEach(x => {\n    msg.netsisProductTypsCode.push(x.productTypeCode)\n})\n\n \nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "12cd4977e5b8f047",
        "type": "function",
        "z": "30dd5fc9ce2b5545",
        "name": "Netsis Product Type",
        "func": "msg.netsisProductTypes = [\n    {\n        \"productTypeCode\": \"M\",\n        \"productTypeCodeName\": \"Mamul\"\n    },\n    {\n        \"productTypeCode\": \"Y\",\n        \"productTypeCodeName\": \"YARI MAMUL\"\n    },\n    {\n        \"productTypeCode\": \"A\",\n        \"productTypeCodeName\": \"YAN URUN\"\n    },\n    {\n        \"productTypeCode\": \"R\",\n        \"productTypeCodeName\": \"MAL.MUH.EK\"\n    },\n    {\n        \"productTypeCode\": \"I\",\n        \"productTypeCodeName\": \"ILK MADDE\"\n    },\n    {\n        \"productTypeCode\": \"B\",\n        \"productTypeCodeName\": \"AMBALAJ MALZEME\"\n    },\n    {\n        \"productTypeCode\": \"T\",\n        \"productTypeCodeName\": \"TICARI MAL\"\n    },\n    {\n        \"productTypeCode\": \"D\",\n        \"productTypeCodeName\": \"DIGER\"\n    },\n    {\n        \"productTypeCode\": \"F\",\n        \"productTypeCodeName\": \"FASONL\"\n    }\n]\n\n \n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 200,
        "wires": [
            [
                "53f3d73604363dbe"
            ]
        ]
    },
    {
        "id": "53f3d73604363dbe",
        "type": "switch",
        "z": "30dd5fc9ce2b5545",
        "name": "",
        "property": "IncludenetsisProductTypsCode",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 220,
        "wires": [
            [
                "50d3c1690610e3fe"
            ],
            []
        ]
    },
    {
        "id": "b055f9f7c5e3ed26",
        "type": "function",
        "z": "7cdf28f23984a61d",
        "d": true,
        "name": "function 12",
        "func": "msg.insertData = {\n    \"id\": generateUniqueId(), // Benzersiz bir ID oluşturma fonksiyonu (kendi implementasyonunuzu ekleyin)\n    \"timestamp\": new Date().toISOString(), // Şu anki tarihi ve saati ISO formatında alır\n    \"sourceSystem\": env.get('sourceSystem') || \"\", // SourceSystem: Verinin çıktığı sistem (örn. NetSuite).\n    \"sourceModuleFlow\": env.get('sourceModuleFlow') || \"\", // SourceModule:/Flow Kaynak sistemdeki belirli modül/Flow (örn. Stoklar, Cariler).\n    \"destinationSystem\": env.get('destinationSystem') || \"\", // Hedef Node adı veya ID'si\n    \"data\": msg.logData|| \"\", // Gönderilen veri veya mesaj\n    \"status\": env.get('status') || \"\", // İşlemin durumu    \n    \"error_description\": msg.errorDescription || \"\", // Hata açıklaması   \n};\n\n// Benzersiz ID oluşturma fonksiyonu (örnek)\nfunction generateUniqueId() {\n    return  Math.random().toString(36);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [
            [
                "27406d1f10c1837d"
            ]
        ]
    },
    {
        "id": "27406d1f10c1837d",
        "type": "function",
        "z": "7cdf28f23984a61d",
        "d": true,
        "name": "MongoDbNodeRedLog_V1.0",
        "func": "let mongoData = null;\nlet allIntegrationCode = global.get('allIntegrationCode');\n\nif (allIntegrationCode) {\n    // Veriyi başarıyla aldınız, işlem yapabilirsiniz\n    mongoData = allIntegrationCode.find(item => item.path === \"MongoDbV_1.0\");\n    // node.warn(mongoData);\n}\n\nif (mongoData === null) {\n  \n    return;\n}\nconst MongoClient = global.get('mongodb');\nconst insertData = msg.insertData || {};  // Eklenecek veriyi msg.insertData içinden alıyoruz\n\nif (!MongoClient) {\n    node.error('MongoDB module not found in global context.');\n    return;\n}\n\nconst user = mongoData.user;\nconst password = mongoData.pass;\nconst server = mongoData.server;\nconst database = mongoData.dataBase;\nconst yourCollection = mongoData.collection;\n// Doğru şekilde veritabanı adı ile eşleştiğinden emin olun\n\n(async () => {\n    // MongoDB bağlantı URL'si\n    const url = `mongodb://${user}:${password}@${server}/${database}?authSource=admin`;\n   // node.warn(url)\n    let client;\n\n    try {\n        // MongoDB bağlantısı kurma\n       \n     \n        client = new MongoClient(url, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true\n        });\n   \n        // Connect the client\n        await client.connect();\n \n        // Veritabanına bağlanma\n      \n        const db = client.db(database);\n     \n        // Belgeyi koleksiyona ekleme (insertOne)\n        const result = await db.collection(yourCollection).insertOne(insertData);  // Burada 'yourCollection' koleksiyon adını değiştirin\n     \n        // Başarılı işlem sonrası sonucu payload'a ekleyip ilk çıkışa gönderin\n        msg.payload = result;\n        \n        node.send([msg, null]);\n\n    } catch (err) {\n        // Bağlantı veya sorgu hatalarını loglayıp ikinci çıkışa gönderin\n      \n        msg = {\n            error: 'MongoDB insert error: ' + err.message\n        };\n        node.send([null, msg]);\n\n    } finally {\n        // Bağlantıyı kapatın\n        \n        if (client) {\n           \n            try {\n                await client.close();\n                // node.warn('MongoDB connection closed.');\n            } catch (closeErr) {\n                msg = {\n                    error: 'Error closing MongoDB connection: ' + closeErr.message\n                };\n                node.send([null, msg]);\n            }\n        }\n    }\n})();\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "659af4d22c3253a7",
        "type": "function",
        "z": "7cdf28f23984a61d",
        "name": "Async Full HTTP Request",
        "func": "(async function () {\n    try {\n        const http = global.get('http');\n        const { parse } = global.get('url');\n\n        // Base URL ve endpoint\n        const baseUrl = env.get('SFORIN_URL')\n        \n        const urlPath = env.get('logUrlPath');\n        const fullUrl = `${baseUrl}${urlPath}`;\n\n        // Global değişkenlerden alınan token\n        const token = global.get(\"SforinToken\");\n\n        // Varsayılan şablon (Default değerler)\n        const defaultTemplate = {\n            dataKey: \"\",\n            dataType: 0,\n            date: new Date().toISOString(),\n            message: \"\",\n            jobResult: 0,\n            integrationName: \"\",\n            httpStatusCode: 200,\n            duration: null,\n            additionalData: \"\",\n            flowName: env.get('sourceModule/Flow'),\n            requestPayload: \"\",\n            responsePayload: \"\"\n        };\n\n        // Null, undefined ve boş değer kontrolü yapan yardımcı fonksiyon\n        function isValid(value) {\n            return value !== undefined && value !== null && value !== \"\";\n        }\n\n        // Gelen veriyi işleme\n        const incomingDataArray = msg.logData || [];\n\n        // Gelen nesneleri eşleştir\n        const mappedData = incomingDataArray.map(item => {\n            return {\n                dataKey: isValid(item?.dataKey) ? item.dataKey : defaultTemplate.dataKey,\n                dataType: isValid(item?.dataType) ? item.dataType : defaultTemplate.dataType,\n                date: isValid(item?.date) ? item.date : defaultTemplate.date,\n                message: isValid(item?.message) ? item.message : defaultTemplate.message,\n                jobResult: isValid(item?.jobResult) ? item.jobResult : defaultTemplate.jobResult,\n                integrationName: isValid(item?.integrationName) ? item.integrationName : defaultTemplate.integrationName,\n                httpStatusCode: isValid(item?.httpStatusCode) ? item.httpStatusCode : defaultTemplate.httpStatusCode,\n                duration: isValid(item?.duration) ? item.duration : defaultTemplate.duration,\n                additionalData: isValid(item?.additionalData) ? item.additionalData : defaultTemplate.additionalData,\n                flowName: isValid(item?.flowName) ? item.flowName : defaultTemplate.flowName,\n                requestPayload: isValid(item?.requestPayload) ? item.requestPayload : defaultTemplate.requestPayload,\n                responsePayload: isValid(item?.responsePayload) ? item.responsePayload : defaultTemplate.responsePayload\n            };\n        });\n\n        // Yeni payload oluştur\n        const payload = {\n            requestId: \"\",\n            sender: \"NODE-RED\",\n            data: mappedData,\n            current: [\n                {\n                    key: \"\",\n                    value: \"\"\n                }\n            ]\n        };\n\n        // HTTP isteği gönderme fonksiyonu\n        const sendHttpRequest = (url, method, headers, body) => {\n            return new Promise((resolve, reject) => {\n                const parsedUrl = parse(url); // URL'yi ayrıştırıyoruz.\n                const options = {\n                    hostname: parsedUrl.hostname,\n                    port: parsedUrl.port || 80, // HTTP için varsayılan port\n                    path: parsedUrl.path,\n                    method: method,\n                    headers: headers\n                };\n\n                const req = http.request(options, (res) => {\n                    let responseData = \"\";\n                    res.on(\"data\", (chunk) => {\n                        responseData += chunk;\n                    });\n                    res.on(\"end\", () => {\n                        resolve(responseData);\n                    });\n                });\n\n                req.on(\"error\", (e) => {\n                    reject(e);\n                });\n\n                if (body) {\n                    req.write(JSON.stringify(body));\n                }\n                req.end();\n            });\n        };\n\n        // HTTP isteğini yap\n        const response = await sendHttpRequest(\n            fullUrl,\n            \"POST\",\n            {\n                \"Authorization\": `Bearer ${token}`,\n                \"Content-Type\": \"application/json\"\n            },\n            payload\n        );\n\n        // Yanıtı işleme\n        msg.payload = JSON.parse(response);\n        return msg;\n\n    } catch (error) {\n        // Hata durumunda loglama ve mesaj döndürme\n        node.error(\"Bir hata oluştu: \" + error.message);\n        msg.error = error.message;\n        return msg;\n    }\n})();\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 170,
        "wires": [
            []
        ]
    },
    {
        "id": "7b892d360698aa12",
        "type": "comment",
        "z": "7cdf28f23984a61d",
        "name": "",
        "info": "SFORIN  token geçerli değil ise token iseği yapılcak \n \n return 2. cıkış ver ve   get token a yönlendir\n 3 kere retries kontolet",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "2bfef7a835ff1b51",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Process Item",
        "func": "let items = msg.insertQueries;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\n\nlet item = items[index];\nmsg.index = index;\n\nmsg.query = item;\n\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 720,
        "wires": [
            [
                "1d47c08060a1fa68"
            ],
            [
                "07d37c7441ef7b55"
            ]
        ]
    },
    {
        "id": "3f5a2c3888146bbe",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Netsis Stock json",
        "func": "let items=msg.matchingItems;\n// Empty the content of the message\n \n//\nlet insertQueries = items.map(item => {\n    var nonBaseUnit = item.units.find(unit => !unit.isBaseUnit);    \n    var baseUnit = item.units.find(unit => unit.isBaseUnit);\n    let stok_kodu = item.code;\n    let stok_adi = item.descriptions[0]?.longDefinition !== undefined && item.descriptions[0]?.longDefinition !== ''\n    ? item.descriptions[0]?.longDefinition\n    : item.descriptions[0]?.defaultDefinition;\n\n\n\n    let olcu_br1 = baseUnit ? baseUnit.unitCode : \"AD\";\n    let olcu_br2 = nonBaseUnit ? nonBaseUnit.unitCode : null;\n    let pay_1 = baseUnit ? (baseUnit.factor ? baseUnit.factor : 1) : 1;\n    let payda_1 = nonBaseUnit ? (nonBaseUnit.divisor ? nonBaseUnit.divisor : 1) : 1;\n    let pay2 = nonBaseUnit ? (nonBaseUnit.factor ? nonBaseUnit.factor : 1) : 1;\n    let payda2 = baseUnit ? (baseUnit.divisor ? baseUnit.divisor : 1) : 1;\n    let barkod1 = item.barcodes && item.barcodes[0] && item.barcodes[0].barcode ? item.barcodes[0].barcode : \"\";\n    let barkod2 = item.barcodes && item.barcodes[1] && item.barcodes[1].barcode ? item.barcodes[1].barcode : \"\";\n    let barkod3 = item.barcodes && item.barcodes[2] && item.barcodes[2].barcode ? item.barcodes[2].barcode : \"\";\n\n    return `\n    BEGIN TRY\n    BEGIN TRANSACTION;\n\n    -- Geçici tablo oluştur\n    CREATE TABLE #InsertedStsabit (\n        STOK_KODU VARCHAR(50)\n    );\n\n    -- İlk insert işlemi\n     INSERT INTO TBLSTSABIT(SUBE_KODU,ISLETME_KODU,STOK_KODU,STOK_ADI,OLCU_BR1,OLCU_BR2,PAY_1,PAYDA_1,PAY2,PAYDA2,FIAT_BIRIMI,BARKOD1,BARKOD2,BARKOD3,S_YEDEK1)\n    OUTPUT INSERTED.STOK_KODU INTO #InsertedStsabit(STOK_KODU)\n   VALUES (\n         '-1', '1','${stok_kodu}','${stok_adi}','${olcu_br1}', ${olcu_br2 ? `'${olcu_br2}'` : 'NULL'},\n        ${pay_1}, ${payda_1}, ${pay2}, ${payda2}, 1, '${barkod1}', '${barkod2}', '${barkod3}', 'SFORNIN'\n    );\n\n    -- Sonuçları kontrol et\n\n\n    -- İkinci insert işlemi, ilk işlemin sonucu başarılıysa çalışacak\n      INSERT INTO TBLSTSABITEK (Stok_Kodu, Tur, KayitTarihi, B_Yedek1)\n      SELECT STOK_KODU, 'D', GETDATE(), 0\n    FROM #InsertedStsabit;\n\n    -- Geçici tabloyu sil\n    DROP TABLE #InsertedStsabit;\n\n    -- İşlemi tamamla\n    COMMIT TRANSACTION;\nEND TRY\nBEGIN CATCH\n    -- Hata olduğunda işlemi geri al\n\t    DROP TABLE #InsertedStsabit;\n\n    ROLLBACK TRANSACTION;\n   \nEND CATCH;\n    `;\n});\n\nmsg.insertQueries = insertQueries;\n msg.index=0;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "2bfef7a835ff1b51"
            ]
        ]
    },
    {
        "id": "7d9bbc14fb05f9ec",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "Product is being shipped",
        "info": "",
        "x": 250,
        "y": 520,
        "wires": []
    },
    {
        "id": "3dd784f61d8fe95d",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "23703f17a1f153b1",
        "type": "differences",
        "z": "c34fc38f83091edb",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "sforinStockCode",
        "leftInputType": "msg",
        "rightInput": "netsisStockCodes",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "4e53cedf5709fb14"
            ]
        ]
    },
    {
        "id": "537becfd66af2276",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "function 17",
        "func": "msg.netsisStockCode=flow.get(\"netsisGroupCode\");\nlet netsisStockCodes=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 640,
        "wires": [
            [
                "23703f17a1f153b1"
            ]
        ]
    },
    {
        "id": "4e53cedf5709fb14",
        "type": "change",
        "z": "c34fc38f83091edb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 640,
        "wires": [
            [
                "3f0b5d71b0018706"
            ]
        ]
    },
    {
        "id": "3f0b5d71b0018706",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "matchingItems",
        "func": "// const getAllSforinProductArray = msg.getAllSforinProduct;\n// const transferStockItemsArray = msg.transferStockItems;\n\n\n// const matchingItems = [];\n\n\n// transferStockItemsArray.forEach(product => {\n//      const productCode = product;\n\n   \n//     getAllSforinProductArray.forEach(item => {\n//         if (item.code === productCode) {\n          \n//             matchingItems.push(item);\n//         }\n//     }); \n\n    \n// });\n\n// msg.matchingItems=matchingItems;\n// return msg;\nconst getAllSforinProductArray = msg.getAllSforinProduct;\nconst transferStockItemsArray = msg.transferStockItems;\n\n// Create an array of matching items using filter\nconst matchingItems = getAllSforinProductArray.filter(item =>\n    transferStockItemsArray.includes(item.code)\n);\n\nmsg.matchingItems = matchingItems;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 620,
        "wires": [
            [
                "2bd303525d28ce86"
            ]
        ]
    },
    {
        "id": "2bd303525d28ce86",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "name": "MatchingItemsout(SforinToNetsisCardMMSSQL)",
        "mode": "link",
        "links": [
            "caa19908c3ea9daa"
        ],
        "x": 1735,
        "y": 620,
        "wires": []
    },
    {
        "id": "caa19908c3ea9daa",
        "type": "link in",
        "z": "c34fc38f83091edb",
        "name": "MatchingItemsIN(SforinToNetsisCardMMSSQL)",
        "links": [
            "2bd303525d28ce86"
        ],
        "x": 165,
        "y": 720,
        "wires": [
            [
                "3f5a2c3888146bbe"
            ]
        ]
    },
    {
        "id": "cb594ca6e53b6da0",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Set Index",
        "func": "msg.index++\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 700,
        "wires": [
            [
                "6e0b9c7cffb8dd55",
                "c9b763cdc5844624"
            ]
        ]
    },
    {
        "id": "6e0b9c7cffb8dd55",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "name": "Set Index(SFORIN to Netsis Stock Card(MSSQL)) OUT",
        "mode": "link",
        "links": [
            "aabf79aa02e0c96e"
        ],
        "x": 1165,
        "y": 680,
        "wires": []
    },
    {
        "id": "aabf79aa02e0c96e",
        "type": "link in",
        "z": "c34fc38f83091edb",
        "name": "Set Index(SFORIN to Netsis Stock Card(MSSQL)) In",
        "links": [
            "6e0b9c7cffb8dd55"
        ],
        "x": 505,
        "y": 680,
        "wires": [
            [
                "2bfef7a835ff1b51"
            ]
        ]
    },
    {
        "id": "ee14cccb60c5e546",
        "type": "subflow:7cdf28f23984a61d",
        "z": "c34fc38f83091edb",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(MSSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1060,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "c9b763cdc5844624",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 800,
        "wires": [
            [
                "ee14cccb60c5e546"
            ]
        ]
    },
    {
        "id": "4c11114c875d2c7f",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1140,
        "y": 760,
        "wires": []
    },
    {
        "id": "07d37c7441ef7b55",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "TBLSTOKBAR",
        "func": "let querys = [];\nlet items = msg.matchingItems || [];\n\n// Only proceed if there are items to process\nif (items.length > 0) {\n    items.forEach(item => {\n        // Proceed only if barcodes exist\n        if (item.barcodes && item.barcodes.length > 0) {\n            for (let i = 0; i < item.barcodes.length; i++) {\n                let query = `\n                DECLARE @BARKOD VARCHAR(MAX)='${item.barcodes[i].barcode}'\n                DECLARE @STOK_KODU VARCHAR(MAX)='${item.code}'\n                IF NOT EXISTS (SELECT 1 FROM TBLSTOKBAR A\n                LEFT JOIN TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU \n                WHERE @BARKOD IN (A.BARKOD, B.BARKOD1, B.BARKOD2, B.BARKOD3) AND A.STOK_KODU = @STOK_KODU)\n                BEGIN \n                    DECLARE @OLCU_BR VARCHAR(MAX)\n                    DECLARE @OLCU_BR_ VARCHAR(MAX)='AD'\n\n                    SELECT \n                        @OLCU_BR = CASE WHEN OLCU_BR1 = @OLCU_BR_ THEN 1\n                                        WHEN OLCU_BR2 = @OLCU_BR_ THEN 2\n                                        WHEN OLCU_BR3 = @OLCU_BR_ THEN 3\n                                        ELSE 0 END \n                    FROM TBLSTSABIT WHERE STOK_KODU = @STOK_KODU\n\n                    INSERT INTO [dbo].[TBLSTOKBAR]([STOK_KODU],[BARKOD],[BARTIP],[BARTARIH],[S_YEDEK1],[S_YEDEK2],[S_YEDEK3],[S_YEDEK4],[I_YEDEK1],[I_YEDEK2],[C_YEDEK1],[C_YEDEK2],[D_YEDEK1],[KILIT],[YAPKOD])\n                    SELECT @STOK_KODU, @BARKOD, 'A', GETDATE(), NULL, NULL, NULL, NULL, @OLCU_BR, NULL, NULL, NULL, NULL, NULL, NULL\n                END \n                `;\n                querys.push(query);\n            }\n        }\n    });\n}\n\n// Set output message properties\nmsg.querys = querys;\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 800,
        "wires": [
            [
                "5cf2af52c552b53f"
            ]
        ]
    },
    {
        "id": "0fd2112b7bf462be",
        "type": "comment",
        "z": "c34fc38f83091edb",
        "name": "",
        "info": "Stok ekleme işlemleri bittiğinde eşleşmeğen stoklarda dönerek barkod ekleme yapıyoruz",
        "x": 620,
        "y": 760,
        "wires": []
    },
    {
        "id": "5cf2af52c552b53f",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Index",
        "func": "\n\n\nif (msg.querys.length>=msg.index)\n{\n    msg.query = msg.querys[msg.index];\n    msg.index++\n    return [msg,null];\n\n}\nelse\n{\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 860,
        "wires": [
            [
                "c759a4e61515b23f"
            ],
            []
        ]
    },
    {
        "id": "1092e26ede67c90d",
        "type": "http request",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 850,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "53c08a45a642e47b",
        "type": "complete",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "",
        "scope": [
            "1092e26ede67c90d"
        ],
        "uncaught": false,
        "x": 250,
        "y": 380,
        "wires": [
            [
                "cbe3fd8d71dfaafc"
            ]
        ]
    },
    {
        "id": "cb6d0098ab2f5b08",
        "type": "catch",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "catch errors",
        "scope": [
            "1092e26ede67c90d"
        ],
        "uncaught": false,
        "x": 250,
        "y": 300,
        "wires": [
            [
                "5a25d86414943c98"
            ]
        ]
    },
    {
        "id": "8718f946e9693a70",
        "type": "function",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "1092e26ede67c90d"
            ]
        ]
    },
    {
        "id": "5a25d86414943c98",
        "type": "function",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "8718f946e9693a70",
                "679a352f386ac881"
            ]
        ]
    },
    {
        "id": "679a352f386ac881",
        "type": "debug",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 300,
        "wires": []
    },
    {
        "id": "c806c17cec29c3ce",
        "type": "function",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "a7f8959b3820e088"
            ]
        ]
    },
    {
        "id": "cbe3fd8d71dfaafc",
        "type": "switch",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 390,
        "y": 380,
        "wires": [
            [
                "2b4bd4abec322b6a"
            ],
            [
                "c806c17cec29c3ce"
            ],
            [
                "88db9b841ebb3929"
            ]
        ]
    },
    {
        "id": "2b4bd4abec322b6a",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "link out 10",
        "mode": "link",
        "links": [],
        "x": 515,
        "y": 360,
        "wires": []
    },
    {
        "id": "88db9b841ebb3929",
        "type": "debug",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 420,
        "wires": []
    },
    {
        "id": "37cbd46fe4fdbaf5",
        "type": "subflow:fa51d0694c73d14f",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "",
        "x": 360,
        "y": 200,
        "wires": [
            [
                "8718f946e9693a70"
            ]
        ]
    },
    {
        "id": "a7f8959b3820e088",
        "type": "link out",
        "z": "c34fc38f83091edb",
        "g": "9c638029e6a502f7",
        "name": "SFORIN to Netsis Stock Card(MSSQL)Out",
        "mode": "link",
        "links": [
            "42b7dd13fb41d587"
        ],
        "x": 775,
        "y": 380,
        "wires": []
    },
    {
        "id": "42b7dd13fb41d587",
        "type": "link in",
        "z": "c34fc38f83091edb",
        "name": "SFORIN to Netsis Stock Card(MSSQL)In",
        "links": [
            "a7f8959b3820e088"
        ],
        "x": 75,
        "y": 640,
        "wires": [
            [
                "6af7fbdc236febb4"
            ]
        ]
    },
    {
        "id": "085252c6f0a974ad",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\nmsg.payload = null;\nflow.set(\"netsisGroupCode\", items);\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 640,
        "wires": [
            [
                "537becfd66af2276"
            ]
        ]
    },
    {
        "id": "1ef538613b3bfe1d",
        "type": "subflow:d296b4008b6072d8",
        "z": "c34fc38f83091edb",
        "name": "",
        "x": 270,
        "y": 640,
        "wires": [
            [
                "085252c6f0a974ad"
            ],
            []
        ]
    },
    {
        "id": "6af7fbdc236febb4",
        "type": "function",
        "z": "c34fc38f83091edb",
        "name": "function 33",
        "func": "let branchCode = env.get(\"BranchCode\");\nmsg.query=`SELECT  STOK_KODU FROM TBLSTSABIT WHERE SUBE_KODU IN ('-1','${branchCode}')`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 125,
        "y": 640,
        "wires": [
            [
                "1ef538613b3bfe1d"
            ]
        ],
        "l": false
    },
    {
        "id": "1d47c08060a1fa68",
        "type": "subflow:d296b4008b6072d8",
        "z": "c34fc38f83091edb",
        "name": "",
        "x": 810,
        "y": 720,
        "wires": [
            [
                "cb594ca6e53b6da0"
            ],
            []
        ]
    },
    {
        "id": "c759a4e61515b23f",
        "type": "subflow:d296b4008b6072d8",
        "z": "c34fc38f83091edb",
        "name": "",
        "x": 670,
        "y": 980,
        "wires": [
            [
                "5cf2af52c552b53f"
            ],
            []
        ]
    },
    {
        "id": "43833519717b6b6b",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "name": "Tamamdır",
        "info": "",
        "x": 300,
        "y": 100,
        "wires": []
    },
    {
        "id": "8f8f0a54b3b3981f",
        "type": "http request",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1130,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "46098b541d83894d",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Get Product SFORINAPI",
        "info": "",
        "x": 350,
        "y": 160,
        "wires": []
    },
    {
        "id": "f7c3cf75ad1cd3ad",
        "type": "complete",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "",
        "scope": [
            "8f8f0a54b3b3981f"
        ],
        "uncaught": false,
        "x": 310,
        "y": 400,
        "wires": [
            [
                "8d0b5b4b9c6005ea"
            ]
        ]
    },
    {
        "id": "e1bddc7ba88c31ff",
        "type": "catch",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "catch errors",
        "scope": [
            "8f8f0a54b3b3981f"
        ],
        "uncaught": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "4773923cf77e68b8"
            ]
        ]
    },
    {
        "id": "036721ca56da574a",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 220,
        "wires": [
            [
                "8f8f0a54b3b3981f"
            ]
        ]
    },
    {
        "id": "4773923cf77e68b8",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 320,
        "wires": [
            [
                "036721ca56da574a",
                "6f8459932c16cb57"
            ]
        ]
    },
    {
        "id": "6f8459932c16cb57",
        "type": "debug",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d0b5b4b9c6005ea",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\n\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n        var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n      \n        products.push(processedProduct);\n    });\n} \n\n\nmsg.payload = products;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "4a8d53d8472af3aa"
            ]
        ]
    },
    {
        "id": "4a8d53d8472af3aa",
        "type": "link out",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "SFORINAPI Products",
        "mode": "link",
        "links": [
            "6d82dee7e9c3eaa6"
        ],
        "x": 635,
        "y": 440,
        "wires": []
    },
    {
        "id": "2dfa9bc630189151",
        "type": "debug",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 260,
        "wires": []
    },
    {
        "id": "4169215be0943297",
        "type": "subflow:fa51d0694c73d14f",
        "z": "73bcc0f49f21e3cf",
        "g": "43c38bd59b12a723",
        "name": "",
        "x": 540,
        "y": 220,
        "wires": [
            [
                "036721ca56da574a"
            ]
        ]
    },
    {
        "id": "6d82dee7e9c3eaa6",
        "type": "link in",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Netsis Prop",
        "links": [
            "4a8d53d8472af3aa"
        ],
        "x": 275,
        "y": 600,
        "wires": [
            [
                "64c8bf14f9283849"
            ]
        ]
    },
    {
        "id": "64c8bf14f9283849",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Netsis Stock json",
        "func": "let items = msg.payload; \n\nlet processedData = items.map(item => {\n    var nonBaseUnit = item.units.find(unit => !unit.isBaseUnit);\n    var baseUnit = item.units.find(unit => unit.isBaseUnit);\n    var today = new Date();\n\n    // Tarihi formatlama (yyyy-MM-dd)\n    var year = today.getFullYear();\n    var month = String(today.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyoruz\n    var day = String(today.getDate()).padStart(2, '0');\n\n    var formattedDate = year + '-' + month + '-' + day;\n\n    return {\n        \"StokTemelBilgi\": {\n            \"Stok_Kodu\": item.code,\n            \"Sube_Kodu\": '-1',\n            \"ISLETME_KODU\": '1',\n            \"Stok_Adi\": item.descriptions?.longDefinition !== undefined ? item.descriptions?.longDefinition : item.descriptions?.defaultDefinition,                                  \n            \"Olcu_Br1\": baseUnit ? baseUnit.unitCode : \"AD\",\n            \"Olcu_Br2\": nonBaseUnit ? nonBaseUnit.unitCode : null,\n            \"Pay_1\": baseUnit ? (baseUnit.factor ? baseUnit.factor:1) : 1,\n            \"Payda_1\": nonBaseUnit ? (nonBaseUnit.divisor ? nonBaseUnit.divisor : 1) : 1,            \n            \"Pay2\": nonBaseUnit ? (nonBaseUnit.factor ? nonBaseUnit.factor:1) : 1,\n            \"Payda2\": baseUnit ? (baseUnit.divisor ? baseUnit.divisor : 1) : 1,\n            \"Fiat_birimi\": 1, \n            \"Barkod1\": item.barcodes[0] !== undefined ? item.barcodes[0].barcode :\"\",\n            \"Barkod2\": item.barcodes[1] !== undefined ? item.barcodes[1].barcode : \"\",\n            \"Barkod3\": item.barcodes[2] !== undefined ? item.barcodes[2].barcode : \"\",            \n            \"S_Yedek1\": \"SFORNIN\",           \n        },\n        \"StokEkBilgi\": {\n            \"Stok_Kodu\": item.code,\n            \"Tur\": \"D\",             \n            \"KayitTarihi\": formattedDate,           \n            \"B_Yedek1\":0, },\n        \"TransactSupport\": true,\n        \"MuhasebelesmisBelge\": true\n    };\n});\nmsg.payload=null;  \nmsg.items = processedData;\nmsg.index = 0;\n return msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 600,
        "wires": [
            [
                "30fe69813cca3656"
            ]
        ]
    },
    {
        "id": "b4a48818b854434e",
        "type": "http request",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Netsis Post",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{NetsisUrl}}}api/v2/Items",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1290,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2664c89f94d5d263",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Product is being shipped",
        "info": "",
        "x": 370,
        "y": 560,
        "wires": []
    },
    {
        "id": "1d0893d325e7fde9",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Handle Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n   \n    return [msg, null,null,null];\n}\nelse if (msg.statusCode === 401)\n{\n    return [null, msg, null, null];\n}\nelse if (msg.statusCode === 402) {\n    msg.index++;\n    return [null, null, msg, null];\n}\n\nelse {\n    // Handle error\n    return [null, null, null,msg];\n}",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 720,
        "wires": [
            [
                "60ed029db915ba30",
                "530910680df15e9e"
            ],
            [
                "30fe69813cca3656"
            ],
            [
                "530910680df15e9e"
            ],
            [
                "80f841d0f57da599"
            ]
        ]
    },
    {
        "id": "1748498982788e78",
        "type": "complete",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "scope": [
            "b4a48818b854434e"
        ],
        "uncaught": false,
        "x": 310,
        "y": 740,
        "wires": [
            [
                "69919dd567898653"
            ]
        ]
    },
    {
        "id": "66a7d3b048815c81",
        "type": "catch",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "scope": [
            "b4a48818b854434e"
        ],
        "uncaught": false,
        "x": 290,
        "y": 780,
        "wires": [
            [
                "edbe8e9841006ec9"
            ]
        ]
    },
    {
        "id": "45a16768398968b6",
        "type": "subflow:317a0e3edab25639",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "Status",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1330,
        "y": 620,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "f7400f4f69f3f0b9",
        "type": "comment",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1200,
        "y": 720,
        "wires": []
    },
    {
        "id": "14a1bd9a6f799d0f",
        "type": "subflow:7cdf28f23984a61d",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 360,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "edbe8e9841006ec9",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 900,
        "wires": [
            [
                "14a1bd9a6f799d0f"
            ]
        ]
    },
    {
        "id": "80f841d0f57da599",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\n msg.errorDescription =msg.statusCode\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 880,
        "wires": [
            [
                "6c0aba63526c969d"
            ]
        ]
    },
    {
        "id": "6c0aba63526c969d",
        "type": "subflow:7cdf28f23984a61d",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "30fe69813cca3656",
        "type": "subflow:317a0e3edab25639",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "x": 800,
        "y": 580,
        "wires": [
            [
                "530910680df15e9e"
            ],
            []
        ]
    },
    {
        "id": "69919dd567898653",
        "type": "switch",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "500",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 470,
        "y": 740,
        "wires": [
            [
                "edbe8e9841006ec9"
            ],
            [
                "1d0893d325e7fde9"
            ]
        ]
    },
    {
        "id": "1d35d56abb2fe346",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 760,
        "wires": [
            [
                "5280b858ea5f0f27"
            ]
        ]
    },
    {
        "id": "5280b858ea5f0f27",
        "type": "subflow:7cdf28f23984a61d",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1340,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "60ed029db915ba30",
        "type": "switch",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "",
        "property": "payload.ErrorCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "101",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 740,
        "wires": [
            [
                "1d35d56abb2fe346"
            ]
        ]
    },
    {
        "id": "1003bee7386f0ee4",
        "type": "debug",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 660,
        "wires": []
    },
    {
        "id": "530910680df15e9e",
        "type": "function",
        "z": "73bcc0f49f21e3cf",
        "g": "16d68ae37c966577",
        "name": "Process Item",
        "func": "let items = msg.items;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\n\nmsg.NetsisUrl = env.get('NetsisUrl')\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "b4a48818b854434e"
            ],
            [
                "45a16768398968b6",
                "1003bee7386f0ee4"
            ]
        ]
    },
    {
        "id": "c1545870c22d4104",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "Get Netsis Stock List",
        "info": "",
        "x": 190,
        "y": 100,
        "wires": []
    },
    {
        "id": "01e2420658e24890",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "Get SFORIN Stock List",
        "info": "",
        "x": 240,
        "y": 320,
        "wires": []
    },
    {
        "id": "80045f9c33c8e728",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "Tamam",
        "info": "",
        "x": 370,
        "y": 40,
        "wires": []
    },
    {
        "id": "2d714c1a3b03f9cd",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes = msg.netsisProductTypes;  //NETSİS İÇİN GELEN VERİLERDE TYPE ESLEMESI YAPIP NAME ALIYORZ\nvar data = msg.matchingItems;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.StokTemelBilgi.Stok_Kodu,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                \"productType\": {\n                    \"typeCode\": item.StokEkBilgi.Tur,\n                     \"definitionLang\": (netsisProductTypes.find(x => x.productTypeCode == item.StokEkBilgi.Tur)?.productTypeCodeName) || \"\"\n                    \n                },\n                \"categories\": [\n                    {\n                        \"categoryCode\": item.StokTemelBilgi.Grup_Kodu,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"NetsisGroupCode\"\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"isBaseUnit\": true,\n                        \"factor\": item.StokTemelBilgi.Pay_1,\n                        \"divisor\": item.StokTemelBilgi.Payda_1,\n                        \"area\": 1,\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weightKg\": 1,\n                        \"volumeM3\": 1,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod1\n                    },\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod2\n                    }\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weighthKg\": 1,\n                        \"area\": 1,\n                        \"wigthtLimitKG\": 1,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                        \"defaultDefinition\": item.StokTemelBilgi.Stok_Adi,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1180,
        "wires": [
            [
                "da441135bb95cdbf"
            ]
        ]
    },
    {
        "id": "0edcffb0cc6fe6e9",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "function 18",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item=item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1160,
        "wires": [
            [
                "c87b6b3b1f79d456"
            ],
            [
                "146030b32dde17df"
            ]
        ]
    },
    {
        "id": "410334039bcf7090",
        "type": "http request",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProduct",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1190,
        "y": 1160,
        "wires": [
            [
                "e45ffea3e99d0f81"
            ]
        ]
    },
    {
        "id": "e45ffea3e99d0f81",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1160,
        "wires": [
            [
                "2b4b492e83e2b9a5",
                "03c4bf59d993773f"
            ],
            [
                "e6ee46bbf293f5a4"
            ],
            [
                "1304999a0b718ecd"
            ]
        ]
    },
    {
        "id": "146030b32dde17df",
        "type": "debug",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1220,
        "wires": []
    },
    {
        "id": "da441135bb95cdbf",
        "type": "subflow:fa51d0694c73d14f",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "x": 760,
        "y": 1180,
        "wires": [
            [
                "0edcffb0cc6fe6e9"
            ]
        ]
    },
    {
        "id": "e6ee46bbf293f5a4",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)ResponseOut2",
        "mode": "link",
        "links": [
            "8b96a69c8c3fd36d"
        ],
        "x": 1525,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2b4b492e83e2b9a5",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)ResponseOut",
        "mode": "link",
        "links": [
            "8b96a69c8c3fd36d"
        ],
        "x": 1485,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8b96a69c8c3fd36d",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)ResponseIn",
        "links": [
            "2b4b492e83e2b9a5",
            "e6ee46bbf293f5a4"
        ],
        "x": 635,
        "y": 1100,
        "wires": [
            [
                "da441135bb95cdbf"
            ]
        ]
    },
    {
        "id": "8ce8edf07e100f74",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Product is being shipped",
        "info": "",
        "x": 270,
        "y": 1100,
        "wires": []
    },
    {
        "id": "df84b79cbe394492",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)MatchingItemsIn",
        "links": [
            "5eb71ffc293a75b8"
        ],
        "x": 205,
        "y": 1180,
        "wires": [
            [
                "2d714c1a3b03f9cd"
            ]
        ]
    },
    {
        "id": "03c4bf59d993773f",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 1100,
        "wires": [
            [
                "58e8a2a6f6fc0502"
            ]
        ]
    },
    {
        "id": "58e8a2a6f6fc0502",
        "type": "subflow:7cdf28f23984a61d",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1720,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "3493b3bbd2dc2ff2",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1680,
        "y": 1060,
        "wires": []
    },
    {
        "id": "1304999a0b718ecd",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1220,
        "wires": [
            [
                "2006cf42c69414d2"
            ]
        ]
    },
    {
        "id": "2006cf42c69414d2",
        "type": "subflow:7cdf28f23984a61d",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1620,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "c87b6b3b1f79d456",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)OutTBLSTOKBAR",
        "mode": "link",
        "links": [
            "f596c49f1580edb3"
        ],
        "x": 1095,
        "y": 1080,
        "wires": []
    },
    {
        "id": "88e2158b608619ba",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "cac22249c3b2266f",
        "name": "Netsis  To SFORIN Stock Card(REST)TblstokbarResponseIn",
        "links": [
            "70a3c37ab62a138d"
        ],
        "x": 1095,
        "y": 1120,
        "wires": [
            [
                "410334039bcf7090"
            ]
        ]
    },
    {
        "id": "e7e584fba8986c15",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "ConvertJsonSforinProductIn",
        "links": [
            "a3ef115fa5f43ea4"
        ],
        "x": 185,
        "y": 380,
        "wires": [
            [
                "6da70b9a59b99025",
                "1d2cf5374de79379"
            ]
        ]
    },
    {
        "id": "bcfbce53a162190c",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "matchingItems",
        "func": "const listNetsisStockCardArray = msg.listNetsisStockCard;\nconst transferStockItemsArray = msg.transferStockItems;\n\n// const matchingItems = transferStockItemsArray.flatMap(stockCode =>\n//     listNetsisStockCardArray.filter(item => item.StokTemelBilgi.Stok_Kodu === stockCode)\n// );\n\n\n\n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    listNetsisStockCardArray\n        .filter(item => item.StokTemelBilgi.Stok_Kodu === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR ILISKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 560,
        "wires": [
            [
                "5eb71ffc293a75b8"
            ]
        ]
    },
    {
        "id": "2ed8fdb2f308ff39",
        "type": "change",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 560,
        "wires": [
            [
                "d51c0e5157902bb4"
            ]
        ]
    },
    {
        "id": "0de061d6a541cf33",
        "type": "differences",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCode",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "2ed8fdb2f308ff39"
            ]
        ]
    },
    {
        "id": "ae8890c371c77bef",
        "type": "http request",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1210,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "a1e958abc61613d0",
        "type": "complete",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "scope": [
            "ae8890c371c77bef"
        ],
        "uncaught": false,
        "x": 230,
        "y": 560,
        "wires": [
            [
                "46460bfc60fe7dbf"
            ]
        ]
    },
    {
        "id": "2f101de07d11739e",
        "type": "catch",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "catch errors",
        "scope": [
            "ae8890c371c77bef"
        ],
        "uncaught": false,
        "x": 230,
        "y": 480,
        "wires": [
            [
                "92c7f455a989dc78"
            ]
        ]
    },
    {
        "id": "96baada44d1f4877",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 420,
        "wires": [
            [
                "ae8890c371c77bef"
            ]
        ]
    },
    {
        "id": "92c7f455a989dc78",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 480,
        "wires": [
            [
                "96baada44d1f4877"
            ],
            [
                "b8c186db23270a18"
            ]
        ]
    },
    {
        "id": "b8c186db23270a18",
        "type": "debug",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 480,
        "wires": []
    },
    {
        "id": "c7ea41c46373697f",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 560,
        "wires": [
            [
                "0de061d6a541cf33"
            ]
        ]
    },
    {
        "id": "46460bfc60fe7dbf",
        "type": "switch",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 370,
        "y": 560,
        "wires": [
            [
                "1d2cf5374de79379"
            ],
            [
                "c7ea41c46373697f"
            ],
            [
                "5b6148cc337bfdc9"
            ]
        ]
    },
    {
        "id": "5b6148cc337bfdc9",
        "type": "debug",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 600,
        "wires": []
    },
    {
        "id": "5eb71ffc293a75b8",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "Netsis  To SFORIN Stock Card(REST)MatchingItemsOut",
        "mode": "link",
        "links": [
            "df84b79cbe394492"
        ],
        "x": 1715,
        "y": 560,
        "wires": []
    },
    {
        "id": "8c61f291fe42c220",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "compareStockCodes",
        "info": "",
        "x": 1090,
        "y": 520,
        "wires": []
    },
    {
        "id": "6da70b9a59b99025",
        "type": "subflow:317a0e3edab25639",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "env": [
            {
                "name": "Status",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 270,
        "y": 420,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d51c0e5157902bb4",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1330,
        "y": 560,
        "wires": [
            [],
            [
                "bcfbce53a162190c"
            ]
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "1d2cf5374de79379",
        "type": "subflow:fa51d0694c73d14f",
        "z": "7defd81363e19950",
        "g": "17c24c3c0a543d66",
        "name": "",
        "x": 620,
        "y": 400,
        "wires": [
            [
                "96baada44d1f4877"
            ]
        ]
    },
    {
        "id": "70d63b2bc1cd3e70",
        "type": "comment",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 260,
        "y": 820,
        "wires": []
    },
    {
        "id": "40f91329a9597aba",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 920,
        "wires": [
            [
                "e2a558d60e316c06"
            ]
        ]
    },
    {
        "id": "e2a558d60e316c06",
        "type": "MSSQL",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 620,
        "y": 920,
        "wires": [
            [
                "9af6d363228efc7b"
            ]
        ]
    },
    {
        "id": "9af6d363228efc7b",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "function 20",
        "func": "msg.payload.forEach(item=>\n{\nmsg.item.data[0].barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 920,
        "wires": [
            [
                "70a3c37ab62a138d"
            ]
        ]
    },
    {
        "id": "f596c49f1580edb3",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis  To SFORIN Stock Card(REST)InTBLSTOKBAR",
        "links": [
            "c87b6b3b1f79d456"
        ],
        "x": 245,
        "y": 900,
        "wires": [
            [
                "40f91329a9597aba"
            ]
        ]
    },
    {
        "id": "70a3c37ab62a138d",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "a8f1fd19b36198e2",
        "name": "Netsis  To SFORIN Stock Card(REST)TblstokbarResponseOUT",
        "mode": "link",
        "links": [
            "88e2158b608619ba"
        ],
        "x": 915,
        "y": 900,
        "wires": []
    },
    {
        "id": "a3ef115fa5f43ea4",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "NetsisToS4inRemoveTokeNetsisOUT",
        "mode": "link",
        "links": [
            "e7e584fba8986c15"
        ],
        "x": 1305,
        "y": 180,
        "wires": []
    },
    {
        "id": "669ac6e3dde76840",
        "type": "subflow:317a0e3edab25639",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "",
        "x": 460,
        "y": 200,
        "wires": [
            [
                "c2da631ae4d47e52"
            ],
            []
        ]
    },
    {
        "id": "c2da631ae4d47e52",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "function 19",
        "func": "\n    //Grup KODLARINA GORE KISIT EKLENMISTIR\nmsg.url = env.get(\"NetsisUrl\") + \"api/v2/Items?q=GRUP_KODU='CIVATA' and KOD_1='SAPLAMA'\";\n    msg.headers = {\n        Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n    };\n    // netsis stok kartlarını her api döndugunde dizi içerisine alıcaz \n    global.set('netsisStockCardList', []);\n\n    // STOK KODLARINI AYRI BIR ARRAYDA TUTUYORUZ \nglobal.set('netsisStockCode', []);\n    return  msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "81464857806c43dc"
            ]
        ]
    },
    {
        "id": "81464857806c43dc",
        "type": "http request",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 880,
        "y": 200,
        "wires": [
            [
                "6a86e844d23f4744"
            ]
        ]
    },
    {
        "id": "6a86e844d23f4744",
        "type": "function",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "Process Items",
        "func": " \nlet nextUrl = msg.payload.Next?.Href;\nlet totalCount = msg.payload.TotalCount;\n\n \nmsg.nextUrl = msg.payload.Next?.Href;\nmsg.totalCount = msg.payload.TotalCount;\n\n // eklenen  diziyi alıyoruz \nlet netsisStockCardList = global.get('netsisStockCardList');\nlet netsisStockCode = global.get('netsisStockCode');\n\n//stok kodlarını bir array'e alıyorz \nmsg.payload?.Data?.map(item => netsisStockCode.push(item.StokTemelBilgi.Stok_Kodu));\nglobal.set('netsisStockCode', netsisStockCode);\nmsg.netsisStockCode = global.get('netsisStockCode');\n//////\n//netsis stoklarını ile ilgili işlem \nmsg.payload?.Data?.map(item => netsisStockCardList.push(item));\nglobal.set('netsisStockCardList', netsisStockCardList);\nmsg.listNetsisStockCard = global.get('netsisStockCardList');\n\n \n\nif (nextUrl) {\n    msg.url = nextUrl;\n    msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\n    return [msg, null,null];\n} \nelse if (msg.statusCode === 401){\n    return [null, null,msg];\n}\nelse{\n    global.set('netsisStockCardList', null);\n    msg.url=null;\n    return [null, msg, null];\n}\n\n ",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 200,
        "wires": [
            [
                "710b26fe2c592f23"
            ],
            [
                "a3ef115fa5f43ea4"
            ],
            [
                "619be310e265ce67"
            ]
        ]
    },
    {
        "id": "710b26fe2c592f23",
        "type": "link out",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "NextUrl(Netsis  To SFORIN Stock CardOut)",
        "mode": "link",
        "links": [
            "4230925012844847"
        ],
        "x": 1205,
        "y": 120,
        "wires": []
    },
    {
        "id": "4230925012844847",
        "type": "link in",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "NextUrl(Netsis  To SFORIN Stock CardIn)",
        "links": [
            "710b26fe2c592f23"
        ],
        "x": 775,
        "y": 120,
        "wires": [
            [
                "81464857806c43dc"
            ]
        ]
    },
    {
        "id": "619be310e265ce67",
        "type": "subflow:317a0e3edab25639",
        "z": "7defd81363e19950",
        "g": "d03a79754f9c3a19",
        "name": "",
        "env": [
            {
                "name": "Status",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1290,
        "y": 240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7c009849b9a4b74e",
        "type": "comment",
        "z": "7defd81363e19950",
        "name": "",
        "info": "",
        "x": 540,
        "y": 40,
        "wires": []
    },
    {
        "id": "647468f33342bbf4",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "name": "Tamam",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "d8166d4f40a6501b",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "2a7f0d36b27a0556",
        "type": "differences",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCodes",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 820,
        "y": 560,
        "wires": [
            [
                "ff9df51942af402a"
            ]
        ]
    },
    {
        "id": "009d56552acd23b5",
        "type": "MSSQL",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 380,
        "y": 560,
        "wires": [
            [
                "517aeab92d1cf534"
            ]
        ]
    },
    {
        "id": "4ad699fbc1c85e5c",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT A.STOK_KODU, GRUP_KODU, OLCU_BR1, PAY_1, PAYDA_1, BARKOD1, BARKOD2, DBO.TRK(STOK_ADI) AS STOK_ADI, B.TUR\n    FROM TBLSTSABIT A\n    LEFT JOIN TBLSTSABITEK B ON A.STOK_KODU = B.STOK_KODU\n    WHERE SUBE_KODU IN ('-1', '${branchCode}')  AND KOD_1='CMKGARAJ' AND KOD_2='YERLI'\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 560,
        "wires": [
            [
                "009d56552acd23b5"
            ]
        ]
    },
    {
        "id": "517aeab92d1cf534",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "function 21",
        "func": "msg.netsisStockCode=msg.payload;\nlet netsisStockCodes=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 560,
        "wires": [
            [
                "2a7f0d36b27a0556"
            ]
        ]
    },
    {
        "id": "ff9df51942af402a",
        "type": "change",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "05c0e6f1b19825e3"
            ]
        ]
    },
    {
        "id": "8b37983f13e60a5d",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "matchingItems",
        "func": "const netsisStockCode = msg.netsisStockCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\n\n\n \n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    netsisStockCode\n        .filter(item => item.STOK_KODU === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR ILISKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\n\nmsg.matchingItems=matchingItems;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 560,
        "wires": [
            [
                "99de14425a992694"
            ]
        ]
    },
    {
        "id": "afd43ed992b75b2e",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)In",
        "links": [
            "1bfaa5020382981a"
        ],
        "x": 85,
        "y": 500,
        "wires": [
            [
                "4ad699fbc1c85e5c"
            ]
        ]
    },
    {
        "id": "99de14425a992694",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)matchingItemsOut",
        "mode": "link",
        "links": [
            "98816bd9b74d4eb9"
        ],
        "x": 1645,
        "y": 620,
        "wires": []
    },
    {
        "id": "05c0e6f1b19825e3",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "c98479901d9e9b95",
        "g": "15cac131f8c56bbf",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1370,
        "y": 560,
        "wires": [
            [],
            [
                "8b37983f13e60a5d"
            ]
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "14fd7bd19dcbd822",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes=msg.netsisProductTypes;\nvar data = msg.matchingItems;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                 \"productType\": {\n                    \"typeCode\": item.TUR,\n                     \"definitionLang\": (netsisProductTypes.find(x => x.productTypeCode == item.TUR)?.productTypeCodeName) || \"\"\n                    \n                },\n                \"categories\": [\n                    {\n                        \"categoryCode\": item.GRUP_KODU,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"NetsisGroupCode\"\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"isBaseUnit\": true,\n                        \"factor\": item.PAY_1,\n                        \"divisor\": item.PAYDA_1,\n                        \"area\": 1,\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weightKg\": 1,\n                        \"volumeM3\": 1,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD1\n                    },\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD2\n                    }\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weighthKg\": 1,\n                        \"area\": 1,\n                        \"wigthtLimitKG\": 1,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.STOK_KODU,\n                        \"defaultDefinition\": item.STOK_ADI,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.STOK_KODU,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1160,
        "wires": [
            [
                "f855b6351fa8677f"
            ]
        ]
    },
    {
        "id": "ebaa82cd07fe202e",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Index",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "519d5dd7e0baa622"
            ],
            [
                "c68ca43737e3afd3"
            ]
        ]
    },
    {
        "id": "8103ddc7aa8148a5",
        "type": "http request",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProduct",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 970,
        "y": 1140,
        "wires": [
            [
                "ddc6d3b003a8a708"
            ]
        ]
    },
    {
        "id": "ddc6d3b003a8a708",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1140,
        "wires": [
            [
                "d8f4e316d1f97e7c",
                "570c99c5addac9f2"
            ],
            [
                "d8f4e316d1f97e7c"
            ],
            [
                "2ece615c2b13df72"
            ]
        ]
    },
    {
        "id": "c68ca43737e3afd3",
        "type": "debug",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f855b6351fa8677f",
        "type": "subflow:fa51d0694c73d14f",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "x": 520,
        "y": 1160,
        "wires": [
            [
                "ebaa82cd07fe202e"
            ]
        ]
    },
    {
        "id": "d8f4e316d1f97e7c",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)ResponseOut",
        "mode": "link",
        "links": [
            "596ed20368d22575"
        ],
        "x": 1265,
        "y": 1040,
        "wires": []
    },
    {
        "id": "98816bd9b74d4eb9",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)matchingItemsIn",
        "links": [
            "99de14425a992694"
        ],
        "x": 85,
        "y": 1140,
        "wires": [
            [
                "14fd7bd19dcbd822"
            ]
        ]
    },
    {
        "id": "ba532fba28791e9a",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Product is being shipped",
        "info": "",
        "x": 190,
        "y": 1080,
        "wires": []
    },
    {
        "id": "596ed20368d22575",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)ResponseIn",
        "links": [
            "d8f4e316d1f97e7c"
        ],
        "x": 425,
        "y": 1100,
        "wires": [
            [
                "f855b6351fa8677f"
            ]
        ]
    },
    {
        "id": "5f31d440f7140521",
        "type": "subflow:7cdf28f23984a61d",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1440,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "570c99c5addac9f2",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1080,
        "wires": [
            [
                "5f31d440f7140521"
            ]
        ]
    },
    {
        "id": "e98781f4d949c827",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1420,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e40ac389d1f41902",
        "type": "subflow:7cdf28f23984a61d",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1380,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "2ece615c2b13df72",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1200,
        "wires": [
            [
                "e40ac389d1f41902"
            ]
        ]
    },
    {
        "id": "6264233b1a16943c",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Error işlem log",
        "info": "",
        "x": 1350,
        "y": 1160,
        "wires": []
    },
    {
        "id": "519d5dd7e0baa622",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)OutTBLSTOKBAR",
        "mode": "link",
        "links": [
            "58519c213a7f5f5a"
        ],
        "x": 755,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c9c8a55bfc345060",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "",
        "info": "Netsiste stoklar için ayrı bir barkod sistemi kullanılıyor ise \nKontrol ediyorz ve sforine giden json a ekleme yapıyorz\n",
        "x": 760,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1e24bbaf141fcbbb",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "ce76bc547c1a82fe",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)InTBLSTOKBARResponse",
        "links": [
            "21882ae1acd70ff2"
        ],
        "x": 845,
        "y": 1080,
        "wires": [
            [
                "8103ddc7aa8148a5"
            ]
        ]
    },
    {
        "id": "a4819f2ac0278e60",
        "type": "http request",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Get Product",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProducts",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "74736a8b3f8aa8c4",
        "type": "complete",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "",
        "scope": [
            "a4819f2ac0278e60"
        ],
        "uncaught": false,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "a2f665fbd87176f1"
            ]
        ]
    },
    {
        "id": "1b1b9a0c2fc17b97",
        "type": "catch",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "catch errors",
        "scope": [
            "a4819f2ac0278e60"
        ],
        "uncaught": false,
        "x": 150,
        "y": 260,
        "wires": [
            [
                "b560c98ad6781ae1"
            ]
        ]
    },
    {
        "id": "da16e3cf9032d134",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 160,
        "wires": [
            [
                "a4819f2ac0278e60"
            ]
        ]
    },
    {
        "id": "b560c98ad6781ae1",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg,null];\n} else {\n    \n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 260,
        "wires": [
            [
                "fd39b5f40a5466e5"
            ],
            [
                "f285cf3109419bbe"
            ]
        ]
    },
    {
        "id": "f285cf3109419bbe",
        "type": "debug",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "135730bb62fe93ed",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 340,
        "wires": [
            [
                "1bfaa5020382981a"
            ]
        ]
    },
    {
        "id": "a2f665fbd87176f1",
        "type": "switch",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 290,
        "y": 340,
        "wires": [
            [],
            [
                "135730bb62fe93ed"
            ],
            [
                "7767f5a781a34294"
            ]
        ]
    },
    {
        "id": "7767f5a781a34294",
        "type": "debug",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Error Handler",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 380,
        "wires": []
    },
    {
        "id": "72917536637091f7",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "GetAllSFORINStockCard",
        "info": "",
        "x": 210,
        "y": 120,
        "wires": []
    },
    {
        "id": "1bfaa5020382981a",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "afd43ed992b75b2e"
        ],
        "x": 705,
        "y": 340,
        "wires": []
    },
    {
        "id": "fd39b5f40a5466e5",
        "type": "subflow:fa51d0694c73d14f",
        "z": "c98479901d9e9b95",
        "g": "fd942685049f2a2a",
        "name": "",
        "x": 420,
        "y": 160,
        "wires": [
            [
                "da16e3cf9032d134"
            ]
        ]
    },
    {
        "id": "a4cde71b52a9ef20",
        "type": "comment",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 160,
        "y": 840,
        "wires": []
    },
    {
        "id": "db643989eb6fd176",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.payload = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 940,
        "wires": [
            [
                "b310cfd8ddd31c00"
            ]
        ]
    },
    {
        "id": "b310cfd8ddd31c00",
        "type": "MSSQL",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "mssqlCN": "df8c0b88.91b0a8",
        "name": "",
        "query": "",
        "outField": "payload",
        "x": 520,
        "y": 940,
        "wires": [
            [
                "36365d0ca790f463"
            ]
        ]
    },
    {
        "id": "58519c213a7f5f5a",
        "type": "link in",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)InTBLSTOKBAR",
        "links": [
            "519d5dd7e0baa622"
        ],
        "x": 125,
        "y": 920,
        "wires": [
            [
                "db643989eb6fd176"
            ]
        ]
    },
    {
        "id": "21882ae1acd70ff2",
        "type": "link out",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "Netsis  To SFORIN Stock Card(MMSQL)OutTBLSTOKBARResponse",
        "mode": "link",
        "links": [
            "1e24bbaf141fcbbb"
        ],
        "x": 905,
        "y": 940,
        "wires": []
    },
    {
        "id": "36365d0ca790f463",
        "type": "function",
        "z": "c98479901d9e9b95",
        "g": "73465d896b75a003",
        "name": "function 22",
        "func": "msg.payload.forEach(item=>\n{\nmsg.item.data[0].barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 940,
        "wires": [
            [
                "21882ae1acd70ff2"
            ]
        ]
    },
    {
        "id": "e4f6d6ba529f892a",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "name": "NetsistoSforinCategoriesIntegration",
        "info": "Netsis'teki grup kodları\nSFORINDEKI stok kategorileri",
        "x": 180,
        "y": 60,
        "wires": []
    },
    {
        "id": "8f65485889305345",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "name": "Create Sforin Produc Category",
        "info": "",
        "x": 190,
        "y": 420,
        "wires": []
    },
    {
        "id": "17fb20973f73953a",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "name": "Tamamdır",
        "info": "",
        "x": 140,
        "y": 20,
        "wires": []
    },
    {
        "id": "4f41d41ee83aa6b4",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 550,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "c3a334e5f6423d0e",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    return [msg, null];\n}\nelse {\n    // Handle error\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 600,
        "wires": [
            [
                "9ea82e46bbb474ec"
            ],
            [
                "581038513876f866"
            ]
        ]
    },
    {
        "id": "1f545552c4cdec0e",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "GenerateGroupCodeFunc",
        "func": "msg.payload = {\n   \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                \"_id\": \"\",\n                \"categoryCode\": \"NetsisGroupCode\",\n                \"definition_lang\": \"Netsis Grup Kodları\",\n                \"parentCategory\": null\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n};\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = global.get(\"SFORIN_URL\");\n\nreturn [msg, null];;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 480,
        "wires": [
            [
                "4f41d41ee83aa6b4"
            ]
        ]
    },
    {
        "id": "1aeacf026d672ef6",
        "type": "link in",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "link in 9",
        "links": [
            "08592d08724757d9"
        ],
        "x": 95,
        "y": 480,
        "wires": [
            [
                "1f545552c4cdec0e"
            ]
        ]
    },
    {
        "id": "9ea82e46bbb474ec",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "d36a51f07a52abc3"
        ],
        "x": 485,
        "y": 580,
        "wires": []
    },
    {
        "id": "a19c837ad4e696df",
        "type": "complete",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "scope": [
            "4f41d41ee83aa6b4"
        ],
        "uncaught": false,
        "x": 130,
        "y": 640,
        "wires": [
            [
                "c3a334e5f6423d0e"
            ]
        ]
    },
    {
        "id": "326fcab0bd8dc6bf",
        "type": "catch",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "scope": [
            "4f41d41ee83aa6b4"
        ],
        "uncaught": false,
        "x": 110,
        "y": 680,
        "wires": [
            [
                "acec8daf85dc23fe"
            ]
        ]
    },
    {
        "id": "d2c0ad086e181908",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "CheckNetsisGroupCode",
        "func": "msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\n// Bizim  datamızda netsisten gelen grup kodları alabilmemiz için NetsisGroupCode varmı yokmu kontrol ediyoruz \nmsg.payload = {\n    \"requestId\": \"\",\n    \"sender\": \"\",\n    \"data\": [ \n        {\n            \"categoryCode\": \"MAMUL\"\n        }\n    ],\n    \"current\": [\n        {\n            \"key\": \"\",\n            \"value\": \"\"\n        }\n    ]\n};\nmsg.SFORIN_URL = global.get(\"SFORIN_URL\");\n\nreturn msg;;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 140,
        "wires": [
            [
                "328284d6746e3a1b"
            ]
        ]
    },
    {
        "id": "328284d6746e3a1b",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "Sforin Category1",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetProductCategoriesByCode",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 850,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "ae927ebb0636aba9",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "function 23",
        "func": "let items = msg.payload.data||[];\n\nif (items.length > 0) {\n    return [ null,msg];\n} else {\n     return [msg, null];\n    \n    \n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 260,
        "wires": [
            [
                "08592d08724757d9"
            ],
            [
                "15a32a89145b5edd"
            ]
        ]
    },
    {
        "id": "15a32a89145b5edd",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "NetsisToSFORINFieldIntegrationRootOut",
        "mode": "link",
        "links": [
            "d36a51f07a52abc3"
        ],
        "x": 445,
        "y": 280,
        "wires": []
    },
    {
        "id": "08592d08724757d9",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "GenerateGroupCodeOut 4",
        "mode": "link",
        "links": [
            "1aeacf026d672ef6"
        ],
        "x": 445,
        "y": 240,
        "wires": []
    },
    {
        "id": "c962bc8e9e9ea4e4",
        "type": "complete",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "scope": [
            "328284d6746e3a1b"
        ],
        "uncaught": false,
        "x": 130,
        "y": 260,
        "wires": [
            [
                "ae927ebb0636aba9"
            ]
        ]
    },
    {
        "id": "f73a859e799483a9",
        "type": "catch",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "scope": [
            "328284d6746e3a1b"
        ],
        "uncaught": false,
        "x": 110,
        "y": 340,
        "wires": [
            [
                "acec8daf85dc23fe"
            ]
        ]
    },
    {
        "id": "45bfbb5076e745f8",
        "type": "subflow:fa51d0694c73d14f",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "x": 340,
        "y": 140,
        "wires": [
            [
                "d2c0ad086e181908"
            ]
        ]
    },
    {
        "id": "1c8d52dc82e34ace",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Sforin Category",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 440,
        "y": 900,
        "wires": [
            [
                "ac6b5b6ef8fb49b4"
            ]
        ]
    },
    {
        "id": "bccc7e7eb7b3fbd1",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Get Sforin Category",
        "func": " msg.SFORIN_URL = global.get(\"SFORIN_URL\");\n msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 900,
        "wires": [
            [
                "1c8d52dc82e34ace"
            ]
        ]
    },
    {
        "id": "7a34cae2444eaeb5",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = flow.get(\"netsisGroupCode\");\nlet sforinCategory = flow.get(\"sforinCategory\");\n\nif (!netsisGroupCode) {\n  return [{ status: false }, null];\n}\n\nif (!sforinCategory) {\n  return [{ status: false }, null];\n}\n\n// Map the incoming objects to Sets based on their respective codes\nlet listNetsisGroupCode = new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM]));\nlet listSforinCategoryCode = new Set(sforinCategory.map(item => item.categoryCode));\n\n \nmsg.arrayNetsisGroupCode = Array.from(listNetsisGroupCode);\nmsg.arraySforinCategoryCode = Array.from(listSforinCategoryCode);\nmsg.netsisGroupCodeList=Array.from(listNetsisGroupCode).flatMap(x=>x[0])\n\nmsg.status = true;\n   \nreturn [null, msg];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 880,
        "wires": [
            [
                "8fb2ea515478697a"
            ],
            [
                "80ac82dcf60b219b"
            ]
        ]
    },
    {
        "id": "8fb2ea515478697a",
        "type": "link out",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "NetsisToSforinFieldIntegrationCompareCategoryCodesOut",
        "mode": "link",
        "links": [
            "15af2bce890a94a9"
        ],
        "x": 1135,
        "y": 820,
        "wires": []
    },
    {
        "id": "15af2bce890a94a9",
        "type": "link in",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "NetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "8fb2ea515478697a"
        ],
        "x": 985,
        "y": 820,
        "wires": [
            [
                "7a34cae2444eaeb5"
            ]
        ]
    },
    {
        "id": "ac6b5b6ef8fb49b4",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Sforin Category Result",
        "func": "flow.set(\"sforinCategory\", msg.payload.data); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 900,
        "wires": [
            [
                "7a34cae2444eaeb5"
            ]
        ]
    },
    {
        "id": "dec8892eae27f937",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "ConvertJson",
        "func": "let items = msg.matchingItems;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nmsg.missingCategoryCodes = items.map(item => {  \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                \"_id\": \"\",\n                \"categoryCode\": item[0],\n                \"definition_lang\": item[1],\n                \"parentCategory\": \"NetsisGroupCode\"\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.index = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1000,
        "wires": [
            [
                "c4a0097bf01382b0"
            ]
        ]
    },
    {
        "id": "402dabd67e050964",
        "type": "http request",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductCategory",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1630,
        "y": 1140,
        "wires": [
            [
                "bc1fec0a3b9e19fa"
            ]
        ]
    },
    {
        "id": "bc1fec0a3b9e19fa",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    msg.statusCode = null\n    return [msg, null];\n}\n\nelse {\n    // Handle error\n  \n    return [null, msg];\n   \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 1220,
        "wires": [
            [
                "a32df7934f2f7d5c",
                "3a6991a4927476c1"
            ],
            [
                "f81eb83b2bcee90c"
            ]
        ]
    },
    {
        "id": "a32df7934f2f7d5c",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "matchingItemsIndex",
        "func": "\nlet items = msg.missingCategoryCodes;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];; // All items processed\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1140,
        "wires": [
            [
                "402dabd67e050964"
            ],
            []
        ]
    },
    {
        "id": "d36a51f07a52abc3",
        "type": "link in",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "NetsisToSFORINFieldIntegrationRootIn",
        "links": [
            "15a32a89145b5edd",
            "9ea82e46bbb474ec"
        ],
        "x": 75,
        "y": 840,
        "wires": [
            [
                "873c9acca903bcab"
            ]
        ]
    },
    {
        "id": "ff921d62aaaa9b18",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "matchingItems",
        "func": "const arrayNetsisGroupCode = msg.arrayNetsisGroupCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\nconst matchingItems = transferStockItemsArray.flatMap(groupCode =>\n    arrayNetsisGroupCode.filter(item => item[0] === groupCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 960,
        "wires": [
            [
                "dec8892eae27f937"
            ]
        ]
    },
    {
        "id": "cc0c4ab3a7a55930",
        "type": "change",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1320,
        "y": 920,
        "wires": [
            [
                "ff921d62aaaa9b18"
            ]
        ]
    },
    {
        "id": "80ac82dcf60b219b",
        "type": "differences",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisGroupCodeList",
        "leftInputType": "msg",
        "rightInput": "arraySforinCategoryCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1300,
        "y": 880,
        "wires": [
            [
                "cc0c4ab3a7a55930"
            ]
        ]
    },
    {
        "id": "db468ab2866442ad",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Create Netsis To Sforin Product Category",
        "info": "",
        "x": 240,
        "y": 800,
        "wires": []
    },
    {
        "id": "c4a0097bf01382b0",
        "type": "subflow:fa51d0694c73d14f",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "x": 1340,
        "y": 1060,
        "wires": [
            [
                "a32df7934f2f7d5c"
            ]
        ]
    },
    {
        "id": "7878c13206b72e35",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1680,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "f81eb83b2bcee90c",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1320,
        "wires": [
            [
                "7878c13206b72e35"
            ]
        ]
    },
    {
        "id": "8b38d586a642782a",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Error işlem log",
        "info": "",
        "x": 1650,
        "y": 1280,
        "wires": []
    },
    {
        "id": "df9cd569a43e426b",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1200,
        "y": 1260,
        "wires": []
    },
    {
        "id": "3a6991a4927476c1",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "ConvertLogData",
        "func": "// msg.logData=JSON.stringify(msg.item);\nmsg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1300,
        "wires": [
            [
                "1a95acdff02ab213"
            ]
        ]
    },
    {
        "id": "1a95acdff02ab213",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINFieldIntegration(MMSQL)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "9f7e741cb944e101",
        "type": "subflow:d296b4008b6072d8",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": "SELECT GRUP_KOD, DBO.TRK(GRUP_ISIM)GRUP_ISIM FROM TBLSTGRUP",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 860,
        "wires": [
            [
                "e9b9b895fb84b45f"
            ],
            []
        ]
    },
    {
        "id": "e9b9b895fb84b45f",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "6060336732b76733",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\nmsg.payload = null;\nflow.set(\"netsisGroupCode\", items);\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f6b3a5a457ec15d7",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 780,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "581038513876f866",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 600,
        "wires": [
            [
                "f6b3a5a457ec15d7"
            ]
        ]
    },
    {
        "id": "6f0bf6534965f587",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "0bd7c6a05fec8e32",
        "name": "Error işlem log",
        "info": "",
        "x": 750,
        "y": 560,
        "wires": []
    },
    {
        "id": "e62b31aae00b8535",
        "type": "subflow:7cdf28f23984a61d",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 680,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "acec8daf85dc23fe",
        "type": "function",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.error.message;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "e62b31aae00b8535"
            ]
        ]
    },
    {
        "id": "422063b50a6c71c4",
        "type": "comment",
        "z": "01bb3059fc08565d",
        "g": "1898c16223ea88ea",
        "name": "Error işlem log",
        "info": "",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "30ad72d5598c858d",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "name": "Attention User",
        "info": "Netsis'in Databaseinde Stoklarun türleri tutulmadığından\nManuel Olarak ayarlanıcaktır!!!\nDaha sonralarında ekleme oldıgında manuel düzenleme sağlanıcaktır.\n",
        "x": 250,
        "y": 140,
        "wires": []
    },
    {
        "id": "2444a4409e75f27f",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "ProductType is being shipped",
        "info": "",
        "x": 280,
        "y": 560,
        "wires": []
    },
    {
        "id": "b71d539f58e7dd19",
        "type": "link in",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "NetsisToSFORINProductTypeIntegrationIN",
        "links": [
            "50e71062bd312459",
            "c766752a5b2323da"
        ],
        "x": 205,
        "y": 620,
        "wires": [
            [
                "fac8368732c8873e"
            ]
        ]
    },
    {
        "id": "731e19687a0d03c7",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "function 24",
        "func": "\nlet items = msg.netsisProductTypeList;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.payload = item;\nmsg.item = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "9cfe6fbdaa957b93"
            ],
            []
        ]
    },
    {
        "id": "9cfe6fbdaa957b93",
        "type": "http request",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProductTypeAsync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 860,
        "y": 600,
        "wires": [
            [
                "60402cd7e995d83c"
            ]
        ]
    },
    {
        "id": "60402cd7e995d83c",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 600,
        "wires": [
            [
                "c766752a5b2323da",
                "a36e29b0d3474fe6"
            ],
            [
                "c766752a5b2323da"
            ],
            [
                "90048689613f79ce"
            ]
        ]
    },
    {
        "id": "c766752a5b2323da",
        "type": "link out",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Response(NetsisToSFORINProductTypeIntegrationOUT)",
        "mode": "link",
        "links": [
            "b71d539f58e7dd19"
        ],
        "x": 1185,
        "y": 560,
        "wires": []
    },
    {
        "id": "01d0b27220dd17fd",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Error işlem log",
        "info": "",
        "x": 1190,
        "y": 720,
        "wires": []
    },
    {
        "id": "90048689613f79ce",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription =msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 760,
        "wires": [
            [
                "0a43e71004f067ba"
            ]
        ]
    },
    {
        "id": "0a43e71004f067ba",
        "type": "subflow:7cdf28f23984a61d",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINProductTypeIntegration",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1220,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "214930c6cfe1deae",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 920,
        "y": 720,
        "wires": []
    },
    {
        "id": "a36e29b0d3474fe6",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "ConvertLogData",
        "func": "// msg.logData=JSON.stringify(msg.item);\nmsg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 760,
        "wires": [
            [
                "cf7c82521c4f344b"
            ]
        ]
    },
    {
        "id": "cf7c82521c4f344b",
        "type": "subflow:7cdf28f23984a61d",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "env": [
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_ProductTypeIntegration_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis  ",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "NetsisToSFORINProductTypeIntegration",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN ",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 940,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "fac8368732c8873e",
        "type": "subflow:fa51d0694c73d14f",
        "z": "8436fe1a449a7297",
        "g": "7d4587540a2c8610",
        "name": "",
        "x": 380,
        "y": 620,
        "wires": [
            [
                "731e19687a0d03c7"
            ]
        ]
    },
    {
        "id": "400d8b1d02aa7132",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "ConvertJsonSFORIN ProdıctType",
        "func": "msg.netsisProductTypeList=[];\nmsg.matchingItems.forEach(type => {\n    msg.netsisProductTypeList.push({\n        requestId: \"\",\n        sender: \"Node-red\",\n        data: [\n            {\n                typeCode: type.productTypeCode,\n                definitionLang: type.productTypeCodeName\n            }\n        ],\n        current: [\n            {\n                key: \"\",\n                value: \"\"\n            }\n        ]\n    });\n});\nmsg.index=0;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 460,
        "wires": [
            [
                "50e71062bd312459"
            ]
        ]
    },
    {
        "id": "685e2ce6255c4888",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "headers",
        "func": "msg.SFORIN_URL = env.get(\"SFORIN_URL\");\n\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 300,
        "wires": [
            [
                "a44ddd7f28361bba"
            ]
        ]
    },
    {
        "id": "a44ddd7f28361bba",
        "type": "http request",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "Get  All ProductType",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllProductTypesAsync",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 800,
        "y": 300,
        "wires": [
            [
                "f73238c7fe7374c7"
            ]
        ]
    },
    {
        "id": "f73238c7fe7374c7",
        "type": "change",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sforinProductTypes",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 300,
        "wires": [
            [
                "4e482c5861f36862"
            ]
        ]
    },
    {
        "id": "c53ac1b1ca0a5db4",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "GetSforinProductType",
        "info": "Tüm SFORIN de olan product kodlarını cekıp\nManuel Olarak tanımladığımız netsisi için\nolan typelar ile karşılaştırılıp ekleme yapılacaktır",
        "x": 280,
        "y": 240,
        "wires": []
    },
    {
        "id": "7b5cfbcf6a0e3f56",
        "type": "comment",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "NetsisProductType",
        "info": "",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "9000d874e5477995",
        "type": "differences",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisProductTypsCode",
        "leftInputType": "msg",
        "rightInput": "sforinProductTypeCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1560,
        "y": 340,
        "wires": [
            [
                "22c3c138b89ecb4f"
            ]
        ]
    },
    {
        "id": "22c3c138b89ecb4f",
        "type": "change",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 380,
        "wires": [
            [
                "82e72b5056fab3c7"
            ]
        ]
    },
    {
        "id": "82e72b5056fab3c7",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "matchingItems",
        "func": "const arrayNetsisProductTypes = msg.netsisProductTypes;\nconst transferStockItemsArray = msg.transferStockItems;\n \nconst matchingItems = transferStockItemsArray.flatMap(typeCode =>\n    arrayNetsisProductTypes.filter(item => item.productTypeCode === typeCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 420,
        "wires": [
            [
                "400d8b1d02aa7132"
            ]
        ]
    },
    {
        "id": "4e482c5861f36862",
        "type": "function",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "SforinProductTypeMap",
        "func": "msg.sforinProductTypeCode=[]\nlet items=msg.sforinProductTypes;\n\nitems.forEach(typeCode=>{\n    msg.sforinProductTypeCode.push(typeCode.typeCode)\n})\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "770459b346fe2747"
            ]
        ]
    },
    {
        "id": "50e71062bd312459",
        "type": "link out",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "NetsisToSFORINProductTypeIntegrationOUT",
        "mode": "link",
        "links": [
            "b71d539f58e7dd19"
        ],
        "x": 1805,
        "y": 460,
        "wires": []
    },
    {
        "id": "770459b346fe2747",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "x": 1530,
        "y": 300,
        "wires": [
            [
                "9000d874e5477995"
            ],
            []
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "4ebd94f2f25892f8",
        "type": "subflow:fa51d0694c73d14f",
        "z": "8436fe1a449a7297",
        "g": "bdf338825a745484",
        "name": "",
        "x": 440,
        "y": 300,
        "wires": [
            [
                "685e2ce6255c4888"
            ]
        ]
    },
    {
        "id": "f73a9fe1942c1b07",
        "type": "http request",
        "z": "79ed7abbe7cc27ac",
        "name": "GetAllIntegrationParameters",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllIntegrationParameters",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 770,
        "y": 130,
        "wires": [
            []
        ]
    },
    {
        "id": "6acf32846755a198",
        "type": "complete",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "scope": [
            "f73a9fe1942c1b07"
        ],
        "uncaught": false,
        "x": 190,
        "y": 360,
        "wires": [
            [
                "81f86561d7aa798e"
            ]
        ]
    },
    {
        "id": "fe43335605ecaf53",
        "type": "catch",
        "z": "79ed7abbe7cc27ac",
        "name": "catch errors",
        "scope": [
            "f73a9fe1942c1b07"
        ],
        "uncaught": false,
        "x": 180,
        "y": 260,
        "wires": [
            [
                "fe4f902a73a2387d"
            ]
        ]
    },
    {
        "id": "1f17df2fd7d8225d",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "params",
        "func": "if (env.get('Type')) {\n\n    // post ile gelenlerde gelen veriyi output'ta aynı şekilde verilmek üzer düzenlendi\n   msg.msgCopy={...msg} \n        \n\n\n}\n\nif (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 130,
        "wires": [
            [
                "f73a9fe1942c1b07"
            ]
        ]
    },
    {
        "id": "fe4f902a73a2387d",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 250,
        "wires": [
            [
                "23bb345fb1f5df86",
                "80fce14012068866"
            ]
        ]
    },
    {
        "id": "3d28130e9ef11fe2",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "/GetAllIntegrationParametersMap",
        "func": "var jsonPayload = msg.payload.data; // Gelen veriyi al\nvar allIntegrationParameters = []; // Tüm işlenmiş veriler burada tutulacak\n \n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(params => {\n        // Gelen her bir parametre için işlenmiş veri\n        var processedProduct = {\n            id: params._id || \"\", // _id'yi al\n            description: params.description,\n            code: params.code || \"\", // code alanı\n            type: params.type || \"\", // type alanı\n            flowName: params.flowName || \"\", // flowName alanı\n            flowEndPoint: params.flowEndPoint || \"\", // flowEndPoint alanı\n            cron: params.cron || \"\", // cron ifadesi\n            lastRun: params.lastRun || null, // lastRun tarihi\n            status: params.status || \"\", // status alanı\n            direction: params.direction || \"\", // direction alanı\n            path: params.path || \"\", // path alanı\n            isDebugMode:params.isDebugMode||false,\n            parameters: params.parameters||[]\n        };\n\n        // İşlenmiş veriyi allIntegrationParameters dizisine ekle\n        allIntegrationParameters.push(processedProduct);\n    });\n}\n\n// msg.payload'u işlenmiş veri ile değiştir\nmsg.allIntegrationParameters = allIntegrationParameters;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 320,
        "wires": [
            [
                "a85bd8119f73ba09"
            ]
        ]
    },
    {
        "id": "81f86561d7aa798e",
        "type": "switch",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 360,
        "y": 350,
        "wires": [
            [
                "a8fead0fa124fac6",
                "fe4f902a73a2387d"
            ],
            [
                "a8fead0fa124fac6"
            ],
            [
                "a8fead0fa124fac6"
            ]
        ]
    },
    {
        "id": "683f3f8aa3fcc5f9",
        "type": "subflow:7cdf28f23984a61d",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "Node-Red-Inregrations",
                "type": "str"
            }
        ],
        "x": 860,
        "y": 250,
        "wires": [
            []
        ]
    },
    {
        "id": "763be7947fb7aaca",
        "type": "subflow:fa51d0694c73d14f",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 275,
        "y": 490,
        "wires": [
            [
                "a85bd8119f73ba09"
            ]
        ],
        "l": false
    },
    {
        "id": "1217ca74696da277",
        "type": "http request",
        "z": "79ed7abbe7cc27ac",
        "name": "GetAllIntegrationPaths",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/GetAllIntegrationPaths",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 750,
        "y": 490,
        "wires": [
            []
        ]
    },
    {
        "id": "9ffbc8e4ae9463dd",
        "type": "complete",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "scope": [
            "1217ca74696da277"
        ],
        "uncaught": false,
        "x": 180,
        "y": 630,
        "wires": [
            [
                "4d52d9e55adc2112"
            ]
        ]
    },
    {
        "id": "7e46e158062ccd7c",
        "type": "catch",
        "z": "79ed7abbe7cc27ac",
        "name": "catch errors",
        "scope": [
            "1217ca74696da277"
        ],
        "uncaught": false,
        "x": 180,
        "y": 550,
        "wires": [
            [
                "3f6ea9b294813e58"
            ]
        ]
    },
    {
        "id": "a85bd8119f73ba09",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n \nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\n  \nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 490,
        "wires": [
            [
                "1217ca74696da277"
            ]
        ]
    },
    {
        "id": "3f6ea9b294813e58",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "retry logic",
        "func": "msg.retrie || 0\nmsg.errorMesaj=\"\";\nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return msg;\n} else {\n    node.error('Maximum retries reached', msg);\n    return null;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 550,
        "wires": [
            [
                "1e058b1c51380b2e",
                "763be7947fb7aaca"
            ]
        ]
    },
    {
        "id": "8d9f039cb17dbbed",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "GetAllIntegrationPaths",
        "func": "var jsonPayload = msg.payload.data; // Gelen veriyi al\nvar allIntegrationCode = []; // Tüm işlenmiş veriler burada tutulacak\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(params => {\n        // Gelen her bir parametre için işlenmiş veri\n        var getAllIntegrationPath = {\n            path:params.path ||\"\",\n            ip:params.ip ||\"\",\n            user:params.user ||\"\",\n            pass:params.pass ||\"\",\n            server:params.server ||\"\",\n            domain:params.domain ||\"\",\n            tokenEndPoint:params.tokenEndPoint||\"\",\n            collection: params.collection || \"\",\n            database: params.database || \"\"\n        };\n\n        // İşlenmiş veriyi allIntegrationParameters dizisine ekle\n        allIntegrationCode.push(getAllIntegrationPath);\n    });\n}\n\n// msg.payload'u işlenmiş veri ile değiştir\nmsg.allIntegrationCode = allIntegrationCode;\nglobal.set('allIntegrationCode', allIntegrationCode)\nglobal.set('allIntegrationParameters', msg.allIntegrationParameters)\nif (env.get('Type')) {\n    \n    msg.msgCopy.propIntegration = msg.allIntegrationParameters.find(x => x.type == env.get('Type'));\n     \n     \n    return msg.msgCopy;\n    \n}\nelse {\n        msg = {\n            integrationParameter_FlowName:msg.integrationParameter_FlowName||'',\n            allIntegrationCode: allIntegrationCode,\n            allIntegrationParameters: msg.allIntegrationParameters\n        };\n}\n\n\n// Mesajı döndürün\nreturn { msg };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "4d52d9e55adc2112",
        "type": "switch",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 440,
        "y": 630,
        "wires": [
            [
                "3f6ea9b294813e58"
            ],
            [
                "7cb0ec8bdf853b7a"
            ],
            [
                "7cb0ec8bdf853b7a"
            ]
        ]
    },
    {
        "id": "c7b3365059833bd0",
        "type": "subflow:7cdf28f23984a61d",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 950,
        "y": 550,
        "wires": [
            []
        ]
    },
    {
        "id": "2270d2a9a47fa455",
        "type": "comment",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "info": "Hangi flow içerinden hangi db connection a ihtiyaç duyutor ise onları cekiyoruz",
        "x": 120,
        "y": 320,
        "wires": []
    },
    {
        "id": "23bb345fb1f5df86",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "LogJson",
        "func": "\n\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\n\n// Populate the data object dynamically\nconst data = [{\n   \n    dataKey: \"GetAllIntegrationParameters\" || \"\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"No message provided\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"token\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData:\"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(flow.get('GetTokenParams') || {}), // Serialized request payload\n    responsePayload: JSON.stringify(msg.errorMesaj || {}) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 250,
        "wires": [
            [
                "683f3f8aa3fcc5f9"
            ]
        ]
    },
    {
        "id": "a8fead0fa124fac6",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload = {};\nif (Array.isArray(result?.data) && result.data.length > 0) {\n    responsePayload = result.data[0];\n} \n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"GetAllIntegrationParameters\" || \"\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"No message provided\", // Fallback message\n    jobResult: result?.jobResult || 0, // Job result from payload or default\n    integrationName: \"token\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(null || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 310,
        "wires": [
            [
                "3d28130e9ef11fe2",
                "683f3f8aa3fcc5f9"
            ]
        ]
    },
    {
        "id": "1e058b1c51380b2e",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "LogJson",
        "func": "\n\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\n\n// Populate the data object dynamically\nconst data = [{\n   \n    dataKey:\"GetAllIntegrationPaths\"|| \"\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"No message provided\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData:\"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(flow.get('GetTokenParams') || {}), // Serialized request payload\n    responsePayload: JSON.stringify(msg.errorMesaj || {}) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 550,
        "wires": [
            [
                "c7b3365059833bd0"
            ]
        ]
    },
    {
        "id": "7cb0ec8bdf853b7a",
        "type": "function",
        "z": "79ed7abbe7cc27ac",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload = {};\nif (Array.isArray(result?.data) && result.data.length > 0) {\n    responsePayload = result.data[0];\n} \n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"GetAllIntegrationPaths\" || \"\", // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"No message provided\", // Fallback message\n    jobResult: result?.jobResult || 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(null || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 630,
        "wires": [
            [
                "c7b3365059833bd0",
                "8d9f039cb17dbbed"
            ]
        ]
    },
    {
        "id": "80fce14012068866",
        "type": "subflow:fa51d0694c73d14f",
        "z": "79ed7abbe7cc27ac",
        "name": "",
        "x": 245,
        "y": 160,
        "wires": [
            [
                "1f17df2fd7d8225d"
            ]
        ],
        "l": false
    },
    {
        "id": "1590916a9f353689",
        "type": "function",
        "z": "d296b4008b6072d8",
        "name": "MSSQL Business",
        "func": "let mssqlData = null;\nlet allIntegrationCode = global.get('allIntegrationCode');\n \n// debug params  true ise query ve result alıyoruz\nconst isDubug = msg?.propIntegration?.isDebugMode ||false; //default false\nmsg.isDubug=isDubug;\nlet path=msg?.propIntegration?.path||\"\";\nif (allIntegrationCode) {\n    // Veriyi başarıyla aldınız, işlem yapabilirsiniz\n    //ÜSTE OLAN YORUM SATIRI ACILACAK ALT TARAF KAPANICAK CANLIDA\n   // mssqlData = allIntegrationCode.find(item => item.path === path);\n     mssqlData = allIntegrationCode.find(item => item.path == \"MSSQLv_1.0\");\n    \n     // node.warn(mssqlData);\n}\n\nif (mssqlData === null) {\n    node.error(\"MSSQL configuration not found.\");\n    return;\n}\n\n\n\nconst sql = global.get('mssql');\nconst query = (msg.query && msg.query !== \"\") ? msg.query : env.get('query')  ;\n\n if(isDubug){\n    msg.reqQuery=query;\n }\n\n//node.warn(msg.query);\n \n//node.warn(\"msg.propIntegration.path:  \"+msg.propIntegration.path);\n\nif (!sql) {\n    node.error('MSSQL module not found in global context.');\n    return;\n}\n\n\nconst user = mssqlData.user;\nconst password = mssqlData.pass;\nconst server = mssqlData.ip;\nconst database = mssqlData.database; // Make sure this is correctly mapped to the database name\nconst config = {\n    user: user,\n    password: password,\n    server: server,\n    database: database,\n    options: {\n        encrypt: false,  // Set to true for Azure or encrypted connections\n        enableArithAbort: true  // To handle certain arithmetic operations more safely\n    }\n};\n// Log the found config\n// node.warn(config);\n(async () => {\n    // MSSQL configuration\n  \n    let pool;\n\n    try {\n        // Establishing connection to the MSSQL server\n        pool = await sql.connect(config);\n        // Execute the query and retrieve results\n        const result = await pool.request().query(query);\n\n        // Return the result to the first output\n        msg.payload = result;\n        node.send([msg, null]);\n\n    } catch (err) {\n        // Log connection or query errors and send to second output\n        msg = { ...msg,\n            error: 'MSSQL connection/query error: ' + err.message\n        };\n        msg.errorDescription = msg.error;\n        node.send([null, msg]);\n\n    } finally {\n        // Ensure connection is closed to avoid potential memory leaks\n        if (pool) {\n            try {\n                await pool.close();\n                // node.warn('MSSQL connection closed.');\n            } catch (closeErr) {\n                // node.error('Error closing MSSQL connection: ' + closeErr.message);\n                msg = {\n                    error: 'Error closing MSSQL connection: ' + closeErr.message\n                };\n                msg.errorDescription = msg.error;\n                node.send([null, msg]);\n            }\n        }\n    }\n})();\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 210,
        "wires": [
            [
                "ae78335a68bfbfb5"
            ],
            [
                "2e8d889d55adcab8",
                "cff7fa2771cdc1c1"
            ]
        ],
        "info": "global.get('mssql');\r\n  için   setting.js dosyalarına functionGlobalContext: {\r\n    mssql: require('mssql')  // MSSQL modülünü global context'e ekleyin\r\n}\r\n tanımlıyoruz "
    },
    {
        "id": "a6c3939a6263d9a7",
        "type": "subflow:7cdf28f23984a61d",
        "z": "d296b4008b6072d8",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "MSSQL Connection",
                "type": "str"
            },
            {
                "name": "sourceSystem",
                "value": "Sql Connection",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            }
        ],
        "x": 1070,
        "y": 270,
        "wires": [
            []
        ]
    },
    {
        "id": "2e8d889d55adcab8",
        "type": "function",
        "z": "d296b4008b6072d8",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg || {}; // Ensure payload is an object\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"Mssql request failed\" || \"\",\n   // dataType: 2, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult:2 || 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: null, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info   \n    flowName: msg.flowName || \"\",   \n    requestPayload: result.isDubug == true ? result.reqQuery:\"\",\n    responsePayload: result.isDubug == true ? `${result?.error} \\n ${result?.errorDescription }` :\"\"\n}];\n \n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 250,
        "wires": [
            [
                "a6c3939a6263d9a7"
            ]
        ]
    },
    {
        "id": "ae78335a68bfbfb5",
        "type": "function",
        "z": "d296b4008b6072d8",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg || {}; // Ensure payload is an object\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"Mssql request seccues\" || \"\",\n   // dataType: 2, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult:0 , // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: null, // Status code from msg\n    duration: null, // Duration object\n    flowName: msg.flowName || \"\",  \n    additionalData: \"\", // Extra info    \n    requestPayload: result.isDubug == true ? result.reqQuery:\"\",\n    responsePayload: result.isDubug == true ? JSON.stringify(msg.payload) :\"\"\n}];\n \n \n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 170,
        "wires": [
            [
                "a6c3939a6263d9a7"
            ]
        ]
    },
    {
        "id": "cff7fa2771cdc1c1",
        "type": "debug",
        "z": "d296b4008b6072d8",
        "name": "debug 165",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 350,
        "wires": []
    },
    {
        "id": "ad4f6fbda1dd50c6",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "Get Token Params",
        "func": "\nlet inregrationFlowData=msg.inregrationFlowData;\n \n    msg.dataPayload = {\n        \"requestId\": \"\",\n        \"sender\": \"node-red\",\n        \"data\": [\n            {\n                \"_id\": inregrationFlowData.id,\n                \"code\": inregrationFlowData.code,\n                \"description\": inregrationFlowData.description,\n                \"type\":inregrationFlowData.type,\n                \"flowName\": inregrationFlowData.flowName,\n                \"flowEndPoint\": inregrationFlowData.flowEndPoint,\n                \"cron\": inregrationFlowData.cron,\n                \"lastRun\": new Date().toISOString(),\n                \"status\": env.get('status'),\n                \"direction\": inregrationFlowData.direction,\n                \"path\": inregrationFlowData.path,\n                \"isDebugMode\":inregrationFlowData.isDebugMode,\n                \"parameters\":inregrationFlowData.parameters\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n\n     \n    \nflow.set('UpdateStateIntegrationParams',msg.payload)\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "281571de8a180eb4"
            ]
        ]
    },
    {
        "id": "8fa80a8357766e9d",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "Set inregrationFlowData",
        "func": "// payload içindeki veriyi ALIYORUZ \nlet payload = msg.propIntegration;\n \n\n\n// Örnek: payload'tan bazı veriler alıp diziye ekleyebiliriz\nlet inregrationFlowData=({\n    id: payload.id,\n    code: payload.code,\n    description:payload.description,\n    type: payload.type,\n    flowName: payload.flowName,\n    flowEndPoint: payload.flowEndPoint,\n    cron: payload.cron,\n    lastRun: payload.lastRun,\n    status: payload.status,\n    direction: payload.direction,\n    path: payload.path,\n    isDebugMode:payload.isDebugMode,\n    parameters:payload.parameters\n});\n\n// Diziyi yeni payload olarak ayarlıyoruz\nmsg.inregrationFlowData = inregrationFlowData;\n\n// Mesajı bir sonraki node'a gönderiyoruz\nreturn msg;\n\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 60,
        "wires": [
            [
                "ad4f6fbda1dd50c6"
            ]
        ]
    },
    {
        "id": "281571de8a180eb4",
        "type": "function",
        "z": "0a4f4f9f59c2be20",
        "name": "params",
        "func": "if (msg.retries === undefined) {\n    msg.retries = 0;\n}\n\nmsg.flowName = msg.inregrationFlowData.flowName || \"Update State Integration Params\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "3d6f163e3aa9eaf5"
            ]
        ]
    },
    {
        "id": "3d6f163e3aa9eaf5",
        "type": "subflow:e35d14410b661a09",
        "z": "0a4f4f9f59c2be20",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/UpdateIntegrationParameters",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 50,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "66a945570b3218f8",
        "type": "subflow:8436fe1a449a7297",
        "z": "533e6c27c7c050c1",
        "name": "",
        "x": 1480,
        "y": 240,
        "wires": [
            [
                "356d75f022e409af",
                "dc2a8ad3bbb430ec"
            ],
            [
                "e214e130ac045902",
                "b355be9378d62d4f"
            ]
        ]
    },
    {
        "id": "0af745030787cf34",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1460,
        "y": 200,
        "wires": [
            [
                "66a945570b3218f8"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "b86a1ce878613e8e",
        "type": "switch",
        "z": "533e6c27c7c050c1",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "4281ad5150bcc5fa"
            ]
        ]
    },
    {
        "id": "7742927837bef88b",
        "type": "comment",
        "z": "533e6c27c7c050c1",
        "name": "",
        "info": "statusu runing'ten farklı ise çalışmaya hazır çalışıyor ise işleme alınmıyor",
        "x": 400,
        "y": 160,
        "wires": []
    },
    {
        "id": "356d75f022e409af",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1745,
        "y": 180,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "b0b68da4241e0628",
        "type": "comment",
        "z": "533e6c27c7c050c1",
        "name": "",
        "info": "RUNNING\nNOTRUNNING\nERROR\"",
        "x": 1420,
        "y": 160,
        "wires": []
    },
    {
        "id": "e214e130ac045902",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "ERROR",
                "type": "str"
            }
        ],
        "x": 1745,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "4281ad5150bcc5fa",
        "type": "function",
        "z": "533e6c27c7c050c1",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "fa949f81446b1a2a"
            ]
        ]
    },
    {
        "id": "fa949f81446b1a2a",
        "type": "cronplus",
        "z": "533e6c27c7c050c1",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 800,
        "y": 220,
        "wires": [
            [
                "a2d387d27adb8528"
            ]
        ]
    },
    {
        "id": "9e89ade18d4172cb",
        "type": "subflow:bb656f77f61addff",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1190,
        "y": 180,
        "wires": [
            [
                "0af745030787cf34"
            ]
        ]
    },
    {
        "id": "77f1dd36c10f0fd9",
        "type": "switch",
        "z": "533e6c27c7c050c1",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1035,
        "y": 220,
        "wires": [
            [
                "9e89ade18d4172cb"
            ]
        ],
        "l": false
    },
    {
        "id": "a2d387d27adb8528",
        "type": "function",
        "z": "533e6c27c7c050c1",
        "name": "function 38",
        "func": "let propIntegration=msg.payload;\n \n \nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 945,
        "y": 220,
        "wires": [
            [
                "77f1dd36c10f0fd9"
            ]
        ],
        "l": false
    },
    {
        "id": "dc2a8ad3bbb430ec",
        "type": "subflow:bb656f77f61addff",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1770,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b355be9378d62d4f",
        "type": "subflow:bb656f77f61addff",
        "z": "533e6c27c7c050c1",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "Error",
                "type": "str"
            }
        ],
        "x": 1790,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3a3f94e6f5d50b01",
        "type": "subflow:01bb3059fc08565d",
        "z": "c751949c59f2c3bc",
        "name": "",
        "x": 1160,
        "y": 220,
        "wires": [
            [
                "6b7f8e87e5e14471",
                "93ad251655ab3737"
            ],
            [
                "1e9fe47099fb17ed",
                "a1a1d305a2c25891"
            ]
        ]
    },
    {
        "id": "90fe7b0388e61ee3",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1100,
        "y": 180,
        "wires": [
            [
                "3a3f94e6f5d50b01"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7b2950f4aa48db06",
        "type": "switch",
        "z": "c751949c59f2c3bc",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "15a315f8ceb25d8c"
            ]
        ]
    },
    {
        "id": "6b7f8e87e5e14471",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1585,
        "y": 180,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "1e9fe47099fb17ed",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "ERROR",
                "type": "str"
            }
        ],
        "x": 1585,
        "y": 240,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg",
        "l": false
    },
    {
        "id": "15a315f8ceb25d8c",
        "type": "function",
        "z": "c751949c59f2c3bc",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 200,
        "wires": [
            [
                "9b728472c861cecd"
            ]
        ]
    },
    {
        "id": "9b728472c861cecd",
        "type": "cronplus",
        "z": "c751949c59f2c3bc",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "d42d69dd09f0d759"
            ]
        ]
    },
    {
        "id": "12c11ec9e8acfb68",
        "type": "subflow:bb656f77f61addff",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "90fe7b0388e61ee3"
            ]
        ]
    },
    {
        "id": "d42d69dd09f0d759",
        "type": "function",
        "z": "c751949c59f2c3bc",
        "name": "function 37",
        "func": "let propIntegration=msg.payload;\n \n \nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 755,
        "y": 220,
        "wires": [
            [
                "7c4f69e0f47d1cf6"
            ]
        ],
        "l": false
    },
    {
        "id": "7c4f69e0f47d1cf6",
        "type": "switch",
        "z": "c751949c59f2c3bc",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 845,
        "y": 220,
        "wires": [
            [
                "12c11ec9e8acfb68"
            ]
        ],
        "l": false
    },
    {
        "id": "93ad251655ab3737",
        "type": "subflow:bb656f77f61addff",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1530,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a1a1d305a2c25891",
        "type": "subflow:bb656f77f61addff",
        "z": "c751949c59f2c3bc",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "ERROR",
                "type": "str"
            }
        ],
        "x": 1530,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "691a79796462bde3",
        "type": "function",
        "z": "bb656f77f61addff",
        "name": "function 35",
        "func": "let propIntegration = msg.propIntegration;\n\nlet listPropIntegration = global.get('allIntegrationParameters') || [];\nlet statusValue = env.get('status');\n \nif (propIntegration && propIntegration.code) {\n    listPropIntegration = listPropIntegration.map(x => {\n        if (x.code === propIntegration.code) {\n            x.status = statusValue;\n        }\n        return x;\n    });\n\n    \n    global.set('allIntegrationParameters', listPropIntegration);\n} else {\n    node.error('propIntegration is undefined or missing the \"code\" property');\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "db9d2eccc1c66c4f",
        "type": "subflow:c34fc38f83091edb",
        "z": "cff71436fcabdffa",
        "name": "",
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "49e72d21c936c63f"
            ]
        ]
    },
    {
        "id": "6d0fc7307e09350c",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1180,
        "y": 280,
        "wires": [
            [
                "db9d2eccc1c66c4f"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "7f1db3a8fb6d4153",
        "type": "switch",
        "z": "cff71436fcabdffa",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 350,
        "y": 340,
        "wires": [
            [
                "f00c9f5a9bcb8b1e"
            ]
        ]
    },
    {
        "id": "f9d2d10b5062f8e2",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1200,
        "y": 440,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "f00c9f5a9bcb8b1e",
        "type": "function",
        "z": "cff71436fcabdffa",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 340,
        "wires": [
            [
                "bdeb72ccf65856da"
            ]
        ]
    },
    {
        "id": "bdeb72ccf65856da",
        "type": "cronplus",
        "z": "cff71436fcabdffa",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 640,
        "y": 340,
        "wires": [
            [
                "f5a05ed2b51ab86d"
            ]
        ]
    },
    {
        "id": "f5a05ed2b51ab86d",
        "type": "function",
        "z": "cff71436fcabdffa",
        "name": "function 39",
        "func": "let propIntegration=msg.payload;\n \n\nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 775,
        "y": 340,
        "wires": [
            [
                "ac2241b0aa89c2d0"
            ]
        ],
        "l": false
    },
    {
        "id": "dcf00d6042ae2604",
        "type": "subflow:bb656f77f61addff",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 240,
        "wires": [
            [
                "6d0fc7307e09350c"
            ]
        ]
    },
    {
        "id": "49e72d21c936c63f",
        "type": "subflow:bb656f77f61addff",
        "z": "cff71436fcabdffa",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1170,
        "y": 380,
        "wires": [
            [
                "f9d2d10b5062f8e2"
            ]
        ]
    },
    {
        "id": "ac2241b0aa89c2d0",
        "type": "switch",
        "z": "cff71436fcabdffa",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 845,
        "y": 340,
        "wires": [
            [
                "dcf00d6042ae2604"
            ]
        ],
        "l": false
    },
    {
        "id": "0aa65a33874e5ec0",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "name": "NetsistoSforinCategoriesIntegration",
        "info": "S4INDE OLAN TUM GRUP KODLARINI(KOD_2) SILINIYOR",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "1ddc986150f81f61",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "MetropolUnGenerateGroupCodeOut ",
        "mode": "link",
        "links": [
            "0d109ce5201c7170"
        ],
        "x": 565,
        "y": 150,
        "wires": []
    },
    {
        "id": "9c81f956a6d89063",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = flow.get(\"netsisGroupCode\");\nlet sforinCategory = flow.get(\"sforinCategory\");\n\nif (!netsisGroupCode) {\n  return [{ status: false }, null];\n}\n\nif (!sforinCategory) {\n  return [{ status: false }, null];\n}\n\n// Map the incoming objects to Sets based on their respective codes\nlet listNetsisGroupCode = new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM]));\nlet listSforinCategoryCode = new Set(sforinCategory.map(item => item.categoryCode));\n\n \nmsg.arrayNetsisGroupCode = Array.from(listNetsisGroupCode);\nmsg.arraySforinCategoryCode = Array.from(listSforinCategoryCode);\nmsg.netsisGroupCodeList=Array.from(listNetsisGroupCode).flatMap(x=>x[0])\n\nmsg.status = true;\n   \nreturn [null, msg];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "f7cdcf2f0edd64b4"
            ],
            [
                "a9151f608e0cb721"
            ]
        ]
    },
    {
        "id": "f7cdcf2f0edd64b4",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut",
        "mode": "link",
        "links": [
            "815c2ae98d00c5bf"
        ],
        "x": 1145,
        "y": 300,
        "wires": []
    },
    {
        "id": "815c2ae98d00c5bf",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "f7cdcf2f0edd64b4"
        ],
        "x": 995,
        "y": 300,
        "wires": [
            [
                "9c81f956a6d89063"
            ]
        ]
    },
    {
        "id": "a48717c13f51d78a",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Sforin Category Result",
        "func": "flow.set(\"sforinCategory\", msg.payload.data); \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 380,
        "wires": [
            [
                "9c81f956a6d89063"
            ]
        ]
    },
    {
        "id": "6c9a90593a3d872f",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "ConvertJson",
        "func": "let items = msg.matchingItems;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nmsg.missingCategoryCodes = items.map(item => {  \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                // \"_id\": \"\",\n                \"categoryCode\": item[0],\n                \"definition_lang\": item[1],\n                \"parentCategory\": null,\n                \"netsisDataField\":true\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.index = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 480,
        "wires": [
            [
                "660b73c8caa85f7d"
            ]
        ]
    },
    {
        "id": "756712d785c49001",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    msg.statusCode = null\n    return [msg, null];\n}\n\nelse {\n    // Handle error\n  \n    return [null, msg];\n   \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 700,
        "wires": [
            [
                "660b73c8caa85f7d"
            ],
            []
        ]
    },
    {
        "id": "660b73c8caa85f7d",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "matchingItemsIndex",
        "func": "\nlet items = msg.missingCategoryCodes;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];; // All items processed\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.dataPayload = item;\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 550,
        "wires": [
            [
                "e14d384df9717c5e"
            ],
            [
                "16d1f410e64887fb"
            ]
        ]
    },
    {
        "id": "0d109ce5201c7170",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSFORINFieldIntegrationRootIn",
        "links": [
            "1ddc986150f81f61"
        ],
        "x": 45,
        "y": 320,
        "wires": [
            [
                "4a2250cf6b38dbd5"
            ]
        ]
    },
    {
        "id": "5790442c0ce9fe2b",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "matchingItems",
        "func": "const arrayNetsisGroupCode = msg.arrayNetsisGroupCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\nconst matchingItems = transferStockItemsArray.flatMap(groupCode =>\n    arrayNetsisGroupCode.filter(item => item[0] === groupCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 440,
        "wires": [
            [
                "6c9a90593a3d872f"
            ]
        ]
    },
    {
        "id": "8ee71b06f782ddeb",
        "type": "change",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1330,
        "y": 400,
        "wires": [
            [
                "5790442c0ce9fe2b"
            ]
        ]
    },
    {
        "id": "a9151f608e0cb721",
        "type": "differences",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisGroupCodeList",
        "leftInputType": "msg",
        "rightInput": "arraySforinCategoryCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1310,
        "y": 360,
        "wires": [
            [
                "8ee71b06f782ddeb"
            ]
        ]
    },
    {
        "id": "d42c8ff5881498e4",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Create Netsis To Sforin Product Category",
        "info": "KOD2 LERI MANUEL ACILMA IHTIMALINE KARSI KONTROLLU BIR AKTARIM SAGLANDI",
        "x": 250,
        "y": 280,
        "wires": []
    },
    {
        "id": "1bd2620d8e18327a",
        "type": "subflow:d296b4008b6072d8",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": " SELECT DISTINCT dbo.TRK(KOD_2) GRUP_KOD,dbo.TRK(ISNULL(KOD2.GRUP_ISIM,'')) GRUP_ISIM     FROM TBLSTSABIT ST     LEFT JOIN TBLSTOKKOD2 KOD2 ON KOD2.GRUP_KOD=ST.KOD_2   WHERE KOD_2 IS NOT NULL",
                "type": "str"
            }
        ],
        "x": 280,
        "y": 340,
        "wires": [
            [
                "0da86f6b93c80314"
            ],
            []
        ]
    },
    {
        "id": "0da86f6b93c80314",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\n\nflow.set(\"netsisGroupCode\", items);\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "7ea64fbbc371f08c",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = flow.get(\"netsisGroupCode\");\nlet sforinCategory = flow.get(\"sforinCategory\");\n\nif (!netsisGroupCode) {\n  return [{ status: false }, null];\n}\n\nif (!sforinCategory) {\n  return [{ status: false }, null];\n}\n\n// Map the incoming objects to Sets based on their respective codes\nlet listNetsisGroupCode = new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM, item.ALT_GRUP_KOD, item.ALT_GRUP_ISIM]));\nlet listSforinCategoryCode = new Set(sforinCategory.map(item => item.categoryCode));\n\n \nmsg.arrayNetsisGroupCode = Array.from(listNetsisGroupCode);\nmsg.arraySforinCategoryCode = Array.from(listSforinCategoryCode);\nmsg.netsisGroupCodeList=Array.from(listNetsisGroupCode).flatMap(x=>x[2]) //ALT_GRUP_KOD KARŞILIK GELIYOR\n\nmsg.status = true;\n   \nreturn [null, msg];\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 870,
        "wires": [
            [
                "559aeaa67c1aa68c"
            ],
            [
                "a9fc6d601a039a65"
            ]
        ]
    },
    {
        "id": "559aeaa67c1aa68c",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut",
        "mode": "link",
        "links": [],
        "x": 975,
        "y": 810,
        "wires": []
    },
    {
        "id": "af2a7bc3c4a7ffdd",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [],
        "x": 735,
        "y": 810,
        "wires": [
            [
                "7ea64fbbc371f08c"
            ]
        ]
    },
    {
        "id": "3826e280e67e472b",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "ConvertJson",
        "func": "let items = msg.matchingItems;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nmsg.missingCategoryCodes = items.map(item => {  \n    return {\n        \"requestId\": \"\",\n        \"sender\": \"SFORIN\",\n        \"data\": [\n            {\n                // \"_id\": \"\",\n                \"categoryCode\": item[2],\n                \"definition_lang\": item[3],\n                \"parentCategory\": item[0],\n                \"netsisDataField\":true\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.index = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1010,
        "wires": [
            [
                "18ea68b8cd0f85bd"
            ]
        ]
    },
    {
        "id": "3c55b92814464393",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Response",
        "func": "if (msg.statusCode === 200 || msg.statusCode===400) {\n    msg.index++;\n    msg.statusCode = null\n    \n    return [msg, null];\n}\n \n\nelse {\n    // Handle error\n  \n    return [null, msg];\n   \n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1190,
        "wires": [
            [
                "18ea68b8cd0f85bd"
            ],
            [
                "c8a7c02d48b81dc9"
            ]
        ]
    },
    {
        "id": "18ea68b8cd0f85bd",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "matchingItemsIndex",
        "func": "\nlet items = msg.missingCategoryCodes;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];; // All items processed\n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.dataPayload = item;\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nmsg.test = msg.missingCategoryCodes.length;\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1080,
        "wires": [
            [
                "3bafb5c1d6a57de8"
            ],
            [
                "c8a7c02d48b81dc9"
            ]
        ]
    },
    {
        "id": "91c614bf350e0eea",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "matchingItems",
        "func": "const arrayNetsisGroupCode = msg.arrayNetsisGroupCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\nconst matchingItems = transferStockItemsArray.flatMap(groupCode =>\n    arrayNetsisGroupCode.filter(item => item[2] === groupCode)\n);\n\n\nmsg.matchingItems=matchingItems\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 970,
        "wires": [
            [
                "3826e280e67e472b"
            ]
        ]
    },
    {
        "id": "498e2acdd7a96bbb",
        "type": "change",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1360,
        "y": 930,
        "wires": [
            [
                "91c614bf350e0eea"
            ]
        ]
    },
    {
        "id": "a9fc6d601a039a65",
        "type": "differences",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisGroupCodeList",
        "leftInputType": "msg",
        "rightInput": "arraySforinCategoryCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 1200,
        "y": 870,
        "wires": [
            [
                "498e2acdd7a96bbb"
            ]
        ]
    },
    {
        "id": "06a609fd9d1ff22f",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Create Netsis To Sforin Product Category",
        "info": "KOD2 LERI MANUEL ACILMA IHTIMALINE KARSI KONTROLLU BIR AKTARIM SAGLANDI",
        "x": 280,
        "y": 810,
        "wires": []
    },
    {
        "id": "3d931c21cf043166",
        "type": "subflow:d296b4008b6072d8",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": " SELECT DISTINCT dbo.TRK(KOD_2) GRUP_KOD,                 dbo.TRK(ISNULL(KOD2.GRUP_ISIM, '')) GRUP_ISIM,                 dbo.TRK(KOD_3) ALT_GRUP_KOD,                 dbo.TRK(ISNULL(KOD3.GRUP_ISIM, '')) ALT_GRUP_ISIM FROM TBLSTSABIT ST LEFT JOIN TBLSTOKKOD2 KOD2 ON KOD2.GRUP_KOD=ST.KOD_2 LEFT JOIN TBLSTOKKOD3 KOD3 ON KOD3.GRUP_KOD=ST.KOD_3 WHERE KOD_2 IS NOT NULL   AND KOD_3 IS NOT NULL",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 870,
        "wires": [
            [
                "35dd0b33ed7f996c"
            ],
            []
        ]
    },
    {
        "id": "35dd0b33ed7f996c",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\n\nflow.set(\"netsisGroupCode\", items);\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 870,
        "wires": [
            [
                "7ea64fbbc371f08c"
            ]
        ]
    },
    {
        "id": "16d1f410e64887fb",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut4",
        "mode": "link",
        "links": [
            "c34224106512ce20"
        ],
        "x": 1575,
        "y": 560,
        "wires": []
    },
    {
        "id": "c34224106512ce20",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "16d1f410e64887fb"
        ],
        "x": 85,
        "y": 870,
        "wires": [
            [
                "785b19eb945c2f82"
            ]
        ]
    },
    {
        "id": "beeaf6c300562766",
        "type": "comment",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "GET ALL msg.netsisCatagoryType",
        "info": "",
        "x": 220,
        "y": 1280,
        "wires": []
    },
    {
        "id": "c8a7c02d48b81dc9",
        "type": "link out",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "GetAllProductCataOut",
        "mode": "link",
        "links": [
            "8ee4e16f7af8eb35"
        ],
        "x": 1715,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8ee4e16f7af8eb35",
        "type": "link in",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "GetAllProductCataIn",
        "links": [
            "c8a7c02d48b81dc9"
        ],
        "x": 145,
        "y": 1320,
        "wires": [
            [
                "79fbda80b82610b8"
            ]
        ]
    },
    {
        "id": "9df4f7571e38ba9e",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "function 50",
        "func": "msg.getAllNetsisProductTypes=msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "3ad7633f50f04d77",
        "type": "subflow:e35d14410b661a09",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllProductCategory",
                "type": "str"
            }
        ],
        "x": 270,
        "y": 380,
        "wires": [
            [
                "a48717c13f51d78a"
            ],
            []
        ]
    },
    {
        "id": "e14d384df9717c5e",
        "type": "subflow:e35d14410b661a09",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/SyncProductCategories",
                "type": "str"
            }
        ],
        "x": 1560,
        "y": 600,
        "wires": [
            [
                "756712d785c49001"
            ],
            []
        ]
    },
    {
        "id": "7856ed62352954d2",
        "type": "subflow:e35d14410b661a09",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/DeleteAllProductNetsisCategory",
                "type": "str"
            }
        ],
        "x": 390,
        "y": 150,
        "wires": [
            [
                "1ddc986150f81f61"
            ],
            [
                "1ddc986150f81f61"
            ]
        ]
    },
    {
        "id": "3bafb5c1d6a57de8",
        "type": "subflow:e35d14410b661a09",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/SyncProductCategories",
                "type": "str"
            }
        ],
        "x": 1610,
        "y": 1040,
        "wires": [
            [
                "3c55b92814464393"
            ],
            []
        ]
    },
    {
        "id": "2401222dd1c72698",
        "type": "subflow:e35d14410b661a09",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllProductCategory",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 1320,
        "wires": [
            [
                "9df4f7571e38ba9e"
            ],
            []
        ]
    },
    {
        "id": "69afe7af16898732",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "108f2ffe217f63da",
        "name": "function 61",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 245,
        "y": 150,
        "wires": [
            [
                "7856ed62352954d2"
            ]
        ],
        "l": false
    },
    {
        "id": "4a2250cf6b38dbd5",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "5b75673458d774a7",
        "name": "function 62",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 95,
        "y": 320,
        "wires": [
            [
                "576e760d3ceae24b"
            ]
        ],
        "l": false
    },
    {
        "id": "785b19eb945c2f82",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "92d86d0b5bb6ae36",
        "name": "function 63",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 135,
        "y": 870,
        "wires": [
            [
                "3d931c21cf043166"
            ]
        ],
        "l": false
    },
    {
        "id": "79fbda80b82610b8",
        "type": "function",
        "z": "5b2ae23bfd497a94",
        "g": "68643bb6b5be193f",
        "name": "function 64",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 1320,
        "wires": [
            [
                "2401222dd1c72698"
            ]
        ],
        "l": false
    },
    {
        "id": "d3e0544e1409e870",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "name": "Tamam",
        "info": "",
        "x": 110,
        "y": 20,
        "wires": []
    },
    {
        "id": "8c01d939eb123f5a",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1010,
        "y": 270,
        "wires": []
    },
    {
        "id": "a5bcf342b35175ca",
        "type": "differences",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCodes",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 820,
        "y": 330,
        "wires": [
            [
                "89ad0a2a79add44f"
            ]
        ]
    },
    {
        "id": "84f6b5a28bab6643",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "function 40",
        "func": "msg.netsisStockCode=msg.payload;\nlet netsisStockCodes=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 330,
        "wires": [
            [
                "a5bcf342b35175ca"
            ]
        ]
    },
    {
        "id": "89ad0a2a79add44f",
        "type": "change",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1120,
        "y": 330,
        "wires": [
            [
                "2f847f3ed271a069"
            ]
        ]
    },
    {
        "id": "0bf3e30ba3e4b060",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "matchingItems",
        "func": "const netsisStockCode = msg.netsisStockCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\n\n\n \n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    netsisStockCode\n        .filter(item => item.STOK_KODU === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR İLİŞKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\n\nmsg.matchingItems=matchingItems;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 290,
        "wires": [
            [
                "8d8bacc664ddc537"
            ]
        ]
    },
    {
        "id": "3e29b77e3521d84e",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)In",
        "links": [
            "b46fa05d17aefc16"
        ],
        "x": 85,
        "y": 270,
        "wires": [
            [
                "222965ddb0e09195"
            ]
        ]
    },
    {
        "id": "8d8bacc664ddc537",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)matchingItemsOut",
        "mode": "link",
        "links": [
            "c6600975483aa103"
        ],
        "x": 1615,
        "y": 310,
        "wires": []
    },
    {
        "id": "4532ac7f0859e986",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes=msg.netsisProductTypes;\nconst getAllNetsisProductTypes=msg.getAllNetsisProductTypes?.data;\nnode.warn(getAllNetsisProductTypes);\nvar data = msg.matchingItems;\n\n// getLabels fonksiyonunu tanımla\nflow.set(\"getLabels\", function (groupCode) {\n    if (groupCode == \"HAMMADDE\" || groupCode == \"I\") {\n        return [{\n            \"labelCode\": \"HPE.HAMMADDEPALETETIKETI\",\n            \"designFilePath\": null,\n            \"customerCode\": null,\n            \"packType\": null\n        }];\n    } else if (groupCode == \"MAMUL\" || groupCode == \"M\") {\n        return [{\n            \"labelCode\": \"MPE.MAMULPALETETIKETI\",\n            \"designFilePath\": null,\n            \"customerCode\": null,\n            \"packType\": null\n        }];\n    } else {\n        return null;\n    }\n});\n// flow'dan getLabels fonksiyonunu al\nconst getLabels = flow.get(\"getLabels\");\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    let groupCode = item.GRUP_KODU !== \"\" ? item.GRUP_KODU : \"\";\n    let parentCode=item.ALT_GRUP_KODU !== \"\" ? item.ALT_GRUP_KODU : \"\"\n    let s4inCatagoryGroupCode = getAllNetsisProductTypes.find(\n        x => x.categoryCode === groupCode && (x.parentCategory === null || x.parentCategory === \"\")\n    ) || \"\";\n  //  node.warn((netsisProductTypes.find(x => x.key == groupCode)?.productTypeCode));\n\n    let s4inCatagoryParentCode = getAllNetsisProductTypes.find(x => x.categoryCode == parentCode && x.parentCategory ==groupCode)||\"\"\n   \n    return { \n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                 \"productType\": {\n                     \"typeCode\": (netsisProductTypes.find(x => x.key == groupCode)?.productTypeCode) || \"\",                     \n                     \"definitionLang\": (netsisProductTypes.find(x => x.key == groupCode)?.productTypeCodeName) || \"\"\n                    \n                },\n                 \"categories\": [\n                   \n                   ...(s4inCatagoryGroupCode.categoryCode?[ \n                    {\n                        \"_id\":s4inCatagoryGroupCode._id||\"\",\n                        \"categoryCode\": groupCode,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"\",\n                        \"netsisDataField\": true\n                    \n                   }]:[]),\n                   ...(s4inCatagoryParentCode.categoryCode?[\n                     {\n                        \"_id\":s4inCatagoryParentCode._id||\"\",\n                        \"categoryCode\": parentCode,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": groupCode,\n                        \"netsisDataField\": true\n                    }\n                   ]:[])\n                  \n                   \n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"isBaseUnit\": true,\n                        \"factor\": 1.0,\n                        \"divisor\": 1.0,\n                        \"area\": 0.0,\n                        \"widthM\": 0.0,\n                        \"heightM\": 0.0,\n                        \"depthM\": 0.0,\n                        \"weightKg\": 0.0,\n                        \"volumeM3\": 0.0,\n                        \"labels\": getLabels(groupCode),\n                    },\n                     ...(item.OLCU_BR2? [{\n                         \"unitCode\": item.OLCU_BR2,\n                         \"isBaseUnit\": true,\n                         \"factor\": item.PAY_1,\n                         \"divisor\": item.PAYDA_1,\n                         \"area\": 0.0,\n                         \"widthM\": 0.0,\n                         \"heightM\": 0.0,\n                         \"depthM\": 0.0,\n                         \"weightKg\": 0.0,\n                         \"volumeM3\": 0.0,\n                         \"labels\":  getLabels(groupCode),\n\n                     }]:[]),\n                     ...(item.OLCU_BR3?[{\n                         \"unitCode\": item.OLCU_BR3,\n                        \"isBaseUnit\": true,\n                         \"factor\": item.PAY2,\n                         \"divisor\": item.PAYDA2,\n                        \"area\": 0.0,\n                        \"widthM\": 0.0,\n                        \"heightM\": 0.0,\n                        \"depthM\": 0.0,\n                        \"weightKg\": 0.0,\n                        \"volumeM3\": 0.0,\n                        \"labels\": getLabels(groupCode),\n                     }]:[])\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD1\n                    },\n                    ...(item.OLCU_BR2 ? [{\n                        \"unitCode\": item.OLCU_BR2,\n                        \"barcode\": item.BARKOD2\n                    }] : []),\n                    ...(item.OLCU_BR3 ? [{\n                        \"unitCode\": item.OLCU_BR3,\n                        \"barcode\": item.BARKOD3\n                    }] : [])\n                ],\n                \"images\": [\n                    // {\n                    //     \"imagePath\": \"\",\n                    //     \"sequence\": 0\n                    // }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": null,\n                        \"heightM\": null,\n                        \"depthM\": null,\n                        \"weighthKg\": null,\n                        \"area\": null,\n                        \"wigthtLimitKG\": null,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    // {\n                    //     \"code\": \"\",\n                    //     \"path\": \"\",\n                    //     \"validUntil\": new Date().toISOString(),\n                    //     \"createdOn\": new Date().toISOString(),\n                    //     \"fileDescriptionLang\": \"en\"\n                    // }\n                ],\n                 \"attributeValues\": [\n                    ...(item.ANA_KOD ? [{\n                        AttributeCode: \"URUN_GRUP\",\n                        StrValue: item.ANA_KOD,\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: \"URUN GRUP\"\n                    }] : []),\n\n                    ...(item.KOD_5 ? [{\n                        AttributeCode: \"ANALIZ\",\n                        StrValue: item.KOD_5,\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: \"ANALIZ\"\n                    }] : [])\n                ],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.STOK_KODU,\n                        \"defaultDefinition\": item.STOK_ADI,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.STOK_KODU,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": [],\n                \"ProductOperationStates\": [\n                    ...(item?.KOD_5 == \"ANALIZ\" ? [\n                        {\n                            \"operationType\": \"OP00201\",\n                            \"TargetStockState\": \"02\",\n                            \"SourceStockState\": \"00\"\n                         },\n                        {\n                            \"operationType\": \"OP00202\",\n                            \"TargetStockState\": \"02\",\n                            \"SourceStockState\": \"00\"\n                        }\n                    ] : [])\n                ]\n\n        \n    };\n    \n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 540,
        "wires": [
            [
                "c75e104d9b1606e8",
                "7980b367fb9566ad"
            ]
        ]
    },
    {
        "id": "c75e104d9b1606e8",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Index",
        "func": "\nlet items = msg.sforinproduct;\n// msg.itemsArrayPayload kontrol et, değilse yeni bir dizi oluştur\nmsg.itemsArrayPayload = msg.itemsArrayPayload|| [];\n   \n\nlet index = msg.index;\nif (index >= items.length || items.length===0) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item = item;\nmsg.payload = item;\n\n\n//msg.flowName = msg.propIntegration?.code ||\"NTSP000V1_0\";\n \n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 520,
        "wires": [
            [
                "6742c93f2b2198d3"
            ],
            []
        ]
    },
    {
        "id": "b0ae507329500bc1",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)ResponseOut",
        "mode": "link",
        "links": [
            "6268b9dbdf76f010"
        ],
        "x": 1275,
        "y": 870,
        "wires": []
    },
    {
        "id": "c6600975483aa103",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)matchingItemsIn",
        "links": [
            "8d8bacc664ddc537"
        ],
        "x": 85,
        "y": 520,
        "wires": [
            [
                "4532ac7f0859e986"
            ]
        ]
    },
    {
        "id": "5ac2beb0bfc134c6",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "Product is being shipped",
        "info": "",
        "x": 190,
        "y": 460,
        "wires": []
    },
    {
        "id": "6268b9dbdf76f010",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "NetsisToSFORINStockCard(MMSQL)ResponseIn",
        "links": [
            "b0ae507329500bc1"
        ],
        "x": 425,
        "y": 440,
        "wires": [
            [
                "c75e104d9b1606e8"
            ]
        ]
    },
    {
        "id": "6742c93f2b2198d3",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTOKBAR",
        "mode": "link",
        "links": [
            "1957f1b821b1f4f1"
        ],
        "x": 755,
        "y": 500,
        "wires": []
    },
    {
        "id": "8da1e5726ef27a97",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "info": "Netsiste stoklar için ayrı bir barkod sistemi kullanılıyor ise \nKontrol ediyorz ve sforine giden json a ekleme yapıyorz\n",
        "x": 720,
        "y": 460,
        "wires": []
    },
    {
        "id": "dd46605ec969997f",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)InTBLSTOKBARResponse",
        "links": [
            "4dda1622c9781aad"
        ],
        "x": 845,
        "y": 440,
        "wires": [
            [
                "1aaad88f0896c456"
            ]
        ]
    },
    {
        "id": "3bffe1838e90f37e",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "f1b021d67d3aeb12",
        "name": "Products",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    code: \"\",\n    company: null,\n    gtin: \"\",\n    hasSubProducts: false,\n    customerCodes: [],\n    productType: { typeCode: \"\", definitionLang: \"\", _id: \"\" },\n    categories: [],\n    units: [],\n    barcodes: [],\n    images: [],\n    subProducts: [],\n    packTypes: [],\n    files: [],\n    attributeValues: [],\n    stockLevels: [],\n    manufacturers: [],\n    vendors: [],\n    productStates: { isActive: false, isSellable: false, passiveFor: null, isEditable: false, isAllowedToSync: false },\n    descriptions: [],\n    storageLocations: [],\n    productDates: { productCode: \"\", createdOn: \"\", updatedOn: \"\", lastMovedOn: null, lastReceiptOn: null, lastDeliveryOn: null },\n    productUsers: [],\n    notes: []\n};\n\nvar productsSockCode = [];\nvar products = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(product => {\n         var processedProduct = {\n            code: product.code || defaultValues.code,\n            company: product.company || defaultValues.company,\n            gtin: product.gtin || defaultValues.gtin,\n            hasSubProducts: product.hasSubProducts !== undefined ? product.hasSubProducts : defaultValues.hasSubProducts,\n            customerCodes: product.customerCodes || defaultValues.customerCodes,\n            productType: product.productType || defaultValues.productType,\n            categories: product.categories || defaultValues.categories,\n            units: product.units || defaultValues.units,\n            barcodes: product.barcodes || defaultValues.barcodes,\n            images: product.images || defaultValues.images,\n            subProducts: product.subProducts || defaultValues.subProducts,\n            packTypes: product.packTypes || defaultValues.packTypes,\n            files: product.files || defaultValues.files,\n            attributeValues: product.attributeValues || defaultValues.attributeValues,\n            stockLevels: product.stockLevels || defaultValues.stockLevels,\n            manufacturers: product.manufacturers || defaultValues.manufacturers,\n            vendors: product.vendors || defaultValues.vendors,\n            productStates: product.productStates || defaultValues.productStates,\n            descriptions: product.descriptions || defaultValues.descriptions,\n            storageLocations: product.storageLocations || defaultValues.storageLocations,\n            productDates: product.productDates || defaultValues.productDates,\n            productUsers: product.productUsers || defaultValues.productUsers,\n            notes: product.notes || defaultValues.notes\n        };\n        productsSockCode.push(processedProduct.code)//Netsiste olmayan stokları bulmak için tüm stokkodlarını bir arraya alıyoum\n\n        products.push(processedProduct);\n    });\n} \n\n\nmsg.getAllSforinProduct = products;\nmsg.sforinStockCode=productsSockCode;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 150,
        "wires": [
            [
                "b46fa05d17aefc16"
            ]
        ]
    },
    {
        "id": "393a942627e4317d",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "f1b021d67d3aeb12",
        "name": "GetAllSFORINStockCard",
        "info": "",
        "x": 180,
        "y": 90,
        "wires": []
    },
    {
        "id": "b46fa05d17aefc16",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "f1b021d67d3aeb12",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "3e29b77e3521d84e"
        ],
        "x": 685,
        "y": 140,
        "wires": []
    },
    {
        "id": "0e65efccab73ad96",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 170,
        "y": 640,
        "wires": []
    },
    {
        "id": "09573dbd4c0cb283",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    WITH A1 AS ( \n SELECT\n ROW_NUMBER() OVER(partition BY KOD ORDER BY INCKEYNO ASC )+3 SIRA,\n OLCUBIRIMI, KOD  \n FROM TBLSTBIRIM  WHERE KOD='${stockCode}'\n )\n \n SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n\t\tWHEN I_YEDEK1 = 4 THEN A1.OLCUBIRIMI\n\t\tWHEN I_YEDEK1 = 5 THEN A1.OLCUBIRIMI\t\t\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n LEFT JOIN A1 ON A1.KOD=B.STOK_KODU AND I_YEDEK1=A1.SIRA\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 740,
        "wires": [
            [
                "15155f40f5b91522"
            ]
        ]
    },
    {
        "id": "1957f1b821b1f4f1",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)InTBLSTOKBAR",
        "links": [
            "6742c93f2b2198d3"
        ],
        "x": 135,
        "y": 720,
        "wires": [
            [
                "09573dbd4c0cb283"
            ]
        ]
    },
    {
        "id": "710f012436a1ab22",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "function 41",
        "func": "msg.payload.forEach(item=>\n{\nmsg.item.barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\nmsg.payload=msg.item;\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 740,
        "wires": [
            [
                "e8585defc8d09159"
            ]
        ]
    },
    {
        "id": "ad60f36acc269401",
        "type": "subflow:d296b4008b6072d8",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "",
        "x": 370,
        "y": 330,
        "wires": [
            [
                "84f6b5a28bab6643"
            ],
            []
        ]
    },
    {
        "id": "222965ddb0e09195",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.sforinStockCode = msg.sforinStockCode||[]\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT A.STOK_KODU,\n       dbo.TRK(STOK_ADI) AS STOK_ADI,\n       dbo.TRK(KOD_1) AS GRUP_KODU,\n       dbo.TRK(KOD_2) AS ALT_GRUP_KODU,\n       OLCU_BR1,\n       OLCU_BR2,\n       OLCU_BR3,\n       PAY_1,\n       PAYDA_1,\n       PAY2,\n       PAYDA2,\t  \n       CASE \n           WHEN BARKOD1 IS NOT NULL AND BARKOD1 <> '' THEN BARKOD1\n           WHEN OLCU_BR1 IS NOT NULL AND OLCU_BR1 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR1)\n           ELSE NULL\n       END AS BARKOD1,\n       CASE \n           WHEN BARKOD2 IS NOT NULL AND BARKOD2 <> '' THEN BARKOD2\n           WHEN OLCU_BR2 IS NOT NULL AND OLCU_BR2 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR2)\n           ELSE NULL\n       END AS BARKOD2,\n       CASE \n           WHEN BARKOD3 IS NOT NULL AND BARKOD3 <> '' THEN BARKOD3\n           WHEN OLCU_BR3 IS NOT NULL AND OLCU_BR3 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR3)\n           ELSE NULL\n       END AS BARKOD3,\n       B.TUR,\n       A.GRUP_KODU AS ANA_KOD,\n\t   A.KOD_5\nFROM TBLSTSABIT A\nLEFT JOIN TBLSTSABITEK B ON A.STOK_KODU = B.STOK_KODU\n    WHERE SUBE_KODU IN ('-1', '${branchCode}')    AND     DBO.TRK(UPPER(A.STOK_KODU)) NOT LIKE 'HIZ%'  \n`;\n// url'den gelen verilerde kısıt var ise sorguya ekleniyor\nlet paramsStockCode = global.get('NTSP000V1reqStockCode')\nif (paramsStockCode !== undefined && paramsStockCode !== null && paramsStockCode !== '') {\n   \n    query += `AND A.STOK_KODU= '${paramsStockCode}'`;\n}\n\n// msg.payload'a sorguyu ekle\n//node.warn(paramsStockCode+\"aaaa\");\nmsg.query=query;\nif(global.get('NTSP000V1reqStockCode'))\n{\n    global.set('NTSP000V1reqStockCode',null)\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 330,
        "wires": [
            [
                "ad60f36acc269401"
            ]
        ]
    },
    {
        "id": "f68b4c2669c7b292",
        "type": "comment",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "Netsis TBLSTBIRIM",
        "info": "",
        "x": 160,
        "y": 830,
        "wires": []
    },
    {
        "id": "1343bc142841a4e4",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "Netsis TBLSTBIRIM  json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.payload.code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n        OLCUBIRIMI,\n        KOD,\n        PAY,\n        PAYDA,\n        CONVERT(DECIMAL(18,2),NETAGIRLIK) NETAGIRLIK\n        ,CONVERT(DECIMAL(18,2),BRUTAGIRLIK) BRUTAGIRLIK,\n        CONVERT(DECIMAL(18,2),EN) EN,\n        CONVERT(DECIMAL(18,2),BOY) BOY,\n        CONVERT(DECIMAL(18,2),YUKSEKLIK) YUKSEKLIK\n    FROM TBLSTBIRIM  \n            WHERE \n                 KOD= '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 930,
        "wires": [
            [
                "83b889e0e475c165"
            ]
        ]
    },
    {
        "id": "4dda1622c9781aad",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTOKBARResponse",
        "mode": "link",
        "links": [
            "dd46605ec969997f"
        ],
        "x": 1525,
        "y": 890,
        "wires": []
    },
    {
        "id": "cb3c99cb363b481e",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "function 42",
        "func": "const getLabels = flow.get(\"getLabels\");\nlet stockType = msg.item?.productType?.typeCode;\n\nmsg.payload.forEach(item=>\n{\n    msg.item.units.push({\n        \"unitCode\": item.OLCUBIRIMI,\n        \"isBaseUnit\": true,\n        \"factor\": item.PAY,\n        \"divisor\":item.PAYDA,\n        \"area\": 0.0,\n        \"widthM\": item.EN,\n        \"heightM\": item.YUKSEKLIK,\n        \"depthM\": 0.0,\n        \"weightKg\": item.NETAGIRLIK,\n        \"volumeM3\": 0.0,\n        \"labels\": getLabels(stockType)\n    })\n});\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 930,
        "wires": [
            [
                "7c742ff9435814d7"
            ]
        ]
    },
    {
        "id": "15155f40f5b91522",
        "type": "subflow:d296b4008b6072d8",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "",
        "x": 520,
        "y": 740,
        "wires": [
            [
                "710f012436a1ab22"
            ],
            []
        ]
    },
    {
        "id": "e8585defc8d09159",
        "type": "link out",
        "z": "17803f695ab8af0d",
        "g": "c80683f7b8cf0f73",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTBIRIMesponse",
        "mode": "link",
        "links": [
            "9fa0ab1867412ac8"
        ],
        "x": 845,
        "y": 740,
        "wires": []
    },
    {
        "id": "9fa0ab1867412ac8",
        "type": "link in",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)INTBLSTBIRIM",
        "links": [
            "e8585defc8d09159"
        ],
        "x": 155,
        "y": 910,
        "wires": [
            [
                "1343bc142841a4e4"
            ]
        ]
    },
    {
        "id": "83b889e0e475c165",
        "type": "subflow:d296b4008b6072d8",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "",
        "x": 570,
        "y": 930,
        "wires": [
            [
                "cb3c99cb363b481e"
            ],
            []
        ]
    },
    {
        "id": "2f847f3ed271a069",
        "type": "subflow:e93f97e999fe62ab",
        "z": "17803f695ab8af0d",
        "g": "167f4d272f155624",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1275,
        "y": 320,
        "wires": [
            [],
            [
                "0bf3e30ba3e4b060"
            ]
        ],
        "outputLabels": [
            "",
            "netsisProductTypes"
        ],
        "l": false
    },
    {
        "id": "4facfe6a2109a10a",
        "type": "switch",
        "z": "17803f695ab8af0d",
        "g": "f1b021d67d3aeb12",
        "name": "IsFetchS4INStocks",
        "property": "IsFetchS4INStocks",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 115,
        "y": 160,
        "wires": [
            [
                "26b3917c8dd7e461"
            ],
            [
                "222965ddb0e09195"
            ]
        ],
        "l": false
    },
    {
        "id": "a0921c0d0fcc767d",
        "type": "subflow:e35d14410b661a09",
        "z": "17803f695ab8af0d",
        "g": "f1b021d67d3aeb12",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllProducts",
                "type": "str"
            }
        ],
        "x": 340,
        "y": 150,
        "wires": [
            [
                "3bffe1838e90f37e"
            ],
            []
        ]
    },
    {
        "id": "1aaad88f0896c456",
        "type": "subflow:e35d14410b661a09",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/ProductSync",
                "type": "str"
            }
        ],
        "x": 980,
        "y": 450,
        "wires": [
            [],
            [
                "c7610deb9c793f2b"
            ]
        ]
    },
    {
        "id": "26b3917c8dd7e461",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "f1b021d67d3aeb12",
        "name": "function 57",
        "func": "msg.flowName = msg.inregrationFlowData.code || \"NTSP000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 150,
        "wires": [
            [
                "a0921c0d0fcc767d"
            ]
        ],
        "l": false
    },
    {
        "id": "7c742ff9435814d7",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "function 101",
        "func": " \n\n// msg.item değerini diziye ekle\nif (msg.item !== undefined) {\n    msg.itemsArrayPayload.push(msg.item);\n}\n\n\n\nmsg.flowName = msg.inregrationFlowData.code || \"NTSP000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 930,
        "wires": [
            [
                "b0fc70906e1e758d"
            ]
        ]
    },
    {
        "id": "b0fc70906e1e758d",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "Response",
        "func": "let items = msg.sforinproduct;\nmsg.index++;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n    // msg.index++;\n    return [msg,null ];\n}\n\n    \n    \n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 930,
        "wires": [
            [
                "b0ae507329500bc1"
            ],
            [
                "e545fad3eafd4bb2"
            ]
        ]
    },
    {
        "id": "e545fad3eafd4bb2",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "fbf5966f1914eea8",
        "name": "setJsonPayload",
        "func": "\n\nconst result = {\n    requestId: \"\",\n    sender: \"node-red\",\n    data: msg.itemsArrayPayload.filter(x=>x.productType.typeCode!=\"\"),\n    current: [\n        {\n            key: \"\",\n            value: \"\"\n        }\n    ]\n};\n\nmsg.dataPayload = result;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 900,
        "wires": [
            [
                "4dda1622c9781aad"
            ]
        ]
    },
    {
        "id": "c7610deb9c793f2b",
        "type": "function",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "function 107",
        "func": "\nglobal.set('NTSP000V1_payload_res', global.get('NTSP000V1_payload_res')+ ' '+msg.errorMesaj )\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "7980b367fb9566ad",
        "type": "debug",
        "z": "17803f695ab8af0d",
        "g": "69a8c850b940485b",
        "name": "debug 328",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sforinproduct",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "607330f60d089b54",
        "type": "function",
        "z": "e93f97e999fe62ab",
        "name": "Return NetsisAllProductType",
        "func": "msg.netsisProductTypsCode = []\nlet items = msg.netsisProductTypes\n \n\nitems.forEach(x => {\n    msg.netsisProductTypsCode.push(x.productTypeCode)\n})\n\n \nreturn msg;  ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ed791a059d2f5a68",
        "type": "function",
        "z": "e93f97e999fe62ab",
        "name": "Netsis Product Type",
        "func": "msg.netsisProductTypes = [\n    {\n        \"key\": \"MAMUL\",\n        \"productTypeCode\": \"M\",\n        \"productTypeCodeName\": \"Mamul\"\n    },\n    {\n        \"key\": \"YARIMML\",\n        \"productTypeCode\": \"Y\",\n        \"productTypeCodeName\": \"YARI MAMUL\"\n    },\n    {\n        \"key\": \"A\",\n        \"productTypeCode\": \"A\",\n        \"productTypeCodeName\": \"YAN URUN\"\n    },\n    {\n        \"key\": \"R\",\n        \"productTypeCode\": \"R\",\n        \"productTypeCodeName\": \"MAL.MUH.EK\"\n    },\n    {\n        \"key\": \"HAMMADDE\",\n        \"productTypeCode\": \"I\",\n        \"productTypeCodeName\": \"ILK MADDE\"\n    },\n    {   \n        \"key\":\"AMBALAJ\",\n        \"productTypeCode\": \"B\",\n        \"productTypeCodeName\": \"AMBALAJ MALZEME\"\n    },\n    {\n        \"key\": \"T\",\n        \"productTypeCode\": \"T\",\n        \"productTypeCodeName\": \"TICARI MAL\"\n    },\n    {\n        \"key\":\"DIGER\",\n        \"productTypeCode\": \"D\",\n        \"productTypeCodeName\": \"DIGER\"\n    },\n    {\n        \"key\": \"F\",\n        \"productTypeCode\": \"F\",\n        \"productTypeCodeName\": \"FASONL\"\n    },\n    {\n        \"key\": \"DEPOZITO\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    },\n    {\n        \"key\": \"GENELGID\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    },  \n    {\n        \"key\": \"HIZMET\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    },  \n    {\n        \"key\": \"ISG\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    },  \n    {\n        \"key\": \"TEMIZLIK\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    },\n    {\n        \"key\": \"PGIYIM\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    },\n    {\n        \"key\": \"TKNKSARF\",\n        \"productTypeCode\": \"E\",\n        \"productTypeCodeName\": \"ENDİREKT ÜRÜNLER\"\n    }\n]\n\n \n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 220,
        "wires": [
            [
                "4afa2e6bcf72d66f"
            ]
        ]
    },
    {
        "id": "4afa2e6bcf72d66f",
        "type": "switch",
        "z": "e93f97e999fe62ab",
        "name": "",
        "property": "IncludenetsisProductTypsCode",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 240,
        "wires": [
            [
                "607330f60d089b54"
            ],
            []
        ]
    },
    {
        "id": "cc380e03303b4af4",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "GetAllSFORINCustomer",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "c171daf381137d01",
        "type": "link out",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)OUT",
        "mode": "link",
        "links": [
            "a26db93e9a990c25"
        ],
        "x": 895,
        "y": 110,
        "wires": []
    },
    {
        "id": "d1c7499ec2ea68a6",
        "type": "comment",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "netsiste cari kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1090,
        "y": 230,
        "wires": []
    },
    {
        "id": "61d8f26479170d8b",
        "type": "differences",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "listnetsisCustomerCode",
        "leftInputType": "msg",
        "rightInput": "sforinCustomerCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 780,
        "y": 290,
        "wires": [
            [
                "982a57164fc3bc83"
            ]
        ]
    },
    {
        "id": "842d030b57279da7",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "function 44",
        "func": "msg.netsisCustomers=msg.payload;\nlet listnetsisCustomerCode=[];\n\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisCustomers.forEach(x => listnetsisCustomerCode.push(x.CARI_KOD))\nmsg.listnetsisCustomerCode = listnetsisCustomerCode;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 290,
        "wires": [
            [
                "61d8f26479170d8b"
            ]
        ],
        "l": false
    },
    {
        "id": "982a57164fc3bc83",
        "type": "change",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "unmatchedAccountCodes",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 290,
        "wires": [
            [
                "c1e488d820c2ae1a"
            ]
        ]
    },
    {
        "id": "a26db93e9a990c25",
        "type": "link in",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)In",
        "links": [
            "c171daf381137d01"
        ],
        "x": 295,
        "y": 220,
        "wires": [
            [
                "3a2246370c17d5ae"
            ]
        ]
    },
    {
        "id": "c1e488d820c2ae1a",
        "type": "link out",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)matchingItemsOut",
        "mode": "link",
        "links": [
            "7f0bd2dffc849ab5"
        ],
        "x": 1315,
        "y": 290,
        "wires": []
    },
    {
        "id": "f0c631f9dcd83c72",
        "type": "subflow:d296b4008b6072d8",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "",
        "x": 470,
        "y": 290,
        "wires": [
            [
                "842d030b57279da7"
            ],
            []
        ]
    },
    {
        "id": "3a2246370c17d5ae",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "87d43c6fb5912917",
        "name": "Netsis Customer json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.getAllSforinCustomer = msg.getAllSforinCustomer || []\n// Create the query dynamically\nlet query = `\n   SELECT  \n    CS.CARI_KOD,\n    dbo.TRK(CARI_ISIM) AS CARI_ISIM,\n    dbo.TRK(CARI_ADRES) AS CARI_ADRES,\n    dbo.TRK(CARI_IL) AS CARI_IL,\n    dbo.TRK(CARI_ILCE) AS CARI_ILCE,\n    dbo.TRK(ULKE_KODU) AS ULKE_KODU,\n    CARI_TIP,\n    COALESCE(VERGI_NUMARASI, CSEK.TCKIMLIKNO) AS VKN_TC,\n    dbo.TRK(VERGI_DAIRESI) AS VERGI_DAIRESI,\n    ISNULL(CS.KAYITTARIHI, FORMAT(GETDATE(), 'yyyy.MM.dd')) AS KAYITTARIHI,\n    CS.CARI_TEL,\n    CASE CS.CARI_TIP\n        WHEN 'S' THEN 'VENDOR'\n        WHEN 'A' THEN 'CUSTOMER'\n    END AS CARI_TIPI\nFROM \n    TBLCASABIT CS\nLEFT JOIN \n    TBLCASABITEK CSEK ON CSEK.CARI_KOD = CS.CARI_KOD\nWHERE  \n    CS.CARI_TIP IN ('S', 'A')  \n    AND ISNULL(CS.C_YEDEK1, 'A') = 'A'\n\tAND CS.SUBE_KODU  IN ('-1', '${branchCode}')       \n`;\n\nlet paramsCustomerCode = global.get('NTSC000V1reqCustomerCode')\n\nif (paramsCustomerCode !== undefined && paramsCustomerCode !== null && paramsCustomerCode !== '') {\n  \n    query += `AND CS.CARI_KOD='${paramsCustomerCode}'`\n}\n// msg.payload'a sorguyu ekle\nmsg.query=query;\n msg.flowName = msg.inregrationFlowData.flowName || \"NTSC000V1.0\";\nif (global.get('NTSC000V1reqCustomerCode'))\n    {\n        \n         global.set('NTSC000V1reqCustomerCode', null)\n    }\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 290,
        "wires": [
            [
                "f0c631f9dcd83c72"
            ]
        ]
    },
    {
        "id": "18cfd7297ceb0607",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "Customers",
        "func": "// JSON verisini al\nvar jsonPayload = msg.payload.data;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    Id: \"\",\n    Code: \"\",\n    DefinitionLang: \"\",\n    Company: null,\n    Type: \"\",\n    Gln: \"\",\n    Addresses: [\n        {\n            Code: \"\",\n            Name: null,\n            Street: null,\n            No: null,\n            Zip: null,\n            District: null,\n            Town: \"\",\n            City: \"\",\n            Country: \"\",\n            Phone: \"\",\n            Fax: null,\n            Web: null,\n            LatLong: null,\n            Type: null,\n            TimeZone: null,\n            TaxNo: null\n        }\n    ],\n    Dates: {\n        CreatedOn: new Date().toISOString(),\n        UpdatedOn: new Date().toISOString(),\n        LastDeliveryOn: null,\n        LastReceiptOn: null,\n        LastTransferOn: null\n    },\n    Users: {\n        CreatedBy: \"\",\n        UpdatedBy: \"\",\n        NotifyOnDelivery: null,\n        NotifyOnReceipt: null,\n        NotifyOnTransfer: null\n    },\n    PartnerAttributes: [\n        {\n            AttributeCode: \"\",\n            StrValue: null,\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        },\n        {\n            AttributeCode: \"\",\n            StrValue: \"\",\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        }\n    ]\n};\n\nvar listcustomerCode = [];\nvar listcustomer = [];\n\n// Gelen veriyi dönüştür\nif (jsonPayload) {\n    jsonPayload.forEach(c => {\n        \n        var result = {\n            Id: c._id || defaultValues.Id,\n            Code: c.code || defaultValues.Code,\n            DefinitionLang: c.definitionLang || defaultValues.DefinitionLang,\n            Company: c.company !== undefined ? c.company : defaultValues.Company,\n            Type: c.type || defaultValues.Type,\n            Gln: c.gln || defaultValues.Gln,\n            Addresses: c.addresses && c.addresses.length ? c.addresses : defaultValues.Addresses,\n            Dates: {\n                CreatedOn: c.dates?.createdOn || defaultValues.Dates.CreatedOn,\n                UpdatedOn: c.dates?.updatedOn || defaultValues.Dates.UpdatedOn,\n                LastDeliveryOn: c.dates?.lastDeliveryOn || defaultValues.Dates.LastDeliveryOn,\n                LastReceiptOn: c.dates?.lastReceiptOn || defaultValues.Dates.LastReceiptOn,\n                LastTransferOn: c.dates?.lastTransferOn || defaultValues.Dates.LastTransferOn\n            },\n            Users: {\n                CreatedBy: c.users?.createdBy || defaultValues.Users.CreatedBy,\n                UpdatedBy: c.users?.updatedBy || defaultValues.Users.UpdatedBy,\n                NotifyOnDelivery: c.users?.notifyOnDelivery !== undefined ? c.users.notifyOnDelivery : defaultValues.Users.NotifyOnDelivery,\n                NotifyOnReceipt: c.users?.notifyOnReceipt !== undefined ? c.users.notifyOnReceipt : defaultValues.Users.NotifyOnReceipt,\n                NotifyOnTransfer: c.users?.notifyOnTransfer !== undefined ? c.users.notifyOnTransfer : defaultValues.Users.NotifyOnTransfer\n            },\n            PartnerAttributes: c.partnerAttributes && c.partnerAttributes.length ? c.partnerAttributes : defaultValues.PartnerAttributes\n        };\n\n        listcustomerCode.push(result.Code); // Netsiste olmayan carileri bulmak için tüm stokkodlarını bir arraya alıyorum\n        listcustomer.push(result);\n    });\n}\n\nmsg.getAllSforinCustomer = listcustomer;\nmsg.sforinCustomerCode = listcustomerCode;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "c171daf381137d01"
            ]
        ]
    },
    {
        "id": "eaf2da737977c5fe",
        "type": "function",
        "z": "3179678ca8b98244",
        "name": "ConvertJsonSforinPartner",
        "func": "// data ve msg.netsisCustomers dizilerinin varlığını ve formatlarını kontrol ediyor.\n// env.get fonksiyonunun var olup olmadığını kontrol ediyor.\n// netsisData değişkenine değer bulunmazsa varsayılan değerler kullanıyor.\nvar data = msg.unmatchedAccountCodes;\n\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    Id: \"\",\n    Code: \"\",\n    DefinitionLang: \"\",\n    Company: \"metropolun\",\n    Type: \"\",\n    Gln: \"\",\n    Addresses: [\n        {\n            Code: \"\",\n            Name: null,\n            Street: null,\n            No: null,\n            Zip: null,\n            District: null,\n            Town: \"\",\n            City: \"\",\n            Country: \"\",\n            Phone: \"\",\n            Fax: null,\n            Web: null,\n            LatLong: null,\n            Type: null,\n            TimeZone: null,\n            TaxNo: null\n        }\n    ],\n    Dates: {\n        CreatedOn: new Date().toISOString(),\n        UpdatedOn: new Date().toISOString(),\n        LastDeliveryOn: null,\n        LastReceiptOn: null,\n        LastTransferOn: null\n    },\n    Users: {\n        CreatedBy: \"NODE-RED\",\n        UpdatedBy: \"NODE-RED\",\n        NotifyOnDelivery: null,\n        NotifyOnReceipt: null,\n        NotifyOnTransfer: null\n    },\n    PartnerAttributes: [\n        {\n            AttributeCode: \"\",\n            StrValue: null,\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        },\n        {\n            AttributeCode: \"\",\n            StrValue: \"\",\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        }\n    ]\n};\n\n// 'data' objesinin varlığını kontrol et\nif (data && Array.isArray(data)) {\n    const transformedData = data.map(c => {\n        // 'netsisCustomers' tanımlı mı ve bir dizi mi kontrol et\n        const netsisData = msg.netsisCustomers && Array.isArray(msg.netsisCustomers)\n            ? msg.netsisCustomers.find(x => x.CARI_KOD === c)\n            : null;\n\n        return {\n             \n            code: (netsisData && netsisData.CARI_KOD) || defaultValues.Code,\n            definitionLang: (netsisData && netsisData.CARI_ISIM) || defaultValues.DefinitionLang,\n            company: env.get ? env.get(\"companyCode\") : defaultValues.Company, // 'env.get' varsa kullan\n            type: (netsisData && netsisData.CARI_TIPI) || defaultValues.Type,\n            gln: \"\",\n            addresses: [{\n                code: netsisData ? netsisData.CARI_ADRES : defaultValues.Addresses[0].Code,\n                name: null,\n                street: null,\n                no: null,\n                zip: null,\n                district: null,\n                town: netsisData ? netsisData.CARI_ILCE : defaultValues.Addresses[0].Town,\n                city: netsisData ? netsisData.CARI_IL : defaultValues.Addresses[0].City,\n                country: netsisData ? netsisData.ULKE_KODU : defaultValues.Addresses[0].Country,\n                phone: netsisData ? netsisData.CARI_TEL : defaultValues.Addresses[0].Phone,\n                fax: null,\n                web: null,\n                latLong: null,\n                type: null,\n                timeZone: null,\n                taxNo: null\n            }],\n            dates: {\n                createdOn: netsisData ? netsisData.KAYITTARIHI : defaultValues.Dates.CreatedOn,\n                updatedOn: defaultValues.Dates.UpdatedOn,\n                lastDeliveryOn: defaultValues.Dates.LastDeliveryOn,\n                lastReceiptOn: defaultValues.Dates.LastReceiptOn,\n                lastTransferOn: defaultValues.Dates.LastTransferOn\n            },\n            users: {\n                createdBy: defaultValues.Users.CreatedBy,\n                updatedBy: defaultValues.Users.UpdatedBy,\n                notifyOnDelivery: defaultValues.Users.NotifyOnDelivery,\n                notifyOnReceipt: defaultValues.Users.NotifyOnReceipt,\n                notifyOnTransfer: defaultValues.Users.NotifyOnTransfer\n            },\n            notes:  null,\n            partnerAttributes: [\n                {\n                    attributeCode: \"VERGINO\",\n                    strValue: null,\n                    dateValue: null,\n                    numValue: netsisData ? netsisData.VKN_TC : defaultValues.PartnerAttributes[0].NumValue,\n                    listedValue: null,\n                    boolValue: null,\n                    remoteName: \"Vergino\"\n                },\n                {\n                    attributeCode: \"VergiDairesi\",\n                    strValue: netsisData ? netsisData.VERGI_DAIRESI : defaultValues.PartnerAttributes[1].StrValue,\n                    dateValue: null,\n                    numValue: null,\n                    listedValue: null,\n                    boolValue: null,\n                    remoteName: \"VergiDairesi\"\n                }\n            ]\n        };\n    });\n\n    const result ={\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData,\n        current: [\n            {\n                key: \"\",\n                value: \"\"\n            }\n        ]\n    };\n\n    msg.sforinPartner = result;\n   \n} else {\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsisCustomers array is missing or not in expected format.\";\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 470,
        "wires": [
            [
                "460723836a4afab3"
            ]
        ]
    },
    {
        "id": "460723836a4afab3",
        "type": "function",
        "z": "3179678ca8b98244",
        "name": "Index",
        "func": "\n\n// Assign msg.dataPayload to msg.sforinPartner\nmsg.dataPayload = msg.sforinPartner;\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSC000V1.0\";\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.dataPayload) && msg.dataPayload.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    \n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 410,
        "wires": [
            [
                "9b2aaf769f5d8d85"
            ],
            []
        ]
    },
    {
        "id": "7f0bd2dffc849ab5",
        "type": "link in",
        "z": "3179678ca8b98244",
        "name": "MetropolUnNetsisToSFORINCustomer(MMSQL)matchingItemsIn",
        "links": [
            "c1e488d820c2ae1a"
        ],
        "x": 145,
        "y": 490,
        "wires": [
            [
                "eaf2da737977c5fe"
            ]
        ]
    },
    {
        "id": "63cb9e6fbc108652",
        "type": "comment",
        "z": "3179678ca8b98244",
        "name": "Partner is being shipped",
        "info": "",
        "x": 250,
        "y": 390,
        "wires": []
    },
    {
        "id": "087b5529bb1658bd",
        "type": "switch",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "property": "IsFetchS4INPartner",
        "propertyType": "env",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 120,
        "wires": [
            [
                "bd3178b47aab36b8"
            ],
            [
                "3a2246370c17d5ae"
            ]
        ]
    },
    {
        "id": "2fb08d96857c7418",
        "type": "subflow:e35d14410b661a09",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllPartners",
                "type": "str"
            }
        ],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "18cfd7297ceb0607"
            ],
            []
        ]
    },
    {
        "id": "9b2aaf769f5d8d85",
        "type": "subflow:e35d14410b661a09",
        "z": "3179678ca8b98244",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/PartnerSync",
                "type": "str"
            }
        ],
        "x": 840,
        "y": 430,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "bd3178b47aab36b8",
        "type": "function",
        "z": "3179678ca8b98244",
        "g": "5e45d235ed7ac2ab",
        "name": "function 58",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSC000V1.0\";\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "2fb08d96857c7418"
            ]
        ]
    },
    {
        "id": "f123bd878033b75f",
        "type": "switch",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 160,
        "wires": [
            [
                "b403d6960b2e14d4"
            ],
            []
        ]
    },
    {
        "id": "1b80e0035299eb7a",
        "type": "function",
        "z": "a464cb4f18f8f1f5",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 140,
        "wires": [
            [
                "100af4324002a45f"
            ]
        ]
    },
    {
        "id": "100af4324002a45f",
        "type": "cronplus",
        "z": "a464cb4f18f8f1f5",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 640,
        "y": 100,
        "wires": [
            [
                "f95a1da5a7a14982"
            ]
        ]
    },
    {
        "id": "f95a1da5a7a14982",
        "type": "function",
        "z": "a464cb4f18f8f1f5",
        "name": "function 45",
        "func": "let propIntegration = msg.payload;\n\n\n\nlet listAllIntegrationParameters = global.get('allIntegrationParameters');\n\n\nmsg.propIntegration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 815,
        "y": 100,
        "wires": [
            [
                "b3661310f2bcd661"
            ]
        ],
        "l": false
    },
    {
        "id": "b3661310f2bcd661",
        "type": "switch",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 885,
        "y": 100,
        "wires": [
            [
                "6a0784553551885e"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "6a0784553551885e",
        "type": "subflow:bb656f77f61addff",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "7ad9128488b7ec67"
            ]
        ]
    },
    {
        "id": "7ad9128488b7ec67",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 180,
        "wires": [
            [
                "2fb371c280cd3dd0"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "dde8eb53fa4281ad",
        "type": "subflow:bb656f77f61addff",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 320,
        "wires": [
            [
                "ce28ed41b247fece"
            ]
        ]
    },
    {
        "id": "ce28ed41b247fece",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1180,
        "y": 380,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "2fb371c280cd3dd0",
        "type": "subflow:3179678ca8b98244",
        "z": "a464cb4f18f8f1f5",
        "name": "",
        "env": [
            {
                "name": "IsFetchS4INPartner",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1090,
        "y": 240,
        "wires": [
            [
                "dde8eb53fa4281ad"
            ]
        ]
    },
    {
        "id": "b403d6960b2e14d4",
        "type": "switch",
        "z": "a464cb4f18f8f1f5",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 220,
        "wires": [
            [
                "1b80e0035299eb7a"
            ],
            [
                "6bee861dcdd67386"
            ]
        ]
    },
    {
        "id": "6bee861dcdd67386",
        "type": "function",
        "z": "a464cb4f18f8f1f5",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "f95a1da5a7a14982"
            ]
        ]
    },
    {
        "id": "15eb7783fe448944",
        "type": "switch",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "2cf7716e1b25a06f"
            ],
            []
        ]
    },
    {
        "id": "cb5ff30add02d2dd",
        "type": "function",
        "z": "b9701e9ae1caaffd",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 120,
        "wires": [
            [
                "b315cea18713b41d"
            ]
        ]
    },
    {
        "id": "b315cea18713b41d",
        "type": "cronplus",
        "z": "b9701e9ae1caaffd",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 620,
        "y": 60,
        "wires": [
            [
                "a048476425b9b233"
            ]
        ]
    },
    {
        "id": "f55ceedb9839ae82",
        "type": "switch",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 865,
        "y": 80,
        "wires": [
            [
                "902d8aeafde902db"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "902d8aeafde902db",
        "type": "subflow:bb656f77f61addff",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1050,
        "y": 100,
        "wires": [
            [
                "273f86b9b445d48a"
            ]
        ]
    },
    {
        "id": "273f86b9b445d48a",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1120,
        "y": 160,
        "wires": [
            [
                "b5292c961f291b88"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "cfa896092e723aaf",
        "type": "subflow:bb656f77f61addff",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "23fcab0d6f6dea2e"
            ]
        ]
    },
    {
        "id": "23fcab0d6f6dea2e",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1160,
        "y": 360,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "25d5711acb4bcc84",
        "type": "subflow:17803f695ab8af0d",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "env": [
            {
                "name": "IsFetchS4INStocks",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1300,
        "y": 220,
        "wires": [
            [
                "cfa896092e723aaf"
            ]
        ]
    },
    {
        "id": "2cf7716e1b25a06f",
        "type": "switch",
        "z": "b9701e9ae1caaffd",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 170,
        "wires": [
            [
                "cb5ff30add02d2dd"
            ],
            [
                "d50821e18ef1ff96"
            ]
        ]
    },
    {
        "id": "d50821e18ef1ff96",
        "type": "function",
        "z": "b9701e9ae1caaffd",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "a048476425b9b233"
            ]
        ]
    },
    {
        "id": "a048476425b9b233",
        "type": "function",
        "z": "b9701e9ae1caaffd",
        "name": "function 67",
        "func": "let propIntegration = msg.payload;\n\n\n\nlet listAllIntegrationParameters = global.get('allIntegrationParameters');\n\n\nmsg.propIntegration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 785,
        "y": 120,
        "wires": [
            [
                "f55ceedb9839ae82"
            ]
        ],
        "l": false
    },
    {
        "id": "b5292c961f291b88",
        "type": "subflow:2edf95049d03fe02",
        "z": "b9701e9ae1caaffd",
        "name": "",
        "x": 1060,
        "y": 220,
        "wires": [
            [
                "25d5711acb4bcc84"
            ]
        ]
    },
    {
        "id": "a209aa097313b145",
        "type": "subflow:d296b4008b6072d8",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "x": 430,
        "y": 270,
        "wires": [
            [
                "3274dca64fd42307"
            ],
            []
        ]
    },
    {
        "id": "4958f6ff314c62cc",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "Check",
        "func": "\n\n// Assign msg.payload to msg.netsis2s4inBuyerAndSellerOrder\nmsg.dataPayload = msg.netsis2s4inBuyerAndSellerOrder;\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSBSO000V1.0\";\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.payload.data) && msg.payload.data.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 270,
        "wires": [
            [
                "f28bc80528e3b4c5",
                "65a1a05d70b78cc0"
            ],
            []
        ]
    },
    {
        "id": "42f01e2ec49a4485",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "name": "JSON",
        "func": "const utcNow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));\nconst documentData = {\n    docNum: \"\",\n    state: {\n        State: \"ACT\",\n        ProcessingState: \"WAI\",\n        SyncState: \"WAI\"\n    },\n    externalNum: \"\",\n    company: \"\",\n    documentType: {\n        Code: \"\",\n        Definition: \"\",\n        CounterCode: \"\",\n        Direction: \"\",\n        IsTwoStep: null,\n        Id: \"\"\n    },\n    documentDate: {\n        CreatedOn: null,\n        UpdatedOn: null,\n        LastMovedOn: null,\n        LastReceiptOn: null,\n        LastSyncedOn: null,\n        DocDate: null,\n        PlanedDate: null,\n        DeliveryDate: null\n    },\n    docCompanies: {\n        SoldTo: null,\n        BoughtFrom: null,\n        Transit: null,\n        ShipTo: null\n    },\n    documentAttributes: [],\n    documentUser: {\n        CreatedBy: \"node-red\",\n        UpdatedBy: null\n    },\n    childDocuments: null,\n    parentDocument: null,\n    documentStorageLocations: {\n        PickFrom: [],\n        PutawayTo: [],\n        IsObligatory: true\n    },\n    documentFiles: [],\n    items: [\n        {\n            ItemNo: null,\n            DocNum: \"\",\n            ProductCode: \"\",\n            Quantity: null,\n            Unit: \"\",\n            BaseQuantity: null,\n            BaseUnit: null,\n            state: {\n                State: \"ACT\",\n                ProcessingState: \"WAI\",\n                SyncState: \"DWN\"\n            },\n            reference: {\n                ErpOrder: \"\",\n                ErpOrderItemNum: \"\"\n            },\n            itemBatch: [],\n            itemSerials: [],\n            itemTolerance: {\n                PercentagePlus: 0,\n                PercentageMinus: 0,\n                QuantityPlus: 0,\n                QuantityMinus: 0,\n                Unit: 0\n            },\n            documentFiles: [],\n            documentItemAttributes: \n                            {\n                                AttributeCode:null ,\n                                StrValue:null ,\n                                DateValue: utcNow,\n                                NumValue: null,\n                                ListedValue: null,\n                                BoolValue: null,\n                                RemoteName: null \n                            },\n            description: {\n                DefinitionLang: \"\",\n                ShortenedDefinitionLang: \"\",\n                LongDescriptionLang: \"\"\n            },\n            documentStorageLocations: {\n                PickFrom: \n                    {\n                         plant: env.get('documentStorageLocations_Plant'),\n                        warehouse: null,\n                        area: null,\n                        shelf: null\n                    }\n                ,\n                PutawayTo:\n                    {\n                        plant:env.get('documentStorageLocations_Plant'),\n                        warehouse: null,\n                        area: null,\n                        shelf: null\n                    }\n                ,\n                \"IsObligatory\": true\n            },\n            notes: [],\n            Id: \"\"\n        }\n    ],\n    notes: null,\n    Id: \"\"\n};\nconst netsisProductTypes = msg.netsisProductTypes;\n// Utility function to get a value or default from template\nconst getValueOrDefault = (value, defaultValue) => value !== null && value !== undefined ? value : defaultValue;\nconst getValueProductType = (value) => {\n    const found = netsisProductTypes.find(x => x.key === value);\n    return found?.productTypeCodeName === \"ENDİREKT ÜRÜNLER\" || false;\n};\nlet data = msg.netsisOrderPayload_;\n \nif (data && Array.isArray(data)) {\n    const transformedData = data.map(order => {\n\n       \n     // node.warn(order);\n        return {\n            docNum: getValueOrDefault(order.docNum, documentData.docNum),\n            state: {\n                State: getValueOrDefault(null, documentData.state.State),\n                ProcessingState: getValueOrDefault(null, documentData.state.ProcessingState),\n                SyncState: getValueOrDefault(null, documentData.state.SyncState)\n            },\n            externalNum: getValueOrDefault(order.docNum, documentData.externalNum),\n            company: getValueOrDefault(order.company, documentData.company),\n            documentType: msg.getAllDocumentTypesrPayload && Array.isArray(msg.getAllDocumentTypesrPayload)\n                ? msg.getAllDocumentTypesrPayload.find(doctype => doctype.code == order.documantTypeCode)\n                : {},\n            documentDate: {\n                CreatedOn: getValueOrDefault(order.createdOn, documentData.documentDate.CreatedOn),\n                UpdatedOn: getValueOrDefault(null, documentData.documentDate.UpdatedOn),\n                LastMovedOn: getValueOrDefault(null, documentData.documentDate.LastMovedOn),\n                LastReceiptOn: getValueOrDefault(null, documentData.documentDate.LastReceiptOn),\n                LastSyncedOn: getValueOrDefault(null, documentData.documentDate.LastSyncedOn),\n                DocDate: getValueOrDefault(order.createdOn, documentData.documentDate.DocDate),\n                PlanedDate: getValueOrDefault(order.createdOn, documentData.documentDate.PlanedDate),\n                DeliveryDate: getValueOrDefault(order.createdOn, documentData.documentDate.DeliveryDate)\n            },\n            docCompanies: {\n                SoldTo: getValueOrDefault(order.soldTo, documentData.docCompanies.SoldTo),\n                BoughtFrom: getValueOrDefault(order.boughtFrom, documentData.docCompanies.BoughtFrom),\n                Transit: getValueOrDefault(null, documentData.docCompanies.Transit),\n                ShipTo: getValueOrDefault(order.shipTo, documentData.docCompanies.ShipTo)\n            },\n            documentAttributes: getValueOrDefault(null, documentData.documentAttributes),\n            documentUser: {\n                CreatedBy: getValueOrDefault(null, documentData.documentUser.CreatedBy),\n                UpdatedBy: getValueOrDefault(null, documentData.documentUser.UpdatedBy)\n            },\n            childDocuments: getValueOrDefault(null, documentData.childDocuments),\n            parentDocument: getValueOrDefault(null, documentData.parentDocument),\n            documentStorageLocations: {\n                PickFrom: getValueOrDefault(null, documentData.documentStorageLocations.PickFrom),\n                PutawayTo: getValueOrDefault(null, documentData.documentStorageLocations.PutawayTo),\n                IsObligatory: getValueOrDefault(null, documentData.documentStorageLocations.IsObligatory)\n            },\n            documentFiles: getValueOrDefault(null, documentData.documentFiles),\n            items: order.items ? order.items.map(item => ({\n                \n               \n                ItemNo: getValueOrDefault(item.itemNo, documentData.items[0].ItemNo),\n                DocNum: getValueOrDefault(order.docNum, documentData.docNum),\n                ProductCode: getValueOrDefault(item.productCode, documentData.items[0].ProductCode),\n                Quantity: getValueOrDefault(item.quantity, documentData.items[0].Quantity),\n                Unit: getValueOrDefault(item.unit, documentData.items[0].Unit),\n                BaseQuantity: getValueOrDefault(item.baseQuantity, documentData.items[0].BaseQuantity),//ana birim cinsinde doludurlacak \n                BaseUnit: getValueOrDefault(item.baseUnit, documentData.items[0].BaseUnit),\n                state: {\n                    State: getValueOrDefault(null, documentData.items[0].state.State),\n                    ProcessingState: getValueOrDefault(getValueProductType(item.groupCode)?\"PRC\":null, documentData.items[0].state.ProcessingState),\n                    SyncState: getValueOrDefault(null, documentData.items[0].state.SyncState)\n                },\n                reference: {\n                    ErpOrder: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrder),\n                    ErpOrderItemNum: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrderItemNum)\n                },\n                itemBatch: getValueOrDefault(null, documentData.items[0].itemBatch),\n                itemSerials: getValueOrDefault(null, documentData.items[0].itemSerials),\n                itemTolerance: {\n                    PercentagePlus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentagePlus),\n                    PercentageMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentageMinus),\n                    QuantityPlus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityPlus),\n                    QuantityMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityMinus),\n                    Unit: getValueOrDefault(null, documentData.items[0].itemTolerance.Unit)\n                },\n               // documentFiles: getValueOrDefault(null, documentData.items[0].documentItemAttributes),\n                documentItemAttributes: [\n                {\n                    AttributeCode: getValueOrDefault(\"TESLIM_TARIHI\", documentData.items[0].documentItemAttributes.AttributeCode) ,\n                    StrValue: null ,\n                    DateValue: new Date(getValueOrDefault(item.deliveryDate, documentData.items[0].documentItemAttributes.DateValue)),\n                    NumValue: null,\n                    ListedValue: null,\n                    BoolValue: null,\n                    RemoteName: getValueOrDefault(\"KALEMIN TESLIM TARIHI\", documentData.items[0].documentItemAttributes.RemoteName) \n                }],\n                description: {\n                    DefinitionLang: getValueOrDefault(item.definitionLang, documentData.items[0].description.DefinitionLang),\n                    ShortenedDefinitionLang: getValueOrDefault(null, documentData.items[0].description.ShortenedDefinitionLang),\n                    LongDescriptionLang: getValueOrDefault(null, documentData.items[0].description.LongDescriptionLang)\n                },\n\n                \n               documentStorageLocations: {\n                 PickFrom: item.pickFrom ? [{\n                    plant: getValueOrDefault(env.get('documentStorageLocations_Plant'), documentData.items[0]?.documentStorageLocations?.PickFrom?.plant),\n                    warehouse: getValueOrDefault(item.pickFrom?.toString(), documentData.items[0]?.documentStorageLocations?.PickFrom?.warehouse),\n                    area: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PickFrom?.area),\n                    shelf: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PickFrom?.shelf)\n                }]\n                : [],\n            \n                 PutawayTo: item.putawayTo ? [{\n                    plant: getValueOrDefault(env.get('documentStorageLocations_Plant'),documentData.items[0]?.documentStorageLocations?.PutawayTo?.plant),\n                    warehouse: getValueOrDefault(item.putawayTo?.toString(),documentData.items[0]?.documentStorageLocations?.PutawayTo?.warehouse),\n                    area: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PutawayTo?.area),\n                    shelf: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PutawayTo?.shelf)\n                }]\n                : [],\n    \n                IsObligatory: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.IsObligatory)\n                },\n                notes: getValueOrDefault([], documentData.items[0].notes),\n                \n            })) : [],\n            notes: getValueOrDefault(null, documentData.notes),\n           \n        };\n    });\n\n    const result = {\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData \n    };\n\n    msg.netsis2s4inBuyerAndSellerOrder = result;\n   \n} else {\n    node.warn(\"1111\");\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsis2s4inBuyerAndSellerOrder array is missing or not in expected format.\";\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 570,
        "wires": [
            []
        ]
    },
    {
        "id": "b8d8a2600d07733f",
        "type": "link in",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)IN",
        "links": [
            "326b7025dfe0b336"
        ],
        "x": 95,
        "y": 210,
        "wires": [
            [
                "b66d1938ee5b83ee"
            ]
        ]
    },
    {
        "id": "7924c40ccd5e027d",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "GetAllDocumentTypes",
        "func": "\n\nmsg.getAllDocumentTypesrPayload = msg.payload.data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 90,
        "wires": [
            [
                "326b7025dfe0b336"
            ]
        ]
    },
    {
        "id": "5d657f0f443bca62",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "GetAllSFORINGetAllDocumentTypes",
        "info": "",
        "x": 220,
        "y": 50,
        "wires": []
    },
    {
        "id": "326b7025dfe0b336",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "b8d8a2600d07733f"
        ],
        "x": 785,
        "y": 90,
        "wires": []
    },
    {
        "id": "3049a7107f25c59d",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "olcubrm 0 olanlar kontrol edilecek",
        "info": "olcubrm 0 olanlar kontrol edilecek",
        "x": 280,
        "y": 230,
        "wires": []
    },
    {
        "id": "fe7f1fd6938b9b86",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "8f53555fb01c63d0",
        "name": "GetWarehouseLocations",
        "func": "// Get the JSON data\nmsg.getWarehouseLocationsPayload = msg.payload.data;\n\n\n\nreturn msg;\n\n\n \n \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 650,
        "wires": [
            [
                "c08a4b7860d81ea4"
            ]
        ]
    },
    {
        "id": "2e4ad7cfa8663c77",
        "type": "comment",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "8f53555fb01c63d0",
        "name": "GetAllSFORINGetWarehouseLocations",
        "info": "",
        "x": 240,
        "y": 590,
        "wires": []
    },
    {
        "id": "58392219b3f9c2aa",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "4370a35114295e81",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0 Out_GetwareHouse",
        "mode": "link",
        "links": [
            "6b1db2938b49fc97"
        ],
        "x": 745,
        "y": 200,
        "wires": []
    },
    {
        "id": "6b1db2938b49fc97",
        "type": "link in",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "8f53555fb01c63d0",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0 In_GetwareHouse",
        "links": [
            "58392219b3f9c2aa"
        ],
        "x": 155,
        "y": 650,
        "wires": [
            [
                "0fd6fe89414c30de"
            ]
        ]
    },
    {
        "id": "c08a4b7860d81ea4",
        "type": "link out",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "8f53555fb01c63d0",
        "name": "ResultGetWarehouseLocationsOut",
        "mode": "link",
        "links": [
            "f1ac5c0632527d2c"
        ],
        "x": 725,
        "y": 650,
        "wires": []
    },
    {
        "id": "f1ac5c0632527d2c",
        "type": "link in",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "4370a35114295e81",
        "name": "ResultGetWarehouseLocationsIn",
        "links": [
            "c08a4b7860d81ea4"
        ],
        "x": 575,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "3906d1cee2d6724b",
        "type": "subflow:e35d14410b661a09",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllDocumentTypes",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 90,
        "wires": [
            [
                "7924c40ccd5e027d"
            ],
            []
        ]
    },
    {
        "id": "c2d2d091215c03b5",
        "type": "subflow:e35d14410b661a09",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "8f53555fb01c63d0",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetWarehouseLocations",
                "type": "str"
            }
        ],
        "x": 310,
        "y": 650,
        "wires": [
            [
                "fe7f1fd6938b9b86"
            ],
            []
        ]
    },
    {
        "id": "f28bc80528e3b4c5",
        "type": "subflow:e35d14410b661a09",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/DocumentSync",
                "type": "str"
            }
        ],
        "x": 930,
        "y": 260,
        "wires": [
            [
                "f0d171c22281ef56"
            ],
            [
                "e9ee95d4490298d6"
            ]
        ]
    },
    {
        "id": "019be7c744de779e",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "a5e0ee44f2fb8456",
        "name": "function 59",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSBSO000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 175,
        "y": 90,
        "wires": [
            [
                "3906d1cee2d6724b"
            ]
        ],
        "l": false
    },
    {
        "id": "0fd6fe89414c30de",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "d": true,
        "g": "8f53555fb01c63d0",
        "name": "function 60",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSBSO000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 640,
        "wires": [
            [
                "c2d2d091215c03b5"
            ]
        ],
        "l": false
    },
    {
        "id": "e9ee95d4490298d6",
        "type": "debug",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "debug 322",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 270,
        "wires": []
    },
    {
        "id": "f0d171c22281ef56",
        "type": "debug",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "debug 319",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 210,
        "wires": []
    },
    {
        "id": "3cd79d877477ffd7",
        "type": "subflow:e93f97e999fe62ab",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 635,
        "y": 210,
        "wires": [
            [],
            [
                "0521086704c8473a"
            ]
        ],
        "outputLabels": [
            "",
            "netsisProductTypes"
        ],
        "l": false
    },
    {
        "id": "b66d1938ee5b83ee",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "BuyerAndSellerOrder",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSBSO000V1.0\";\n// Sorguyu dinamik olarak oluştur\nlet status_check_query='';\n// url'den gelen verilerde kısıt var ise sorguya ekleniyor\nlet paramsOrderNumber = global.get('NTSBSO000V1reqOrderNumber')\nif (paramsOrderNumber !== undefined && paramsOrderNumber !== null && paramsOrderNumber !== '') {\n\n  \n    status_check_query = ` AND SPTRA.FISNO= '${paramsOrderNumber}'`\n\n}\nlet query = `\n WITH STBIRIM AS\n  (SELECT ROW_NUMBER() OVER(PARTITION BY KOD\n                            ORDER BY INCKEYNO ASC)+3 SIRA,\n                       KOD,\n                       OLCUBIRIMI,\n                       PAY,\n                       PAYDA\n   FROM TBLSTBIRIM),\n  \nSTATUS_CHECK AS (\n    SELECT FISNO,\n           CASE\n               WHEN COUNT(CASE WHEN SPTRA.STHAR_HTUR = 'K' THEN 1 END) = COUNT(*) THEN 'ISS'\n               ELSE 'WAI'\n           END AS overallStatus\n    FROM TBLSIPATRA SPTRA\n    WHERE  1=1   ${status_check_query ? status_check_query:'' }\n    GROUP BY FISNO\n)\nSELECT SPTRA.FISNO\t AS docNum,\n       DB_NAME() AS company,\n       CASE SPMAS.FTIRSIP\n           WHEN 6 THEN 'MS'\n           WHEN 7 THEN 'SS'\n       END documantTypeCode,\n       SPMAS.TARIH createdOn,\n        CONVERT(datetime, SPMAS.D_YEDEK10) OrderdeliveryDate,\n        ISNULL( CONVERT(datetime, SPTRA.STHAR_TESTAR) , CONVERT(datetime, SPMAS.D_YEDEK10)) deliveryDate,\n       SPTRA.SIRA itemNo,\n       dbo.TRK(SPTRA.STOK_KODU) productCode, --SPTRA.STHAR_GCMIK-FIRMA_DOVTUT AS quantity ,\n CASE ISNULL(SPTRA.OLCUBR,1)\n      WHEN 0 THEN SPTRA.STHAR_GCMIK-FIRMA_DOVTUT\n     WHEN 1 THEN SPTRA.STHAR_GCMIK-FIRMA_DOVTUT\n     ELSE (STHAR_GCMIK-FIRMA_DOVTUT)*CEVRIM\n END AS quantity,\n\n CASE ISNULL(SPTRA.OLCUBR,1)\n     WHEN 0 THEN ST.OLCU_BR1\n     WHEN 1 THEN ST.OLCU_BR1\n     WHEN 2 THEN ST.OLCU_BR2\n     WHEN 3 THEN ST.OLCU_BR3\n     WHEN 4 THEN BRM.OLCUBIRIMI\n     WHEN 5 THEN BRM.OLCUBIRIMI\n END AS unit,\n    CASE SPTRA.STHAR_FTIRSIP  WHEN  6\n THEN  SPMAS.CARI_KODU ELSE NULL END soldTo,\n \n CASE SPTRA.STHAR_FTIRSIP  WHEN  7\n THEN  SPMAS.CARI_KODU ELSE NULL END  boughtFrom,\n     CASE SPTRA.STHAR_FTIRSIP  WHEN  6\n THEN  SPTRA.DEPO_KODU  ELSE NULL END pickFrom,\n \n CASE SPTRA.STHAR_FTIRSIP  WHEN  7\n THEN  SPTRA.DEPO_KODU  ELSE NULL END  putAwayTo,   \n    CASE SPTRA.EKALAN_NEDEN WHEN 1 THEN dbo.TRK(EKALAN)\n   ELSE dbo.TRK(ST.STOK_ADI) END  AS DefinitionLang,\n     SPTRA.STHAR_GCMIK AS baseQuantity,\n    ST.OLCU_BR1 AS baseUnit,\n    SPMAS.CARI_KOD2 AS shipTo,\n    \n\t\n\tCASE WHEN SPTRA.STHAR_HTUR ='K' THEN 'ISS'\n\tELSE 'WAI' END [status],\n\tSTATUS_CHECK.overallStatus,\n     ST.KOD_1,\n     SPEK.KT_PLAKA_6 PLAKA ,\n\t SPEK.KT_ROOTADI_6 ROOTADI,\t \n\t SPEK.KT_SEVK_NOT_6 SEVK_NOT, \n\t SPEK.KT_SOFOR_6 SOFOR,\n     SPEK.KT_TASIYICIVKN_6 TASIYICIVKN,\n     SPEK.KT_TASIYICI_ADI_6 TASIYICIADI,\n     EK.ACIK1\n\n\t \n\t\nFROM TBLSIPAMAS SPMAS\nLEFT JOIN  TBLFATUEK EK ON SPMAS.FATIRS_NO=EK.FATIRSNO AND SPMAS.FTIRSIP=EK.FKOD\nLEFT JOIN TBLSIPATRA SPTRA ON SPMAS.FATIRS_NO = SPTRA.FISNO\nLEFT JOIN TBLSTSABIT ST ON ST.STOK_KODU=SPTRA.STOK_KODU\nLEFT JOIN STBIRIM BRM ON BRM.KOD=SPTRA.STOK_KODU\nAND ISNULL(SPTRA.OLCUBR,1)=BRM.SIRA\nJOIN STATUS_CHECK ON SPMAS.FATIRS_NO = STATUS_CHECK.FISNO\nLEFT JOIN TBLSIPAMASSAHAEK SPEK ON SPEK.FATIRS_NO=SPMAS.FATIRS_NO AND SPEK.CARI_KODU=SPMAS.CARI_KODU AND SPEK.FTIRSIP=SPMAS.FTIRSIP\nWHERE SPMAS.SUBE_KODU IN  ('-1', '${branchCode}')     \n`;\n\n \n\n\n\n  \n\n\n\n  \nif (paramsOrderNumber !== undefined && paramsOrderNumber !== null && paramsOrderNumber !== '') {\n\n  query += `AND SPMAS.FATIRS_NO= '${paramsOrderNumber}'`\n}\n\n// msg.payload'a sorguyu ekle\n\nmsg.query = query;\nif (global.get('NTSBSO000V1reqOrderNumber')) {\n  global.set('NTSBSO000V1reqOrderNumber', null)\n}\n\n\n\n \n\n\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 280,
        "wires": [
            [
                "a209aa097313b145"
            ]
        ]
    },
    {
        "id": "3274dca64fd42307",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "function 155",
        "func": "msg.netsisOrderPayload=msg.payload;\nlet data = msg.payload;\n\nif(!data && data.count===0){\n    msg.errorMesaj = msg.errorMesaj||\"Kayıt Bulunamadı\";\n    return [null,msg ];\n}\nlet result = {};\n// Initialize an empty array to store unique docNum values\nlet listnetsisOrderDocNum = [];\n\n// Use Set to filter unique docNum values\nlistnetsisOrderDocNum = [...new Set(msg.netsisOrderPayload.map(item => item.docNum))];\n\n// Output the unique docNum list\nmsg.listnetsisOrderDocNum = listnetsisOrderDocNum;\n\n\n// `docNum` ile gruplama yapıyoruz\ndata.forEach(item => {\n   \n    let docNum = item.docNum;\n    if (!docNum) {\n        return; // boş, null, undefined veya 0 gibi falsy değerleri atla\n    }\n\n    // Eğer `docNum` zaten varsa, öğeyi mevcut objeye ekliyoruz\n    if (result[docNum]) {\n        result[docNum].items.push({\n            itemNo: item.itemNo,\n            productCode: item.productCode,\n            quantity: item.quantity,\n            unit: item.unit,\n            baseUnit:item.baseUnit,\n            baseQuantity:item.baseQuantity,\n            pickFrom: item.pickFrom,\n            putawayTo:item.putAwayTo,\n            definitionLang: item.DefinitionLang,\n            status:item.status,\n            deliveryDate: item.deliveryDate,\n            groupCode: item.KOD_1\n        });\n    } else {\n        // Eğer yoksa, yeni bir obje oluşturup ekliyoruz\n        result[docNum] = {\n            docNum: docNum,\n            company: item.company,\n            boughtFrom:item.boughtFrom,\n            soldTo:item.soldTo,\n            shipTo:item.shipTo,\n            documantTypeCode: item.documantTypeCode,\n            createdOn: item.createdOn,            \n            customerCode: item.CUSTOMERCODE,\n            overallStatus: item.overallStatus,  \n            plaka:item.PLAKA,\n            rootAdi:item.ROOTADI,         \n            sevkNot:item.SEVK_NOT,\n            sofor:item.SOFOR, \n            tasiyiciAdi: item.TASIYICIADI,\n            tasiyiciVkn: item.TASIYICIVKN,\n            acik1:item.ACIK1,\n\n            orderdeliveryDate: item.OrderdeliveryDate,\n            items: [{\n            itemNo: item.itemNo,\n            productCode: item.productCode,\n            quantity: item.quantity,\n            unit: item.unit,\n            baseUnit:item.baseUnit,\n            baseQuantity:item.baseQuantity,\n            pickFrom: item.pickFrom,\n            putawayTo:item.putAwayTo,\n            definitionLang: item.DefinitionLang,\n            status:item.status,\n            deliveryDate: item.deliveryDate,\n            groupCode: item.KOD_1\n            }]\n        };\n    }\n});\n\n \n// Sonucu array formatına dönüştürüyoruz\nmsg.netsisOrderPayload_ = Object.values(result);\n \n \n\nreturn [msg,null];\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 545,
        "y": 220,
        "wires": [
            [
                "3cd79d877477ffd7",
                "7b05a3288c3c0c62"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "0521086704c8473a",
        "type": "function",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "JSON",
        "func": "const utcNow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));\nconst documentData = {\n    docNum: \"\",\n    state: {\n        State: \"ACT\",\n        ProcessingState: \"WAI\",\n        SyncState: \"DWN\"\n    },\n    externalNum: \"\",\n    company: \"\",\n    documentType: {\n        Code: \"\",\n        Definition: \"\",\n        CounterCode: \"\",\n        Direction: \"\",\n        IsTwoStep: null,\n        Id: \"\"\n    },\n    documentDate: {\n        CreatedOn: null,\n        UpdatedOn: null,\n        LastMovedOn: null,\n        LastReceiptOn: null,\n        LastSyncedOn: null,\n        DocDate: null,\n        PlanedDate: null,\n        DeliveryDate: null\n    },\n    docCompanies: {\n        SoldTo: null,\n        BoughtFrom: null,\n        Transit: null,\n        ShipTo: null\n    },\n    documentAttributes: {\n        AttributeCode: null,\n        StrValue: null,\n        DateValue: utcNow,\n        NumValue: 0,\n        ListedValue: null,\n        BoolValue: null,\n        RemoteName: null\n    },\n    documentUser: {\n        CreatedBy: \"node-red\",\n        UpdatedBy: null\n    },\n    childDocuments: null,\n    parentDocument: null,\n    documentStorageLocations: {\n        PickFrom: [],\n        PutawayTo: [],\n        IsObligatory: true\n    },\n    documentFiles: [],\n    items: [\n        {\n            ItemNo: null,\n            DocNum: \"\",\n            ProductCode: \"\",\n            Quantity: null,\n            Unit: \"\",\n            BaseQuantity: null,\n            BaseUnit: null,\n            state: {\n                State: \"ACT\",\n                ProcessingState: \"WAI\",\n                SyncState: \"DWN\"\n            },\n            reference: {\n                ErpOrder: \"\",\n                ErpOrderItemNum: \"\"\n            },\n            itemBatch: [],\n            itemSerials: [],\n            itemTolerance: {\n                PercentagePlus: 0,\n                PercentageMinus: 0,\n                QuantityPlus: 0,\n                QuantityMinus: 0,\n                Unit: 0\n            },\n            documentFiles: [],\n            documentItemAttributes: \n                            {\n                                AttributeCode:null ,\n                                StrValue:null ,\n                                DateValue: utcNow,\n                                NumValue: null,\n                                ListedValue: null,\n                                BoolValue: null,\n                                RemoteName: null \n                            },\n            description: {\n                DefinitionLang: \"\",\n                ShortenedDefinitionLang: \"\",\n                LongDescriptionLang: \"\"\n            },\n             documentStorageLocations: {\n                PickFrom: \n                    {\n                         plant: env.get('documentStorageLocations_Plant'),\n                        warehous: null,\n                        area: null,\n                        shelf: null\n                    }\n                ,\n                PutawayTo:\n                    {\n                        plant:env.get('documentStorageLocations_Plant'),\n                        warehouse: \"\",\n                        area: null,\n                        shelf: null\n                    }\n                ,\n                \"IsObligatory\": true\n            },\n            notes: [],\n            Id: \"\"\n        }\n    ],\n    notes: {\n        addedDate: utcNow,\n        updateDate: null,\n        note: null,\n        addedBy: null,\n        updatedBy: null\n    },\n    Id: \"\"\n};\nconst netsisProductTypes = msg.netsisProductTypes;\n// Utility function to get a value or default from template\nconst getValueOrDefault = (value, defaultValue) => value !== null && value !== undefined ? value : defaultValue;\nconst getValueProductType = (value) => {\n    const found = netsisProductTypes.find(x => x.key === value);\n    return found?.productTypeCodeName === \"ENDİREKT ÜRÜNLER\" || false;\n};\nlet data = msg.netsisOrderPayload_;\n \nif (data && Array.isArray(data)) {\n    const transformedData = data.map(order => {\n       \n        return {\n            docNum: getValueOrDefault(order.docNum, documentData.docNum),\n            state: {\n                State: getValueOrDefault(null, documentData.state.State),\n                ProcessingState: getValueOrDefault(order.overallStatus, documentData.state.ProcessingState),\n                SyncState: getValueOrDefault(null, documentData.state.SyncState)\n            },\n            externalNum: getValueOrDefault(order.docNum, documentData.externalNum),\n            company: getValueOrDefault(order.company, documentData.company),\n            documentType: msg.getAllDocumentTypesrPayload && Array.isArray(msg.getAllDocumentTypesrPayload)\n                ? msg.getAllDocumentTypesrPayload.find(doctype => doctype.code == order.documantTypeCode)\n                : {},\n            documentDate: {\n                CreatedOn: getValueOrDefault(order.createdOn, documentData.documentDate.CreatedOn),\n                UpdatedOn: getValueOrDefault(null, documentData.documentDate.UpdatedOn),\n                LastMovedOn: getValueOrDefault(null, documentData.documentDate.LastMovedOn),\n                LastReceiptOn: getValueOrDefault(null, documentData.documentDate.LastReceiptOn),\n                LastSyncedOn: getValueOrDefault(null, documentData.documentDate.LastSyncedOn),\n                DocDate: getValueOrDefault(order.createdOn, documentData.documentDate.DocDate),\n                PlanedDate: getValueOrDefault(order.createdOn, documentData.documentDate.PlanedDate),\n                DeliveryDate: getValueOrDefault(order.orderdeliveryDate, documentData.documentDate.DeliveryDate)\n            },\n            docCompanies: {\n                SoldTo: getValueOrDefault(order.soldTo, documentData.docCompanies.SoldTo),\n                BoughtFrom: getValueOrDefault(order.boughtFrom, documentData.docCompanies.BoughtFrom),\n                Transit: getValueOrDefault(null, documentData.docCompanies.Transit),\n                ShipTo: getValueOrDefault(order.shipTo, documentData.docCompanies.ShipTo)\n            },\n            documentAttributes: getValueOrDefault(\n                 [\n                    ...(order.documantTypeCode == \"MS\" && order.plaka ? [{\n                        AttributeCode: getValueOrDefault(\"PLAKA\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.plaka, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"PLAKA\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.rootAdi ? [{\n                        AttributeCode: getValueOrDefault(\"ROOTADI\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.rootAdi, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"ROOTADI\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    \n                    ...(order.documantTypeCode == \"MS\" && order.sevkNot ? [{\n                        AttributeCode: getValueOrDefault(\"SEVK_NOT\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.sevkNot, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"SEVK_NOT\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.sofor ? [{\n                        AttributeCode: getValueOrDefault(\"SOFOR\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.sofor, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"SOFOR\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.orderdeliveryDate ? [{\n                        AttributeCode: getValueOrDefault(\"SEVK_TARIHI\", documentData.documentAttributes.AttributeCode),\n                        StrValue: null,\n                        DateValue: getValueOrDefault(order.orderdeliveryDate, documentData.documentAttributes.DateValue),\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"SEVK_TARIHI\", documentData.documentAttributes.DateValue)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.tasiyiciAdi ? [{\n                        AttributeCode: getValueOrDefault(\"TASIYICIADI\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.tasiyiciAdi, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"TASIYICIADI\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.tasiyiciVkn ? [{\n                        AttributeCode: getValueOrDefault(\"TASIYICIVKN\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.tasiyiciVkn, documentData.documentAttributes.StrValue), \n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"TASIYICIVKN\", documentData.documentAttributes.RemoteName)\n\n                    }] : [])\n                ]\n                , documentData.documentAttributes),\n            documentUser: {\n                CreatedBy: getValueOrDefault(null, documentData.documentUser.CreatedBy),\n                UpdatedBy: getValueOrDefault(null, documentData.documentUser.UpdatedBy)\n            },\n            childDocuments: getValueOrDefault(null, documentData.childDocuments),\n            parentDocument: getValueOrDefault(null, documentData.parentDocument),\n            documentStorageLocations: {\n                PickFrom: getValueOrDefault(null, documentData.documentStorageLocations.PickFrom),\n                PutawayTo: getValueOrDefault(null, documentData.documentStorageLocations.PutawayTo),\n                IsObligatory: getValueOrDefault(null, documentData.documentStorageLocations.IsObligatory)\n            },\n            documentFiles: getValueOrDefault(null, documentData.documentFiles),\n            items: order.items ? order.items.map(item => ({\n               \n                ItemNo: getValueOrDefault(item.itemNo, documentData.items[0].ItemNo),\n                DocNum: getValueOrDefault(order.docNum, documentData.docNum),\n                ProductCode: getValueOrDefault(item.productCode, documentData.items[0].ProductCode),\n                Quantity: getValueOrDefault(item.quantity, documentData.items[0].Quantity),\n                Unit: getValueOrDefault(item.unit, documentData.items[0].Unit),\n                BaseQuantity: getValueOrDefault(item.baseQuantity, documentData.items[0].BaseQuantity),\n                BaseUnit: getValueOrDefault(item.baseUnit, documentData.items[0].BaseUnit),\n                state: {\n                    State: getValueOrDefault(null, documentData.items[0].state.State),\n                    ProcessingState: getValueOrDefault(item.status != \"ISS\" ? getValueProductType(item.groupCode) ? \"PRC\" : item.status : item.status, documentData.items[0].state.ProcessingState),\n                    SyncState: getValueOrDefault(null, documentData.items[0].state.SyncState)\n                },\n                reference: {\n                    ErpOrder: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrder),\n                    ErpOrderItemNum: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrderItemNum)\n                },\n                itemBatch: getValueOrDefault(null, documentData.items[0].itemBatch),\n                itemSerials: getValueOrDefault(null, documentData.items[0].itemSerials),\n                itemTolerance: {\n                    PercentagePlus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentagePlus),\n                    PercentageMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentageMinus),\n                    QuantityPlus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityPlus),\n                    QuantityMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityMinus),\n                    Unit: getValueOrDefault(null, documentData.items[0].itemTolerance.Unit)\n                },\n                documentFiles: getValueOrDefault(null, documentData.items[0].documentFiles),\n                documentItemAttributes: [\n                    {\n                        AttributeCode: getValueOrDefault(\"TESLIM_TARIHI\", documentData.items[0].documentItemAttributes.AttributeCode),\n                        StrValue: null,\n                        DateValue: getValueOrDefault(item.deliveryDate, documentData.items[0].documentItemAttributes.DateValue),\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"KALEMIN TESLIM TARIHI\", documentData.items[0].documentItemAttributes.RemoteName)\n                    }],\n                description: {\n                    DefinitionLang: getValueOrDefault(item.definitionLang, documentData.items[0].description.DefinitionLang),\n                    ShortenedDefinitionLang: getValueOrDefault(null, documentData.items[0].description.ShortenedDefinitionLang),\n                    LongDescriptionLang: getValueOrDefault(null, documentData.items[0].description.LongDescriptionLang)\n                },\n                   documentStorageLocations: {\n                 PickFrom: item.pickFrom ? [{\n                    plant: getValueOrDefault(env.get('documentStorageLocations_Plant'), documentData.items[0]?.documentStorageLocations?.PickFrom?.plant),\n                    warehouse: getValueOrDefault(item.pickFrom?.toString(), documentData.items[0]?.documentStorageLocations?.PickFrom?.warehouse),\n                    area: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PickFrom?.area),\n                    shelf: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PickFrom?.shelf)\n                }]\n                : [],\n            \n                 PutawayTo: item.putawayTo ? [{\n                    plant: getValueOrDefault(env.get('documentStorageLocations_Plant'), \n                        documentData.items[0]?.documentStorageLocations?.PutawayTo?.plant),\n                    warehouse: getValueOrDefault(item.putawayTo?.toString(),documentData.items[0]?.documentStorageLocations?.PutawayTo?.warehouse),\n                    area: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PutawayTo?.area),\n                    shelf: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PutawayTo?.shelf)\n                }]\n                : [],\n    \n                IsObligatory: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.IsObligatory)\n                },\n                notes: getValueOrDefault(null, documentData.items[0].notes),\n                \n            })) : [],\n\n            \n            Notes: order.documantTypeCode == \"MS\" && order.acik1 ? [{\n                    addedDate: utcNow,\n                    updateDate: null,\n                    note: order?.acik1,\n                    addedBy: null,\n                    updatedBy: null\n\n            }] : []\n           \n        };\n    });\n\n    const result = {\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData\n        \n    };\n\n    msg.netsis2s4inBuyerAndSellerOrder = result;\n   \n} else {\n    node.warn(\"1111\");\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsis2s4inBuyerAndSellerOrder array is missing or not in expected format.\";\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            [
                "4958f6ff314c62cc"
            ]
        ]
    },
    {
        "id": "7b05a3288c3c0c62",
        "type": "debug",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "debug 480",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "netsisOrderPayload_",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "65a1a05d70b78cc0",
        "type": "debug",
        "z": "bf7e6ed2256e3a44",
        "g": "4370a35114295e81",
        "name": "debug 481",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 360,
        "wires": []
    },
    {
        "id": "d64bb0ce43f56b78",
        "type": "switch",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 160,
        "wires": [
            [
                "53f19905e5016960"
            ],
            []
        ]
    },
    {
        "id": "7243bc819eefb089",
        "type": "function",
        "z": "f62922f2ea3dfbe6",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "55f93553634c4633"
            ]
        ]
    },
    {
        "id": "55f93553634c4633",
        "type": "cronplus",
        "z": "f62922f2ea3dfbe6",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 700,
        "y": 160,
        "wires": [
            [
                "cbc46b3a636fc32b"
            ]
        ]
    },
    {
        "id": "cbc46b3a636fc32b",
        "type": "function",
        "z": "f62922f2ea3dfbe6",
        "name": "function 49",
        "func": "let propIntegration=msg.payload;\n \n\nlet  listAllIntegrationParameters = global.get('allIntegrationParameters')\n \n\nmsg.propIntegration= listAllIntegrationParameters.find(x => x.code === propIntegration.code)\n\n \n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 875,
        "y": 120,
        "wires": [
            [
                "5fd47f67e0d4c1c4"
            ]
        ],
        "l": false
    },
    {
        "id": "5fd47f67e0d4c1c4",
        "type": "switch",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 945,
        "y": 120,
        "wires": [
            [
                "bad816a008a51f7f"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "bad816a008a51f7f",
        "type": "subflow:bb656f77f61addff",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "2fb20ebccfff0950"
            ]
        ]
    },
    {
        "id": "2fb20ebccfff0950",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1200,
        "y": 200,
        "wires": [
            [
                "76a9a062cb075745"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "1ccbfd52b75b7c7f",
        "type": "subflow:bb656f77f61addff",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 340,
        "wires": [
            [
                "b742b94d7c798c1b"
            ]
        ]
    },
    {
        "id": "b742b94d7c798c1b",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 400,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "76a9a062cb075745",
        "type": "subflow:bf7e6ed2256e3a44",
        "z": "f62922f2ea3dfbe6",
        "name": "",
        "x": 1110,
        "y": 260,
        "wires": [
            [
                "1ccbfd52b75b7c7f"
            ],
            [
                "1ccbfd52b75b7c7f"
            ]
        ],
        "info": "Netsis2SFORIN_BuyerAndSellerOrderTransfer"
    },
    {
        "id": "53f19905e5016960",
        "type": "switch",
        "z": "f62922f2ea3dfbe6",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 340,
        "y": 220,
        "wires": [
            [
                "7243bc819eefb089"
            ],
            [
                "e8a6bab622d45dd9"
            ]
        ]
    },
    {
        "id": "e8a6bab622d45dd9",
        "type": "function",
        "z": "f62922f2ea3dfbe6",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "cbc46b3a636fc32b"
            ]
        ]
    },
    {
        "id": "53f5a4039399a533",
        "type": "function",
        "z": "e35d14410b661a09",
        "name": "Get Sforin Category",
        "func": "let baseUrl = global.get(\"SFORIN_URL\");\n msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\n\nmsg.url=baseUrl+env.get(\"Url\");\n\nmsg.payload=msg.dataPayload;\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 70,
        "wires": [
            [
                "e116156c9b9af78d"
            ]
        ]
    },
    {
        "id": "6512429d8162770c",
        "type": "http request",
        "z": "e35d14410b661a09",
        "name": "Sforin Post",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 820,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "a2f2510d285e20b1",
        "type": "complete",
        "z": "e35d14410b661a09",
        "name": "",
        "scope": [
            "6512429d8162770c",
            "b16378eb5fe5eb63"
        ],
        "uncaught": false,
        "x": 120,
        "y": 190,
        "wires": [
            [
                "131dbe6786cec9dd"
            ]
        ]
    },
    {
        "id": "c6fb773b0ea50f18",
        "type": "catch",
        "z": "e35d14410b661a09",
        "name": "",
        "scope": [
            "6512429d8162770c",
            "b16378eb5fe5eb63"
        ],
        "uncaught": false,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "474c7f31a2279615"
            ]
        ]
    },
    {
        "id": "474c7f31a2279615",
        "type": "function",
        "z": "e35d14410b661a09",
        "name": "retry logic",
        "func": "msg.retrie || 0\n \nmsg.retries++;\n\nif (msg.retries <= 3) {\n    return [msg, null];\n} else {\n\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 330,
        "wires": [
            [
                "53f5a4039399a533"
            ],
            [
                "67ef4205ee31ea31"
            ]
        ]
    },
    {
        "id": "67ef4205ee31ea31",
        "type": "function",
        "z": "e35d14410b661a09",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\n\n// Populate the data object dynamically\nconst data = [{\n   \n    dataKey: env.get(\"Url\") || msg.url, // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"No message provided\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    flowName: msg.flowName || \"\",  \n    additionalData:\"No additional data\", // Extra info    \n    requestPayload: JSON.stringify(msg.datapayload || {}), // Serialized request payload\n    responsePayload: JSON.stringify(msg.errorMesaj || {}) // Serialized response payload\n}];\n\n// dönüş değper verilcek \nconst flowName=msg?.propIntegration?.flowName;\nif(global.get(flowName+'_payload_res_status'))\n{\n    global.set(flowName+'_payload_res')\n}\n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "3902efa95b9ee105"
            ]
        ]
    },
    {
        "id": "3902efa95b9ee105",
        "type": "subflow:7cdf28f23984a61d",
        "z": "e35d14410b661a09",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "{{{flowName}}}",
                "type": "env"
            },
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1100,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "51fd48358cb3b56a",
        "type": "function",
        "z": "e35d14410b661a09",
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||false; //default false\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\n\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload;\n \nif ( isDubug) {\n    responsePayload = result;\n}\n//node.warn(msg.payload);\n\n\n// input.statusCode kontrol ediyoruz\nlet jobResult_ = (msg.statusCode === 200 || msg.statusCode === 400) ? 0 : 2;\n\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: env.get(\"Url\") || msg.url, // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult: jobResult_, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info ,\n    flowName: msg.flowName || \"\",   \n    requestPayload: JSON.stringify(msg.dataPayload || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 190,
        "wires": [
            [
                "3902efa95b9ee105"
            ]
        ]
    },
    {
        "id": "131dbe6786cec9dd",
        "type": "switch",
        "z": "e35d14410b661a09",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 370,
        "y": 170,
        "wires": [
            [
                "6e48d8ebdfe61927"
            ],
            [
                "51fd48358cb3b56a"
            ],
            [
                "51fd48358cb3b56a"
            ],
            [
                "51fd48358cb3b56a",
                "67ef4205ee31ea31"
            ]
        ]
    },
    {
        "id": "6e48d8ebdfe61927",
        "type": "subflow:fa51d0694c73d14f",
        "z": "e35d14410b661a09",
        "name": "",
        "x": 255,
        "y": 270,
        "wires": [
            [
                "474c7f31a2279615"
            ]
        ],
        "l": false
    },
    {
        "id": "e116156c9b9af78d",
        "type": "switch",
        "z": "e35d14410b661a09",
        "name": "",
        "property": "Method",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 70,
        "wires": [
            [
                "6512429d8162770c"
            ],
            [
                "b16378eb5fe5eb63"
            ]
        ]
    },
    {
        "id": "b16378eb5fe5eb63",
        "type": "http request",
        "z": "e35d14410b661a09",
        "name": "Sforin Get",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 790,
        "y": 100,
        "wires": [
            [
                "edea23a90abcd648"
            ]
        ]
    },
    {
        "id": "edea23a90abcd648",
        "type": "debug",
        "z": "e35d14410b661a09",
        "name": "debug 360",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 40,
        "wires": []
    },
    {
        "id": "1683e5b00b9f78c7",
        "type": "switch",
        "z": "e02241cc3f021318",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "6636f8ddabc35017"
            ]
        ]
    },
    {
        "id": "332f919cfbe2f708",
        "type": "function",
        "z": "e02241cc3f021318",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "931eb47cb2bcdff3"
            ]
        ]
    },
    {
        "id": "931eb47cb2bcdff3",
        "type": "cronplus",
        "z": "e02241cc3f021318",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "fe821b81415692d1"
            ]
        ]
    },
    {
        "id": "fe821b81415692d1",
        "type": "function",
        "z": "e02241cc3f021318",
        "name": "function 74",
        "func": "let propIntegration = msg.payload;\n\n\n\nlet listAllIntegrationParameters = global.get('allIntegrationParameters');\n\n\nmsg.propIntegration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 795,
        "y": 120,
        "wires": [
            [
                "d1c73b224be28541"
            ]
        ],
        "l": false
    },
    {
        "id": "d1c73b224be28541",
        "type": "switch",
        "z": "e02241cc3f021318",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 865,
        "y": 120,
        "wires": [
            [
                "a251018a9bf04d29"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "a251018a9bf04d29",
        "type": "subflow:bb656f77f61addff",
        "z": "e02241cc3f021318",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "204757e674c5d45b"
            ]
        ]
    },
    {
        "id": "204757e674c5d45b",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "e02241cc3f021318",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1120,
        "y": 200,
        "wires": [
            [
                "41480df05cd9157f"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "431c758cd3a51905",
        "type": "subflow:bb656f77f61addff",
        "z": "e02241cc3f021318",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "b7498c4725ccf723"
            ]
        ]
    },
    {
        "id": "b7498c4725ccf723",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "e02241cc3f021318",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 890,
        "y": 420,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "6636f8ddabc35017",
        "type": "switch",
        "z": "e02241cc3f021318",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 190,
        "wires": [
            [
                "332f919cfbe2f708"
            ],
            [
                "85753004c7e2efa7"
            ]
        ]
    },
    {
        "id": "85753004c7e2efa7",
        "type": "function",
        "z": "e02241cc3f021318",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "41480df05cd9157f",
        "type": "subflow:e00c065eb7c30613",
        "z": "e02241cc3f021318",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/CleanLog",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 270,
        "wires": [
            [
                "431c758cd3a51905"
            ],
            []
        ]
    },
    {
        "id": "d68543ab51e43e79",
        "type": "function",
        "z": "e00c065eb7c30613",
        "name": "Get Sforin Category",
        "func": " msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nlet baseUrl = global.get(\"SFORIN_URL\");\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.dataPayload = \"?Interval=\" + env.get(\"Interval\");\nlet url = baseUrl + env.get(\"Url\");\nlet queryString = msg.dataPayload;\n\nmsg.url = url + queryString\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "3afaae6869304943",
                "4007495fd6b2dc4e"
            ]
        ]
    },
    {
        "id": "31e3c3cf1fdbb6de",
        "type": "subflow:7cdf28f23984a61d",
        "z": "e00c065eb7c30613",
        "d": true,
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "{{{flowName}}}",
                "type": "env"
            },
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 610,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "1865a2db723d4ff7",
        "type": "function",
        "z": "e00c065eb7c30613",
        "d": true,
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||false; //default false\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload;\n \nif (Array.isArray(result?.data) && result.data.length > 0 && isDubug) {\n    responsePayload = result.data[0];\n}\n\n\n// input.statusCode kontrol ediyoruz\nlet jobResult_ = (result?.statusCode === 200 || result?.statusCode === 400) ? 0 : 2;\n\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: msg.url, // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult: jobResult_, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"Log Kayıtları Silme İşlemi\", // Extra info ,\n    flowName: \"DelIntLog \",   \n    requestPayload: JSON.stringify(msg.dataPayload || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "31e3c3cf1fdbb6de"
            ]
        ]
    },
    {
        "id": "3afaae6869304943",
        "type": "http request",
        "z": "e00c065eb7c30613",
        "name": "GET CleanLog",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 610,
        "y": 200,
        "wires": [
            [
                "d713c9e36be8b6d8"
            ]
        ]
    },
    {
        "id": "a62f912397ac8718",
        "type": "catch",
        "z": "e00c065eb7c30613",
        "name": "",
        "scope": [
            "3afaae6869304943"
        ],
        "uncaught": false,
        "x": 470,
        "y": 250,
        "wires": [
            []
        ]
    },
    {
        "id": "d713c9e36be8b6d8",
        "type": "debug",
        "z": "e00c065eb7c30613",
        "name": "debug 437",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 90,
        "wires": []
    },
    {
        "id": "4007495fd6b2dc4e",
        "type": "debug",
        "z": "e00c065eb7c30613",
        "name": "debug 438",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 140,
        "wires": []
    },
    {
        "id": "3e93a71dc459266c",
        "type": "switch",
        "z": "1053798a29903688",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 130,
        "wires": [
            [
                "15cf023ad5fdf863"
            ]
        ]
    },
    {
        "id": "c5013e840fe8736a",
        "type": "function",
        "z": "1053798a29903688",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 210,
        "wires": [
            [
                "59b9a08cf4fd2214"
            ]
        ]
    },
    {
        "id": "59b9a08cf4fd2214",
        "type": "cronplus",
        "z": "1053798a29903688",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 600,
        "y": 150,
        "wires": [
            [
                "3b4496d53ed8ee44"
            ]
        ]
    },
    {
        "id": "3b4496d53ed8ee44",
        "type": "function",
        "z": "1053798a29903688",
        "name": "function 78",
        "func": "let propIntegration = msg.payload;\n\nnode.warn(\"startSYNC\");\n\nlet listAllIntegrationParameters = global.get('allIntegrationParameters'); \n\nlet integration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\nif (integration) {\n        let lastRun = Date.parse(integration.lastRun);\n        let now = Date.now();\n        let diffInMinutes = (now - lastRun) / (1000 * 60);        \n        if (diffInMinutes > 2) {\n            integration.status = \"NOTRUNNING\";   \n            let index = listAllIntegrationParameters.findIndex(x => x.code === propIntegration.code);\n            if (index !== -1) {\n                listAllIntegrationParameters[index] = integration;\n                global.set('allIntegrationParameters', listAllIntegrationParameters);\n                \n            }\n        }\n\n    msg.propIntegration = integration;\n} else {\n    node.warn(`Kod '${propIntegration.code}' ile eşleşen integration bulunamadı.`);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 775,
        "y": 150,
        "wires": [
            [
                "8748e1435351d013"
            ]
        ],
        "l": false
    },
    {
        "id": "8748e1435351d013",
        "type": "switch",
        "z": "1053798a29903688",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 845,
        "y": 150,
        "wires": [
            [
                "58e3d564dcef7f6d"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "58e3d564dcef7f6d",
        "type": "subflow:bb656f77f61addff",
        "z": "1053798a29903688",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1030,
        "y": 170,
        "wires": [
            [
                "c7a86d2f436b97a0"
            ]
        ]
    },
    {
        "id": "c7a86d2f436b97a0",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "1053798a29903688",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1100,
        "y": 230,
        "wires": [
            [
                "2ab39d7b91f2c795"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "c744ad95b5eaf199",
        "type": "subflow:bb656f77f61addff",
        "z": "1053798a29903688",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1110,
        "y": 370,
        "wires": [
            [
                "aa7e289d6f686621"
            ]
        ]
    },
    {
        "id": "aa7e289d6f686621",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "1053798a29903688",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 870,
        "y": 450,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "15cf023ad5fdf863",
        "type": "switch",
        "z": "1053798a29903688",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "c5013e840fe8736a"
            ],
            [
                "cca5250c40e57333"
            ]
        ]
    },
    {
        "id": "cca5250c40e57333",
        "type": "function",
        "z": "1053798a29903688",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 270,
        "wires": [
            [
                "3b4496d53ed8ee44"
            ]
        ]
    },
    {
        "id": "2ab39d7b91f2c795",
        "type": "subflow:706eaf0decd289cd",
        "z": "1053798a29903688",
        "name": "",
        "x": 1100,
        "y": 300,
        "wires": [
            [
                "c744ad95b5eaf199",
                "cb6ffe5b8dd1d991"
            ]
        ]
    },
    {
        "id": "cb6ffe5b8dd1d991",
        "type": "function",
        "z": "1053798a29903688",
        "name": "function 165",
        "func": "const obj = {\n    name: \"SYNC INTEGRATION\",\n    date: new Date(new Date().getTime() + 3 * 60 * 60 * 1000).toISOString().slice(0, 19)\n};\n\nnode.warn(obj);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e2352bf4266f31c6",
        "type": "catch",
        "z": "1053798a29903688",
        "name": "",
        "scope": [
            "2ab39d7b91f2c795"
        ],
        "uncaught": false,
        "x": 970,
        "y": 560,
        "wires": [
            [
                "c744ad95b5eaf199"
            ]
        ]
    },
    {
        "id": "7b33eea33a809a6f",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "function 82",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"INTSYNC000V1.0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `select I.ID,Datakey,T.Name AS DataTypeId,SyncTime,P.Name AS ProcedureId,ErrorInfo  \n\n\t\t\tfrom S4IN_INTEGRATION_SYNC I (NOLOCK)\n            left JOIN S4IN_ProcedureType  P   (NOLOCK) On  I.ProcedureID=P.ID\n            LEFT JOIN S4IN_SyncTableType T   (NOLOCK)ON T.ID=I.DataTypeID\n            WHERE ProcedureID IN (1,2) and Synctime is null;\n            `;\nmsg.query = query;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "456d4127618fd2eb"
            ]
        ]
    },
    {
        "id": "456d4127618fd2eb",
        "type": "subflow:d296b4008b6072d8",
        "z": "706eaf0decd289cd",
        "name": "",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "f60fd7c6d80646cb"
            ],
            []
        ],
        "info": " \r\nIF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'S4IN_INTEGRATION_SYNC')\r\nBEGIN\r\nCREATE TABLE S4IN_INTEGRATION_SYNC (\r\n    ID INT IDENTITY(1,1) PRIMARY KEY,\r\n    Datakey VARCHAR(255) NOT NULL,\r\n    DataTypeID INT,\r\n    Synctime DATETIME DEFAULT GETDATE(),\r\n    ProcedureID INT,\r\n    ErrorInfo VARCHAR(MAX),\r\n    CONSTRAINT UNQ_DataType_DataKey_ UNIQUE (DataTypeID, Datakey),\r\n    CONSTRAINT FK_Procedure FOREIGN KEY (ProcedureID) REFERENCES S4IN_ProcedureType(ID),\r\n\tCONSTRAINT FK_TableType FOREIGN KEY (DataTypeID) REFERENCES S4IN_SyncTableType(ID)\r\n);\r\n\r\nEND\r\n\r\nIF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'S4IN_ProcedureType')\r\nBEGIN\r\n CREATE TABLE S4IN_ProcedureType (\r\n    ID INT IDENTITY(1,1) PRIMARY KEY,\r\n    Name VARCHAR(50) NOT NULL UNIQUE\r\n);\r\nEND\r\nIF NOT EXISTS (SELECT * FROM sys.tables WHERE name = 'S4IN_SyncTableType')\r\nBEGIN\r\n CREATE TABLE S4IN_SyncTableType (\r\n    ID INT IDENTITY(1,1) PRIMARY KEY,\r\n    Name VARCHAR(50) NOT NULL UNIQUE\r\n);\r\nEND\r\n-- Örnek veri ekleme S4IN_SyncTableType\r\n \r\nINSERT INTO S4IN_SyncTableType (Name) VALUES ('TBLSTSABIT');\r\nINSERT INTO S4IN_SyncTableType (Name) VALUES ('TBLCASABIT');\r\nINSERT INTO S4IN_SyncTableType (Name) VALUES ('TBLSIPAMAS');\r\nINSERT INTO S4IN_SyncTableType (Name) VALUES ('TBLISEMRI');\r\n-- Örnek veri ekleme S4IN_ProcedureType\r\nINSERT INTO S4IN_ProcedureType (Name) VALUES ('INSERT');\r\nINSERT INTO S4IN_ProcedureType (Name) VALUES ('UPDATE');\r\nINSERT INTO S4IN_ProcedureType (Name) VALUES ('DELETE');\r\nINSERT INTO S4IN_ProcedureType (Name) VALUES ('ERROR');\r\n \r\n\r\n CREATE  PROCEDURE UpdateS4IN_INTEGRATION_SYNC\r\n    @ID INT = NULL,\r\n\t@ErrorInfo varchar(max)=null\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n        UPDATE S4IN_INTEGRATION_SYNC\r\n        SET Synctime = GETDATE(),\r\n\t\t ErrorInfo=@ErrorInfo\r\n        WHERE ID = @ID;\r\n    \r\nEND;\r\nGO\r\n\r\n \r\n\r\n  "
    },
    {
        "id": "f60fd7c6d80646cb",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "S4IN_INTEGRATION_SYNC",
        "func": "// Gelen JSON\nlet data = msg.payload;\nif (!Array.isArray(data) || data.length === 0) {\n   // node.error(\"Data is either not an array or it is empty\");\n    return [null, msg];\n}\n\n \n// Varsayılan değer (isteğe göre dinamik hale getirilebilir)\nconst defaultValue = {\n    Id: null,\n    DataKey: null,\n    DataTypeID: null,\n    SyncTime: null,\n    ProcedureId: null,\n    ErrorInfo: null\n};\n\n// `data` bir array mi kontrol edelim\nif (!Array.isArray(data)) {\n    node.warn(\"Gelen data bir array değil, işlem yapılmadı.\");\n    msg.payload = []; // Boş bir dizi döndürülüyor\n    return msg;\n}\n\n// Map işlemi ile yeni yapı oluşturuluyor\nconst payloadData = data.map(x => ({\n    ID: x.ID || defaultValue.Id,\n    DataKey: x.Datakey || defaultValue.DataKey,\n    DataTypeId: x.DataTypeId || defaultValue.DataTypeID,  \n    SyncTime: x.SyncTime || defaultValue.SyncTime,\n    ProcedureID: x.ProcedureId || defaultValue.ProcedureId,\n    ErrorInfo: x.ErrorInfo || defaultValue.ErrorInfo\n}));\n\n\n\n \n// DataTypeId'ye göre gruplama yapılıyor\nlet groupedData = payloadData.reduce((acc, item) => {\n    let key = item.DataTypeId;\n    if (!acc[key]) {\n        acc[key] = []; // Eğer key yoksa, yeni bir array başlat\n    }\n    acc[key].push(item); // Veriyi gruba ekle\n    return acc;\n}, {});\n\nmsg.S4IN_INTEGRATION_SYNC = groupedData;\nreturn [msg,null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 220,
        "wires": [
            [
                "function-node"
            ],
            []
        ]
    },
    {
        "id": "function-node",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "Process and Split Data",
        "func": "// tblstsabit\nlet tblStsabit = env.get('INT_TBLSTSABIT')\n// TBLCASABIT\nlet tblCasbit = env.get('INT_TBLCASABIT')\n// TBLSIPAMAS\nlet tbLsipamas = env.get('INT_TBLSIPAMAS')\nlet tblisemri = env.get('INT_TBLISEMRI')\nlet categories = [tblStsabit, tblCasbit, tbLsipamas, tblisemri];\n// 1.cıkış tblstsabit\n// 2.cıkış casabit\n// 3.cıkış sıpamas\n\nlet outputs = [[], [], [],[]]; // Her kategori için bir çıkış\nlet payload = msg.S4IN_INTEGRATION_SYNC;\ncategories.forEach((category, index) => {\n  if (payload[category]) {\n            outputs[index].push({\n                ...msg,\n                dataPayloadSync: payload[category] // Çıkışa gönderilecek obje\n            });\n         \n    }\n    else {\n      outputs[index].push({\n          ...msg,\n          dataPayloadSync:null // Çıkışa gönderilecek obje\n      });\n    }\n});\n//node.warn(outputs)\nreturn outputs;",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 500,
        "wires": [
            [
                "6192f625a71ec850"
            ],
            [
                "3fee709e557b4e65"
            ],
            [
                "e434e1efbede6efc"
            ],
            [
                "ff1a163b862e243f"
            ]
        ]
    },
    {
        "id": "6192f625a71ec850",
        "type": "subflow:a0444666d3c69ec9",
        "z": "706eaf0decd289cd",
        "name": "",
        "x": 760,
        "y": 460,
        "wires": [
            [
                "func1"
            ]
        ],
        "info": "tblstsabit için aktarım yapar ve  S4IN_INTEGRATION_SYNC  tablosuna kayıt  gunccler \r\nALTER TRIGGER [dbo].[S4IN_StockChanges1]\r\nON [dbo].[TBLSTSABIT]\r\nFOR INSERT, UPDATE, DELETE\r\nNOT FOR REPLICATION\r\nAS\r\nBEGIN\r\n    DECLARE @datakey VARCHAR(50),\r\n            @datatypel INT,\r\n            @proc VARCHAR(50),\r\n            @msg VARCHAR(255),\r\n            @status INT;\r\n\r\n    SET @datatypel = (SELECT ID FROM S4IN_SyncTableType WHERE Name = 'TBLSTSABIT');\r\n\r\n    -- Cursor tanımlama\r\n    DECLARE stock_cursor CURSOR FOR \r\n    SELECT INSERTED.STOK_KODU, CASE \r\n                          WHEN NOT EXISTS (SELECT 1 FROM DELETED WHERE DELETED.STOK_KODU = INSERTED.STOK_KODU) THEN 1\r\n                          WHEN EXISTS (SELECT 1 FROM INSERTED) AND EXISTS (SELECT 1 FROM DELETED) THEN 0\r\n                          WHEN NOT EXISTS (SELECT 1 FROM INSERTED) THEN -1\r\n                      END AS OperationType\r\n    FROM INSERTED\r\n    FULL OUTER JOIN DELETED\r\n    ON INSERTED.STOK_KODU = DELETED.STOK_KODU;\r\n\r\n    -- Cursor kullanımı\r\n    OPEN stock_cursor;\r\n    FETCH NEXT FROM stock_cursor INTO @datakey, @status;\r\n\r\n    WHILE @@FETCH_STATUS = 0\r\n    BEGIN\r\n        BEGIN TRY\r\n            IF EXISTS (SELECT 1 FROM S4IN_INTEGRATION_SYNC WHERE Datakey = @datakey AND DataTypeID = @datatypel)\r\n            BEGIN\r\n                UPDATE S4IN_INTEGRATION_SYNC\r\n                SET Synctime = NULL,\r\n                    ProcedureID = CASE\r\n                                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n                                END\r\n                WHERE Datakey = @datakey AND DataTypeID = @datatypel;\r\n            END\r\n            ELSE\r\n            BEGIN\r\n                INSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime, ProcedureID)\r\n                VALUES (\r\n                    @datakey,\r\n                    @datatypel,\r\n                    CASE WHEN @status = -1 THEN GETDATE() ELSE NULL END,\r\n                    CASE\r\n                        WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                        WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n                        ELSE (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n                    END\r\n                );\r\n            END\r\n        END TRY\r\n        BEGIN CATCH\r\n            INSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime, ProcedureID, ErrorInfo)\r\n            VALUES (\r\n                @datakey,\r\n                @datatypel,\r\n                GETDATE(),\r\n                (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'ERROR'),\r\n                ERROR_MESSAGE()\r\n            );\r\n        END CATCH;\r\n\r\n        FETCH NEXT FROM stock_cursor INTO @datakey, @status;\r\n    END\r\n\r\n    CLOSE stock_cursor;\r\n    DEALLOCATE stock_cursor;\r\nEND;\r\n"
    },
    {
        "id": "3fee709e557b4e65",
        "type": "subflow:5608c41bb386c85b",
        "z": "706eaf0decd289cd",
        "name": "",
        "x": 760,
        "y": 510,
        "wires": [
            [
                "func2"
            ]
        ],
        "info": "-- Create the trigger\r\nalter   TRIGGER S4IN_CustomerChanges\r\nON TBLCASABIT\r\nfor      INSERT, UPDATE,DELETE NOT FOR REPLICATION\r\nAS\r\n\r\n BEGIN\r\n  \r\n\r\n\r\n     DECLARE @datakey VARCHAR(MAX),\r\n\t\t\t @datatypel VARCHAR(50),\t\t\t\r\n\t         @proc VARCHAR(50),\r\n\t\t\t @msg VARCHAR(255),\r\n\t\t\t @status INT;  \r\n    \r\n       SET @datatypel =(SELECT ID  FROM S4IN_SyncTableType WHERE Name='TBLCASABIT');\t\r\n\r\n\t    -- Cursor tanımlama\r\n    DECLARE customer_cursor CURSOR FOR \r\n    SELECT INSERTED.CARI_KOD, CASE \r\n                          WHEN NOT EXISTS (SELECT 1 FROM DELETED WHERE DELETED.CARI_KOD = INSERTED.CARI_KOD) THEN 1\r\n                          WHEN EXISTS (SELECT 1 FROM INSERTED) AND EXISTS (SELECT 1 FROM DELETED) THEN 0\r\n                          WHEN NOT EXISTS (SELECT 1 FROM INSERTED) THEN -1\r\n                      END AS OperationType\r\n    FROM INSERTED\r\n    FULL OUTER JOIN DELETED\r\n    ON INSERTED.CARI_KOD = DELETED.CARI_KOD;\r\n\r\n\t -- Cursor kullanımı\r\n    OPEN customer_cursor;\r\n    FETCH NEXT FROM customer_cursor INTO @datakey, @status;\r\n\r\n\tWHILE @@FETCH_STATUS = 0\r\n    BEGIN\r\n    \t \r\n\t\t IF EXISTS (SELECT 1 FROM S4IN_INTEGRATION_SYNC WHERE Datakey=@datakey and DataTypeID=@datatypel)\r\n\t\tBEGIN \r\n\t\t BEGIN TRY\r\n\t\t\t\tUPDATE S4IN_INTEGRATION_SYNC SET \r\n\t\t\t\tSynctime=NULL,\r\n\t\t\t\t  ProcedureID = CASE\r\n                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n\t\t\t\t\tWHEN @status = 1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n                END\r\n\t\t\t\tWHERE Datakey=@datakey  and DataTypeID=@datatypel\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\t\tUPDATE S4IN_INTEGRATION_SYNC SET \r\n\t\t\t\tSynctime=GETDATE(),\r\n\t\t\t\tProcedureID=(SELECT ID  FROM S4IN_ProcedureType WHERE Name='ERROR'),\r\n\t\t\t\tErrorInfo=ERROR_MESSAGE()\r\n\t\t\t\tWHERE Datakey=@datakey  and DataTypeID=@datatypel\r\n\t\tEND CATCH;\r\n\t\t\r\n\t\tEND\r\n\r\n\tELSE --kayıt yok ise insert et StockChangeLog Tabloya \r\n\t\tBEGIN \r\n\t\t BEGIN TRY\r\n\r\n\t\t\t\tINSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime, ProcedureID)\r\n\t\t\t\tVALUES (\r\n\t\t\t\t\t@datakey,\t\t\t--stock codeu\r\n\t\t\t\t\t@datatypel,       -- Hangi tablonun trigger'ı olduğunu belirtir\r\n\t\t\t\t\tCASE WHEN @status =-1 THEN GETDATE() ELSE NULL END, \r\n\t\t\t\t\t CASE\r\n                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n                    ELSE (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n                END         --S4IN_ProcedureType TABLOSUNDAN INSERT ID \r\n\t\t\t\t);\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\t\t\tINSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime,ProcedureID, ErrorInfo)\r\n\t\t\t\t\tVALUES (\r\n\t\t\t\t\t\t@datakey, \r\n\t\t\t\t\t\t@datatypel,       -- Rastgele bir GUID değeri\r\n\t\t\t\t\t\tGETDATE(),\r\n\t\t\t\t\t\t(SELECT ID  FROM S4IN_ProcedureType WHERE Name='ERROR'), --S4IN_ProcedureType TABLOSUNDAN INSERT ID \r\n\t\t\t\t\t\tERROR_MESSAGE() -- Hata mesajını ErrorInfo kolonuna ekler\r\n\t\t\t\t\t);\r\n\t\tEND CATCH;\r\n\r\n\t\tEND\r\n\r\n\t\t  FETCH NEXT FROM customer_cursor INTO @datakey, @status;\r\n\tEND\r\n     CLOSE customer_cursor;\r\n    DEALLOCATE customer_cursor;\r\nEND;\r\n\r\n\r\n "
    },
    {
        "id": "e434e1efbede6efc",
        "type": "subflow:e83dd01867d6527c",
        "z": "706eaf0decd289cd",
        "name": "",
        "x": 730,
        "y": 550,
        "wires": [
            [
                "func3"
            ]
        ],
        "info": "ALTER  TRIGGER S4IN_OrderChanges\r\non TBLSIPAMAS \r\nFOR   INSERT,UPDATE,DELETE   NOT FOR REPLICATION\r\nAS\r\nBEGIN\r\n\r\n     DECLARE @datakey VARCHAR(50),\r\n\t\t\t @datatypel VARCHAR(50),\t\t\t\r\n\t         @proc VARCHAR(50),\r\n\t\t\t @msg VARCHAR(255)\t,\r\n\t\t\t @status INT;  \r\n    \r\n    \r\n\t \r\n    SET @datatypel =(SELECT ID  FROM S4IN_SyncTableType WHERE Name='TBLSIPAMAS');\r\n\t \r\n\r\n\r\n\t  \t\t\t  DECLARE order_cursor CURSOR FOR \r\n    SELECT INSERTED.FATIRS_NO, CASE \r\n                          WHEN NOT EXISTS (SELECT 1 FROM DELETED WHERE DELETED.FATIRS_NO = INSERTED.FATIRS_NO) THEN 1\r\n                          WHEN EXISTS (SELECT 1 FROM INSERTED) AND EXISTS (SELECT 1 FROM DELETED) THEN 0\r\n                          WHEN NOT EXISTS (SELECT 1 FROM INSERTED) THEN -1\r\n                      END AS OperationType\r\n    FROM INSERTED\r\n    FULL OUTER JOIN DELETED\r\n    ON INSERTED.FATIRS_NO = DELETED.FATIRS_NO;\r\n\r\n \t -- Cursor kullanımı\r\n    OPEN order_cursor;\r\n    FETCH NEXT FROM order_cursor INTO @datakey, @status;\r\n\r\n\tWHILE @@FETCH_STATUS = 0\r\n    BEGIN\r\n    \r\n    IF EXISTS (SELECT 1 FROM S4IN_INTEGRATION_SYNC WHERE Datakey=@datakey  and DataTypeID=@datatypel)\r\n\t\tBEGIN \r\n\t\t\r\n\t\t BEGIN TRY\r\n\t\t\t\tUPDATE S4IN_INTEGRATION_SYNC SET \r\n\t\t\t\tSynctime=NULL,\r\n\t\t\t\t ProcedureID = CASE\r\n                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n\t\t\t\t\t-- WHEN @status = 1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n\t\t\t\t\tELSE 1 \r\n                END\r\n\t\t\t\tWHERE Datakey=@datakey  and DataTypeID=@datatypel\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\t\tUPDATE S4IN_INTEGRATION_SYNC SET \r\n\t\t\t\tSynctime=GETDATE(),\r\n\t\t\t\tProcedureID=(SELECT ID  FROM S4IN_ProcedureType WHERE Name='ERROR'),\r\n\t\t\t\tErrorInfo=ERROR_MESSAGE()\r\n\t\t\t\tWHERE Datakey=@datakey  and DataTypeID=@datatypel\r\n\t\tEND CATCH;\r\n\t\tEND\r\n\t ELSE IF EXISTS (SELECT 1 FROM S4IN_INTEGRATION_SYNC WHERE Datakey=@datakey AND @status=1)\r\n\t BEGIN \r\n\t -- SİPARİŞLERİN TOPLAM SAYFASINDA TAMAM BUNTONU UPDATE TRIGGER TETIKLENIYOR\r\n\t RETURN;\r\n\t END\r\n\tELSE --kayıt yok ise insert et StockChangeLog Tabloya \r\n\t\tBEGIN \r\n\t\t BEGIN TRY\r\n\t\t\t\tINSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime, ProcedureID)\r\n\t\t\t\tVALUES (\r\n\t\t\t\t\t@datakey,\t\t\t--stock codeu\r\n\t\t\t\t\t@datatypel,       -- Hangi tablonun trigger'ı olduğunu belirtir\r\n\t\t\t\t\tCASE WHEN @status =-1 THEN GETDATE() ELSE NULL END, \r\n\t\t\t\t\t CASE\r\n                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n                    ELSE (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n                END         --S4IN_ProcedureType TABLOSUNDAN INSERT ID      \r\n\t\t\t\t);\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\t\t\tINSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime,ProcedureID, ErrorInfo)\r\n\t\t\t\t\tVALUES (\r\n\t\t\t\t\t\t@datakey, \r\n\t\t\t\t\t\t@datatypel,       -- Rastgele bir GUID değeri\r\n\t\t\t\t\t\tGETDATE(),\r\n\t\t\t\t\t\t(SELECT ID  FROM S4IN_ProcedureType WHERE Name='ERROR'), --S4IN_ProcedureType TABLOSUNDAN INSERT ID \r\n\t\t\t\t\t\tERROR_MESSAGE() -- Hata mesajını ErrorInfo kolonuna ekler\r\n\t\t\t\t\t);\r\n\t\tEND CATCH;\r\n\r\n\t\tEND\r\n\r\n     FETCH NEXT FROM order_cursor INTO @datakey, @status;\r\n\t END\r\n\r\n\t  CLOSE order_cursor;\r\n    DEALLOCATE order_cursor;\r\nEND;\r\n\r\n\r\n "
    },
    {
        "id": "func1",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "Kol 1 İşlem",
        "func": "msg.payload = { kol: 1, status: 'done' };\nmsg.topic = 'kol1';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 470,
        "wires": [
            [
                "cac14d83f4649482"
            ]
        ]
    },
    {
        "id": "func2",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "Kol 2 İşlem",
        "func": "msg.payload = { kol: 2, status: 'done' };\nmsg.topic = 'kol2';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 520,
        "wires": [
            [
                "cac14d83f4649482"
            ]
        ]
    },
    {
        "id": "func3",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "Kol 3 İşlem",
        "func": "msg.payload = { kol: 3, status: 'done' };\nmsg.topic = 'kol3';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 560,
        "wires": [
            [
                "cac14d83f4649482"
            ]
        ]
    },
    {
        "id": "cac14d83f4649482",
        "type": "join",
        "z": "706eaf0decd289cd",
        "name": "Birleştir",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": false,
        "timeout": "10",
        "count": "4",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1230,
        "y": 450,
        "wires": [
            []
        ]
    },
    {
        "id": "ff1a163b862e243f",
        "type": "subflow:f56e4df3e14fab23",
        "z": "706eaf0decd289cd",
        "name": "",
        "x": 720,
        "y": 590,
        "wires": [
            [
                "075dcc96cfb0d4ae"
            ]
        ],
        "info": "alter     TRIGGER S4IN_ProductionDocChanges\r\non TBLISEMRI \r\nFOR   INSERT,UPDATE,DELETE   NOT FOR REPLICATION\r\nAS\r\nBEGIN\r\n\r\n     DECLARE @datakey VARCHAR(50),\r\n\t\t\t @datatypel VARCHAR(50),\t\t\t\r\n\t         @proc VARCHAR(50),\r\n\t\t\t @msg VARCHAR(255)\t,\r\n\t\t\t @status INT;  \r\n    \r\n    \r\n\t \r\n    SET @datatypel =(SELECT ID  FROM S4IN_SyncTableType WHERE Name='TBLISEMRI');\r\n\t \r\n\t  \r\n\r\n\t  \t\t\t  DECLARE ProductionDoc_cursor CURSOR FOR \r\n    SELECT INSERTED.ISEMRINO, CASE \r\n                          WHEN NOT EXISTS (SELECT 1 FROM DELETED WHERE DELETED.ISEMRINO = INSERTED.ISEMRINO) THEN 1\r\n                          WHEN EXISTS (SELECT 1 FROM INSERTED) AND EXISTS (SELECT 1 FROM DELETED) THEN 0\r\n                          WHEN NOT EXISTS (SELECT 1 FROM INSERTED) THEN -1\r\n                      END AS OperationType\r\n    FROM INSERTED\r\n    FULL OUTER JOIN DELETED\r\n    ON INSERTED.ISEMRINO = DELETED.ISEMRINO;\r\n\r\n \t -- Cursor kullanımı\r\n    OPEN ProductionDoc_cursor;\r\n    FETCH NEXT FROM ProductionDoc_cursor INTO @datakey, @status;\r\n\r\n\tWHILE @@FETCH_STATUS = 0\r\n    BEGIN\r\n    \r\n    IF EXISTS (SELECT 1 FROM S4IN_INTEGRATION_SYNC WHERE Datakey=@datakey  and DataTypeID=@datatypel)\r\n\t\tBEGIN \r\n\t\t\r\n\t\t BEGIN TRY\r\n\t\t\t\tUPDATE S4IN_INTEGRATION_SYNC SET \r\n\t\t\t\tSynctime=NULL,\r\n\t\t\t\t ProcedureID = CASE\r\n                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n\t\t\t\t\t-- WHEN @status = 1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n\t\t\t\t\tELSE 1 \r\n                END\r\n\t\t\t\tWHERE Datakey=@datakey  and DataTypeID=@datatypel\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\t\tUPDATE S4IN_INTEGRATION_SYNC SET \r\n\t\t\t\tSynctime=GETDATE(),\r\n\t\t\t\tProcedureID=(SELECT ID  FROM S4IN_ProcedureType WHERE Name='ERROR'),\r\n\t\t\t\tErrorInfo=ERROR_MESSAGE()\r\n\t\t\t\tWHERE Datakey=@datakey  and DataTypeID=@datatypel\r\n\t\tEND CATCH;\r\n\t\tEND\r\n\t ELSE IF EXISTS (SELECT 1 FROM S4IN_INTEGRATION_SYNC WHERE Datakey=@datakey AND @status=1)\r\n\t BEGIN \r\n\t -- SİPARİŞLERİN TOPLAM SAYFASINDA TAMAM BUNTONU UPDATE TRIGGER TETIKLENIYOR\r\n\t RETURN;\r\n\t END\r\n\tELSE --kayıt yok ise insert et StockChangeLog Tabloya \r\n\t\tBEGIN \r\n\t\t BEGIN TRY\r\n\t\t\t\tINSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime, ProcedureID)\r\n\t\t\t\tVALUES (\r\n\t\t\t\t\t@datakey,\t\t\t--stock codeu\r\n\t\t\t\t\t@datatypel,       -- Hangi tablonun trigger'ı olduğunu belirtir\r\n\t\t\t\t\tCASE WHEN @status =-1 THEN GETDATE() ELSE NULL END, \r\n\t\t\t\t\t CASE\r\n                    WHEN @status = -1 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'DELETE')\r\n                    WHEN @status = 0 THEN (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'UPDATE')\r\n                    ELSE (SELECT ID FROM S4IN_ProcedureType WHERE Name = 'INSERT')\r\n                END         --S4IN_ProcedureType TABLOSUNDAN INSERT ID      \r\n\t\t\t\t);\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\t\t\tINSERT INTO S4IN_INTEGRATION_SYNC (Datakey, DataTypeID, Synctime,ProcedureID, ErrorInfo)\r\n\t\t\t\t\tVALUES (\r\n\t\t\t\t\t\t@datakey, \r\n\t\t\t\t\t\t@datatypel,       -- Rastgele bir GUID değeri\r\n\t\t\t\t\t\tGETDATE(),\r\n\t\t\t\t\t\t(SELECT ID  FROM S4IN_ProcedureType WHERE Name='ERROR'), --S4IN_ProcedureType TABLOSUNDAN INSERT ID \r\n\t\t\t\t\t\tERROR_MESSAGE() -- Hata mesajını ErrorInfo kolonuna ekler\r\n\t\t\t\t\t);\r\n\t\tEND CATCH;\r\n\r\n\t\tEND\r\n\r\n     FETCH NEXT FROM ProductionDoc_cursor INTO @datakey, @status;\r\n\t END\r\n\r\n\t  CLOSE ProductionDoc_cursor;\r\n    DEALLOCATE ProductionDoc_cursor;\r\nEND;\r\n\r\n\r\n "
    },
    {
        "id": "075dcc96cfb0d4ae",
        "type": "function",
        "z": "706eaf0decd289cd",
        "name": "Kol 4 İşlem",
        "func": "msg.payload = { kol: 4, status: 'done' };\nmsg.topic = 'kol4';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 600,
        "wires": [
            [
                "cac14d83f4649482"
            ]
        ]
    },
    {
        "id": "e22042e2e01c2dce",
        "type": "catch",
        "z": "706eaf0decd289cd",
        "name": "",
        "scope": [
            "7b33eea33a809a6f",
            "456d4127618fd2eb",
            "f60fd7c6d80646cb",
            "function-node",
            "func1",
            "func2",
            "func3",
            "cac14d83f4649482",
            "075dcc96cfb0d4ae"
        ],
        "uncaught": false,
        "x": 580,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "04e72e5f4ec91246",
        "type": "comment",
        "z": "407e1a0c9ab51943",
        "g": "5ea72d766d893c6d",
        "name": "Netsis TBLSTBIRIM",
        "info": "",
        "x": 210,
        "y": 720,
        "wires": []
    },
    {
        "id": "7eed762f4e3f6193",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "5ea72d766d893c6d",
        "name": "Netsis TBLSTBIRIM  json",
        "func": "// Environment variable'dan branchCode değerini al\nlet stockCode = msg.item[0].data[0].code\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT \n        OLCUBIRIMI,\n        KOD,\n        PAY,\n        PAYDA,\n        CONVERT(DECIMAL(18,2),NETAGIRLIK) NETAGIRLIK\n        ,CONVERT(DECIMAL(18,2),BRUTAGIRLIK) BRUTAGIRLIK,\n        CONVERT(DECIMAL(18,2),EN) EN,\n        CONVERT(DECIMAL(18,2),BOY) BOY,\n        CONVERT(DECIMAL(18,2),YUKSEKLIK) YUKSEKLIK\n    FROM TBLSTBIRIM  \n            WHERE \n                 KOD= '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 820,
        "wires": [
            [
                "54136bce38894be8"
            ]
        ]
    },
    {
        "id": "88986fc37ad192db",
        "type": "link out",
        "z": "407e1a0c9ab51943",
        "g": "5ea72d766d893c6d",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTOKBARResponse_",
        "mode": "link",
        "links": [
            "46ff991c56b6b9bc"
        ],
        "x": 965,
        "y": 820,
        "wires": []
    },
    {
        "id": "06a4b0d5322eda83",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "5ea72d766d893c6d",
        "name": "function 86",
        "func": "const getLabels = flow.get(\"getLabels\");\nlet stockType=msg.item[0].data[0].productType.typeCode;\n\nmsg.payload?.forEach(item=>\n{\n    msg.item[0].data[0].units.push({\n        \"unitCode\": item.OLCUBIRIMI,\n        \"isBaseUnit\": true,\n        \"factor\": item.PAY,\n        \"divisor\":item.PAYDA,\n        \"area\": 0.0,\n        \"widthM\": item.EN,\n        \"heightM\": item.YUKSEKLIK,\n        \"depthM\": 0.0,\n        \"weightKg\": item.NETAGIRLIK,\n        \"volumeM3\": 0.0,\n        \"labels\": getLabels(stockType)\n    })\n});\nmsg.dataPayload=msg.item[0];\nmsg.flowName = msg.inregrationFlowData.code || \"INTSYNCSP000V1.0\";\nreturn msg;\n\n \n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 820,
        "wires": [
            [
                "88986fc37ad192db"
            ]
        ]
    },
    {
        "id": "9d8294e76b3b08e1",
        "type": "link in",
        "z": "407e1a0c9ab51943",
        "g": "5ea72d766d893c6d",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)INTBLSTBIRIM_",
        "links": [
            "a1a3b78eb3bd1b85"
        ],
        "x": 205,
        "y": 800,
        "wires": [
            [
                "7eed762f4e3f6193"
            ]
        ]
    },
    {
        "id": "54136bce38894be8",
        "type": "subflow:d296b4008b6072d8",
        "z": "407e1a0c9ab51943",
        "g": "5ea72d766d893c6d",
        "name": "",
        "x": 620,
        "y": 820,
        "wires": [
            [
                "06a4b0d5322eda83"
            ],
            []
        ]
    },
    {
        "id": "e2f4feb7b21a1313",
        "type": "comment",
        "z": "407e1a0c9ab51943",
        "g": "623651476803831e",
        "name": "Netsis TBLSTOKBAR",
        "info": "",
        "x": 220,
        "y": 530,
        "wires": []
    },
    {
        "id": "eaec09464da207b0",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "623651476803831e",
        "name": "Netsis Stock json",
        "func": " \nlet stockCode = msg.item[0].data[0].code\n\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    WITH A1 AS ( \n SELECT\n ROW_NUMBER() OVER(partition BY KOD ORDER BY INCKEYNO ASC )+3 SIRA,\n OLCUBIRIMI, KOD  \n FROM TBLSTBIRIM  WHERE KOD='${stockCode}'\n )\n \n SELECT \n    A.STOK_KODU,\n    A.BARKOD,\n    CASE \n        WHEN I_YEDEK1 = 1 THEN B.OLCU_BR1 \n        WHEN I_YEDEK1 = 2 THEN B.OLCU_BR2\n        WHEN I_YEDEK1 = 3 THEN B.OLCU_BR3\n\t\tWHEN I_YEDEK1 = 4 THEN A1.OLCUBIRIMI\n\t\tWHEN I_YEDEK1 = 5 THEN A1.OLCUBIRIMI\t\t\n        ELSE NULL\n    END AS OLCU_BIRIMI\nFROM \n    TBLSTOKBAR A\nLEFT JOIN \n    TBLSTSABIT B ON A.STOK_KODU = B.STOK_KODU\n LEFT JOIN A1 ON A1.KOD=B.STOK_KODU AND I_YEDEK1=A1.SIRA\nWHERE \n    A.STOK_KODU = '${stockCode}';\n\n`;\n\n// msg.payload'a sorguyu ekle\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 630,
        "wires": [
            [
                "e85ed9bf3b3d4d58"
            ]
        ]
    },
    {
        "id": "b9db5cfef88ec62a",
        "type": "link in",
        "z": "407e1a0c9ab51943",
        "g": "623651476803831e",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)InTBLSTOKBAR_",
        "links": [
            "af807ab8af8e751e"
        ],
        "x": 185,
        "y": 610,
        "wires": [
            [
                "eaec09464da207b0"
            ]
        ]
    },
    {
        "id": "811c740404e23a0a",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "623651476803831e",
        "name": "function 87",
        "func": "\n\nmsg.payload?.forEach(item=>\n{\n\nmsg.item[0]?.data[0]?.barcodes.push({\n    unitCode: item.OLCU_BIRIMI,\n    barcode: item.BARKOD\n})\n});\n\n\nreturn msg;\n\n\n\n \n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 630,
        "wires": [
            [
                "a1a3b78eb3bd1b85"
            ]
        ]
    },
    {
        "id": "e85ed9bf3b3d4d58",
        "type": "subflow:d296b4008b6072d8",
        "z": "407e1a0c9ab51943",
        "g": "623651476803831e",
        "name": "",
        "x": 570,
        "y": 630,
        "wires": [
            [
                "811c740404e23a0a"
            ],
            []
        ]
    },
    {
        "id": "a1a3b78eb3bd1b85",
        "type": "link out",
        "z": "407e1a0c9ab51943",
        "g": "623651476803831e",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTBIRIMesponse_",
        "mode": "link",
        "links": [
            "9d8294e76b3b08e1"
        ],
        "x": 895,
        "y": 630,
        "wires": []
    },
    {
        "id": "eb168f58f0bd3ecd",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes=msg.netsisProductTypes;\nconst getAllNetsisProductTypes=msg.getAllNetsisProductTypes?.data;\nvar data = msg.matchingItems;\nnode.warn(data)\nif (!data || (Array.isArray(data) && data.length === 0)) {\n    node.warn(\"aaaaa11111\");\n    msg.errorMesaj = 'KAYIT BULUNAMADI';\n    return [null, msg];\n}\n// getLabels fonksiyonunu tanımla\nflow.set(\"getLabels\", function (groupCode) {\n    if (groupCode == \"HAMMADDE\" || groupCode == \"I\") {\n        return [{\n            \"labelCode\": \"HPE.HAMMADDEPALETETIKETI\",\n            \"designFilePath\": null,\n            \"customerCode\": null,\n            \"packType\": null\n        }];\n    } else if (groupCode == \"MAMUL\" || groupCode == \"M\") {\n        return [{\n            \"labelCode\": \"MPE.MAMULPALETETIKETI\",\n            \"designFilePath\": null,\n            \"customerCode\": null,\n            \"packType\": null\n        }];\n    } else {\n        return null;\n    }\n});\n// flow'dan getLabels fonksiyonunu al\nconst getLabels = flow.get(\"getLabels\");\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    let groupCode = item.GRUP_KODU !== \"\" ? item.GRUP_KODU : \"\";\n    let parentCode=item.ALT_GRUP_KODU !== \"\" ? item.ALT_GRUP_KODU : \"\"\n    let s4inCatagoryGroupCode = getAllNetsisProductTypes.find(\n        x => x.categoryCode === groupCode && (x.parentCategory === null || x.parentCategory === \"\")\n    ) || \"\";\n    \n    \n    let s4inCatagoryParentCode = getAllNetsisProductTypes.find(x => x.categoryCode == parentCode && x.parentCategory ==groupCode)||\"\"\n    \n    return {\n    \n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                 \"customerCodes\": [],\n                 \"productType\": {\n                     \"typeCode\": (netsisProductTypes.find(x => x.key == groupCode)?.productTypeCode) || \"\",                     \n                     \"definitionLang\": (netsisProductTypes.find(x => x.key == groupCode)?.productTypeCodeName) || \"\"\n                    \n                },\n                \"categories\": [\n                   \n                   ...(s4inCatagoryGroupCode.categoryCode?[ \n                    {\n                        \"_id\":s4inCatagoryGroupCode._id||\"\",\n                        \"categoryCode\": groupCode,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"\",\n                        \"netsisDataField\": true\n                    \n                   }]:[]),\n                   ...(s4inCatagoryParentCode.categoryCode?[\n                     {\n                        \"_id\":s4inCatagoryParentCode._id||\"\",\n                        \"categoryCode\": parentCode,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": groupCode,\n                        \"netsisDataField\": true\n                    }\n                   ]:[])\n                  \n                   \n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"isBaseUnit\": true,\n                        \"factor\": 1.0,\n                        \"divisor\": 1.0,\n                        \"area\": 0.0,\n                        \"widthM\": 0.0,\n                        \"heightM\": 0.0,\n                        \"depthM\": 0.0,\n                        \"weightKg\": 0.0,\n                        \"volumeM3\": 0.0,\n                        \"labels\": getLabels(groupCode)\n                    },\n                     ...(item.OLCU_BR2? [{\n                         \"unitCode\": item.OLCU_BR2,\n                         \"isBaseUnit\": true,\n                         \"factor\": item.PAY_1,\n                         \"divisor\": item.PAYDA_1,\n                         \"area\": 0.0,\n                         \"widthM\": 0.0,\n                         \"heightM\": 0.0,\n                         \"depthM\": 0.0,\n                         \"weightKg\": 0.0,\n                         \"volumeM3\": 0.0,\n                         \"labels\": getLabels(groupCode)\n\n                     }]:[]),\n                     ...(item.OLCU_BR3?[{\n                         \"unitCode\": item.OLCU_BR3,\n                        \"isBaseUnit\": true,\n                         \"factor\": item.PAY2,\n                         \"divisor\": item.PAYDA2,\n                        \"area\": 0.0,\n                        \"widthM\": 0.0,\n                        \"heightM\": 0.0,\n                        \"depthM\": 0.0,\n                        \"weightKg\": 0.0,\n                        \"volumeM3\": 0.0,\n                         \"labels\": getLabels(groupCode)\n                     }]:[])\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.OLCU_BR1,\n                        \"barcode\": item.BARKOD1\n                    },\n                    ...(item.OLCU_BR2 ? [{\n                        \"unitCode\": item.OLCU_BR2,\n                        \"barcode\": item.BARKOD2\n                    }] : []),\n                    ...(item.OLCU_BR3 ? [{\n                        \"unitCode\": item.OLCU_BR3,\n                        \"barcode\": item.BARKOD3\n                    }] : [])\n                ],\n                \"images\": [\n                    // {\n                    //     \"imagePath\": \"\",\n                    //     \"sequence\": 0\n                    // }\n                ],\n              \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": null,\n                        \"heightM\": null,\n                        \"depthM\": null,\n                        \"weighthKg\": null,\n                        \"area\": null,\n                        \"wigthtLimitKG\": null,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    // {\n                    //     \"code\": \"\",\n                    //     \"path\": \"\",\n                    //     \"validUntil\": new Date().toISOString(),\n                    //     \"createdOn\": new Date().toISOString(),\n                    //     \"fileDescriptionLang\": \"en\"\n                    // }\n                ],\n                \"attributeValues\": [\n                    ...(item.ANA_KOD ? [{\n                        AttributeCode: \"URUN_GRUP\",\n                        StrValue: item.ANA_KOD,\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: \"URUN GRUP\"\n                    }] : []),\n\n                    ...(item.KOD_5 ==\"ANALIZ\" ? [{\n                        AttributeCode: \"ANALIZ\",\n                        StrValue: item.KOD_5,\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: \"ANALIZ\"\n                    }] : [])\n                ],\n                \"stockLevels\": [],\n               \"manufacturers\": [],\n               \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.STOK_KODU,\n                        \"defaultDefinition\": item.STOK_ADI,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.STOK_KODU,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": [],\n                \"ProductOperationStates\": [\n                    ...(item?.KOD_5 === \"ANALIZ\" ? [\n                        {\n                            \"operationType\": \"OP00201\",\n                            \"TargetStockState\": \"02\",\n                            \"SourceStockState\": null\n                        },\n                        {\n                            \"operationType\": \"OP00202\",\n                            \"TargetStockState\": \"02\",\n                            \"SourceStockState\": \"00\"\n                        }\n                    ] : [])\n                ]\n\n            }\n        ]\n        \n    };\n    \n});\n\n \nmsg.item = Sforinproduct.filter(x => x.data[0].productType.typeCode !=\"\");\n \nif (!msg.item || (Array.isArray(msg.item) && msg.item.length === 0)){\n   msg.errorMesaj='KAYIT BULUNAMADI'\n    return [null,msg];\n}\nmsg.index = 0;\n\nreturn [msg,null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 430,
        "wires": [
            [
                "af807ab8af8e751e"
            ],
            []
        ]
    },
    {
        "id": "e6c8c08dc2b5095c",
        "type": "link in",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)matchingItemsIn_",
        "links": [
            "e24717d7cd0dc85e"
        ],
        "x": 135,
        "y": 410,
        "wires": [
            [
                "eb168f58f0bd3ecd"
            ]
        ]
    },
    {
        "id": "b22edceb0d4cb1f8",
        "type": "comment",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "Product is being shipped",
        "info": "",
        "x": 240,
        "y": 350,
        "wires": []
    },
    {
        "id": "af807ab8af8e751e",
        "type": "link out",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)OutTBLSTOKBAR_",
        "mode": "link",
        "links": [
            "b9db5cfef88ec62a"
        ],
        "x": 485,
        "y": 420,
        "wires": []
    },
    {
        "id": "6ee0bf5b102aeb17",
        "type": "comment",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "",
        "info": "Netsiste stoklar için ayrı bir barkod sistemi kullanılıyor ise \nKontrol ediyorz ve sforine giden json a ekleme yapıyorz\n",
        "x": 510,
        "y": 350,
        "wires": []
    },
    {
        "id": "46ff991c56b6b9bc",
        "type": "link in",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)InTBLSTOKBARResponse_",
        "links": [
            "88986fc37ad192db"
        ],
        "x": 745,
        "y": 320,
        "wires": [
            [
                "aa53b956aec822c9"
            ]
        ]
    },
    {
        "id": "aa53b956aec822c9",
        "type": "subflow:e35d14410b661a09",
        "z": "407e1a0c9ab51943",
        "g": "08eeb7ef81fd0b35",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/ProductSync",
                "type": "str"
            }
        ],
        "x": 870,
        "y": 330,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "827dcc80c9d3666e",
        "type": "comment",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "netsiste stok kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 1060,
        "y": 160,
        "wires": []
    },
    {
        "id": "f9ac06d81e8e4515",
        "type": "differences",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "getSFORINItemsMissingInNetsis",
        "leftInput": "netsisStockCodes",
        "leftInputType": "msg",
        "rightInput": "sforinStockCode",
        "rightInputType": "msg",
        "func": "-",
        "outputType": "msg",
        "output": "payload",
        "x": 870,
        "y": 220,
        "wires": [
            [
                "0908b919782b07dc"
            ]
        ]
    },
    {
        "id": "8f58190b0c42e00e",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "function 88",
        "func": "msg.netsisStockCode=msg.payload;\nlet netsisStockCodes=[];\nif (!msg.netsisStockCode && msg.netsisStockCode.count === 0) {\n    msg.errorMesaj = \"Kayıt Bulunamadı\"\n    node.warn(\"aaaa\");\n    return [null, msg];\n}\n\n//objeelri bir array'e atıyoruz  \nmsg.netsisStockCode.forEach(x => netsisStockCodes.push(x.STOK_KODU))\nmsg.netsisStockCodes=netsisStockCodes;\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 220,
        "wires": [
            [
                "f9ac06d81e8e4515"
            ],
            []
        ]
    },
    {
        "id": "0908b919782b07dc",
        "type": "change",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "transferStockItems",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1170,
        "y": 220,
        "wires": [
            [
                "4f17cb55e00acae7"
            ]
        ]
    },
    {
        "id": "e698d705d59bcb96",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "matchingItems",
        "func": "const netsisStockCode = msg.netsisStockCode;\nconst transferStockItemsArray = msg.transferStockItems;\n\n\n\n \n\nconst matchingItems = transferStockItemsArray.flatMap(stockCode =>\n    netsisStockCode\n        .filter(item => item.STOK_KODU === stockCode)\n        .map(item => ({ ...item, TURNAME: \"\" })) //SFORINE TURNAME ALANI EKLENMEDIGINDE NULL GELIYOR İLİŞKISIZ VERI TABANI OLDUUGNDAN\n\n);\n\n\n\nmsg.matchingItems=matchingItems;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 190,
        "wires": [
            [
                "e24717d7cd0dc85e"
            ]
        ]
    },
    {
        "id": "e24717d7cd0dc85e",
        "type": "link out",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "MetropolUnNetsisToSFORINStockCard(MMSQL)matchingItemsOut_",
        "mode": "link",
        "links": [
            "e6c8c08dc2b5095c"
        ],
        "x": 1665,
        "y": 210,
        "wires": []
    },
    {
        "id": "6dadc790adc81a53",
        "type": "subflow:d296b4008b6072d8",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "",
        "x": 420,
        "y": 220,
        "wires": [
            [
                "8f58190b0c42e00e"
            ],
            []
        ]
    },
    {
        "id": "9604d49a521fd5a8",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "Netsis Stock json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.sforinStockCode = msg.sforinStockCode||[]\n\n// url'den gelen verilerde kısıt var ise sorguya ekleniyor\nlet paramsStockCode = msg.stockCode_DataKey; // parametre ile gelen stok kodu var ise sorguya ekle \n \n   node.warn(paramsStockCode);\n \n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n    SELECT  TOP 1 A.STOK_KODU,\n       dbo.TRK(STOK_ADI) AS STOK_ADI,\n       dbo.TRK(KOD_1) AS GRUP_KODU,\n       dbo.TRK(KOD_2) AS ALT_GRUP_KODU,\n       OLCU_BR1,\n       OLCU_BR2,\n       OLCU_BR3,\n       PAY_1,\n       PAYDA_1,\n       PAY2,\n       PAYDA2,\t  \n       CASE \n           WHEN BARKOD1 IS NOT NULL AND BARKOD1 <> '' THEN BARKOD1\n           WHEN OLCU_BR1 IS NOT NULL AND OLCU_BR1 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR1)\n           ELSE NULL\n       END AS BARKOD1,\n       CASE \n           WHEN BARKOD2 IS NOT NULL AND BARKOD2 <> '' THEN BARKOD2\n           WHEN OLCU_BR2 IS NOT NULL AND OLCU_BR2 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR2)\n           ELSE NULL\n       END AS BARKOD2,\n       CASE \n           WHEN BARKOD3 IS NOT NULL AND BARKOD3 <> '' THEN BARKOD3\n           WHEN OLCU_BR3 IS NOT NULL AND OLCU_BR3 <> '' THEN CONCAT(A.STOK_KODU, OLCU_BR3)\n           ELSE NULL\n       END AS BARKOD3,\n       B.TUR,       \n\t   A.GRUP_KODU AS ANA_KOD,\n\t   A.KOD_5\nFROM TBLSTSABIT A\nLEFT JOIN TBLSTSABITEK B ON A.STOK_KODU = B.STOK_KODU\n    WHERE SUBE_KODU IN ('-1', '${branchCode}')   AND DBO.TRK(UPPER(A.STOK_KODU)) NOT LIKE 'HIZ%'   \n    AND A.STOK_KODU= '${paramsStockCode}'      \n`;\n\n\n// msg.payload'a sorguyu ekle\n\nmsg.query=query;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 220,
        "wires": [
            [
                "6dadc790adc81a53"
            ]
        ]
    },
    {
        "id": "4f17cb55e00acae7",
        "type": "subflow:e93f97e999fe62ab",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 1325,
        "y": 210,
        "wires": [
            [],
            [
                "e698d705d59bcb96"
            ]
        ],
        "l": false
    },
    {
        "id": "b3bf129809ba23dc",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "function 89",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 145,
        "y": 160,
        "wires": [
            [
                "b9868c07d7d275b5"
            ]
        ],
        "l": false
    },
    {
        "id": "b9868c07d7d275b5",
        "type": "subflow:e35d14410b661a09",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllProductCategory",
                "type": "str"
            }
        ],
        "x": 260,
        "y": 160,
        "wires": [
            [
                "0aa4836c21ad06a1"
            ],
            []
        ]
    },
    {
        "id": "0aa4836c21ad06a1",
        "type": "function",
        "z": "407e1a0c9ab51943",
        "g": "36baab9c434a7c9f",
        "name": "function 90",
        "func": "msg.getAllNetsisProductTypes=msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 150,
        "wires": [
            [
                "9604d49a521fd5a8"
            ]
        ],
        "l": false
    },
    {
        "id": "18c871d56049234c",
        "type": "function",
        "z": "f80e2a714bd438bd",
        "g": "a79837f72a1b5d49",
        "name": "ConvertJsonSforinPartner",
        "func": "// data ve msg.netsisCustomers dizilerinin varlığını ve formatlarını kontrol ediyor.\n// env.get fonksiyonunun var olup olmadığını kontrol ediyor.\n// netsisData değişkenine değer bulunmazsa varsayılan değerler kullanıyor.\nvar data = msg.payload;\nif (!data && data.count === 0) {\n    msg.errorMesaj = \"Kayıt Bulunamadı\"\n    return [null, msg];\n}\n// Varsayılan değerleri tanımla\nvar defaultValues = {\n    Id: \"\",\n    Code: \"\",\n    DefinitionLang: \"\",\n    Company: \"metropolun\",\n    Type: \"\",\n    Gln: \"\",\n    Addresses: [\n        {\n            Code: \"\",\n            Name: null,\n            Street: null,\n            No: null,\n            Zip: null,\n            District: null,\n            Town: \"\",\n            City: \"\",\n            Country: \"\",\n            Phone: \"\",\n            Fax: null,\n            Web: null,\n            LatLong: null,\n            Type: null,\n            TimeZone: null,\n            TaxNo: null\n        }\n    ],\n    Dates: {\n        CreatedOn: new Date().toISOString(),\n        UpdatedOn: new Date().toISOString(),\n        LastDeliveryOn: null,\n        LastReceiptOn: null,\n        LastTransferOn: null\n    },\n    Users: {\n        CreatedBy: \"NODE-RED\",\n        UpdatedBy: \"NODE-RED\",\n        NotifyOnDelivery: null,\n        NotifyOnReceipt: null,\n        NotifyOnTransfer: null\n    },\n    PartnerAttributes: [\n        {\n            AttributeCode: \"\",\n            StrValue: null,\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        },\n        {\n            AttributeCode: \"\",\n            StrValue: \"\",\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: \"\"\n        }\n    ]\n};\n\n// 'data' objesinin varlığını kontrol et\nif (data && Array.isArray(data)) {\n    const transformedData = data.map(netsisData => {\n        // 'netsisCustomers' tanımlı mı ve bir dizi mi kontrol et\n         \n\n        return {\n             \n            code: (netsisData && netsisData.CARI_KOD) || defaultValues.Code,\n            definitionLang: (netsisData && netsisData.CARI_ISIM) || defaultValues.DefinitionLang,\n            company: env.get ? env.get(\"companyCode\") : defaultValues.Company, // 'env.get' varsa kullan\n            type: (netsisData && netsisData.CARI_TIPI) || defaultValues.Type,\n            gln: \"\",\n            addresses: [{\n                code: netsisData ? netsisData.CARI_ADRES : defaultValues.Addresses[0].Code,\n                name: null,\n                street: null,\n                no: null,\n                zip: null,\n                district: null,\n                town: netsisData ? netsisData.CARI_ILCE : defaultValues.Addresses[0].Town,\n                city: netsisData ? netsisData.CARI_IL : defaultValues.Addresses[0].City,\n                country: netsisData ? netsisData.ULKE_KODU : defaultValues.Addresses[0].Country,\n                phone: netsisData ? netsisData.CARI_TEL : defaultValues.Addresses[0].Phone,\n                fax: null,\n                web: null,\n                latLong: null,\n                type: null,\n                timeZone: null,\n                taxNo: null\n            }],\n            dates: {\n                createdOn: netsisData ? netsisData.KAYITTARIHI : defaultValues.Dates.CreatedOn,\n                updatedOn: defaultValues.Dates.UpdatedOn,\n                lastDeliveryOn: defaultValues.Dates.LastDeliveryOn,\n                lastReceiptOn: defaultValues.Dates.LastReceiptOn,\n                lastTransferOn: defaultValues.Dates.LastTransferOn\n            },\n            users: {\n                createdBy: defaultValues.Users.CreatedBy,\n                updatedBy: defaultValues.Users.UpdatedBy,\n                notifyOnDelivery: defaultValues.Users.NotifyOnDelivery,\n                notifyOnReceipt: defaultValues.Users.NotifyOnReceipt,\n                notifyOnTransfer: defaultValues.Users.NotifyOnTransfer\n            },\n            notes:  null,\n            partnerAttributes: [\n                {\n                    attributeCode: \"VERGINO\",\n                    strValue: null,\n                    dateValue: null,\n                    numValue: netsisData ? netsisData.VKN_TC : defaultValues.PartnerAttributes[0].NumValue,\n                    listedValue: null,\n                    boolValue: null,\n                    remoteName: \"Vergino\"\n                },\n                {\n                    attributeCode: \"VergiDairesi\",\n                    strValue: netsisData ? netsisData.VERGI_DAIRESI : defaultValues.PartnerAttributes[1].StrValue,\n                    dateValue: null,\n                    numValue: null,\n                    listedValue: null,\n                    boolValue: null,\n                    remoteName: \"VergiDairesi\"\n                }\n            ]\n        };\n    });\n\n    const result ={\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData,\n        current: [\n            {\n                key: \"\",\n                value: \"\"\n            }\n        ]\n    };\n\n    msg.sforinPartner = result;\n   \n} else {\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsisCustomers array is missing or not in expected format.\";\n}\n\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 350,
        "wires": [
            [
                "c2649c7d54b9c708"
            ],
            []
        ]
    },
    {
        "id": "c2649c7d54b9c708",
        "type": "function",
        "z": "f80e2a714bd438bd",
        "g": "a79837f72a1b5d49",
        "name": "Index",
        "func": "\n\n// Assign msg.dataPayload to msg.sforinPartner\nmsg.dataPayload = msg.sforinPartner;\nmsg.flowName = msg.inregrationFlowData.flowName || \"INTSYSCNTSC000V1.0\";\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.dataPayload) && msg.dataPayload.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    \n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 350,
        "wires": [
            [
                "36be859ccfe3d4b5"
            ],
            []
        ]
    },
    {
        "id": "36be859ccfe3d4b5",
        "type": "subflow:e35d14410b661a09",
        "z": "f80e2a714bd438bd",
        "g": "a79837f72a1b5d49",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/PartnerSync",
                "type": "str"
            }
        ],
        "x": 1150,
        "y": 340,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6db83e3d0c5c7554",
        "type": "comment",
        "z": "f80e2a714bd438bd",
        "g": "a79837f72a1b5d49",
        "name": "netsiste cari kartı vamrı kontro et yok ise insert atma işlemi",
        "info": "",
        "x": 770,
        "y": 210,
        "wires": []
    },
    {
        "id": "a02c15375f73a691",
        "type": "subflow:d296b4008b6072d8",
        "z": "f80e2a714bd438bd",
        "g": "a79837f72a1b5d49",
        "name": "",
        "x": 490,
        "y": 350,
        "wires": [
            [
                "18c871d56049234c"
            ],
            []
        ]
    },
    {
        "id": "f240d42321eb272f",
        "type": "function",
        "z": "f80e2a714bd438bd",
        "g": "a79837f72a1b5d49",
        "name": "Netsis Customer json",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nlet paramsCustomerCode = msg.cutomer_DataKey; // parametre ile gelen stok kodu var ise sorguya ekle \n \n// Create the query dynamically\nlet query = `\n   SELECT  \n    CS.CARI_KOD,\n    dbo.TRK(CARI_ISIM) AS CARI_ISIM,\n    dbo.TRK(CARI_ADRES) AS CARI_ADRES,\n    dbo.TRK(CARI_IL) AS CARI_IL,\n    dbo.TRK(CARI_ILCE) AS CARI_ILCE,\n    dbo.TRK(ULKE_KODU) AS ULKE_KODU,\n    CARI_TIP,\n    COALESCE(VERGI_NUMARASI, CSEK.TCKIMLIKNO) AS VKN_TC,\n    dbo.TRK(VERGI_DAIRESI) AS VERGI_DAIRESI,\n    ISNULL(CS.KAYITTARIHI, FORMAT(GETDATE(), 'yyyy.MM.dd')) AS KAYITTARIHI,\n    CS.CARI_TEL,\n    CASE CS.CARI_TIP\n        WHEN 'S' THEN 'VENDOR'\n        WHEN 'A' THEN 'CUSTOMER'\n    END AS CARI_TIPI\nFROM \n    TBLCASABIT CS\nLEFT JOIN \n    TBLCASABITEK CSEK ON CSEK.CARI_KOD = CS.CARI_KOD\nWHERE  \n    CS.CARI_TIP IN ('S', 'A')  \n    AND ISNULL(CS.C_YEDEK1, 'A') = 'A'\n\tAND CS.SUBE_KODU  IN ('-1', '${branchCode}')       \n`;\n\n \n\nif (paramsCustomerCode !== undefined && paramsCustomerCode !== null && paramsCustomerCode !== '') {\n  \n    query += `AND CS.CARI_KOD='${paramsCustomerCode}'`\n}\n// msg.payload'a sorguyu ekle\nmsg.query=query;\nmsg.flowName = msg.inregrationFlowData.flowName || \"INTSYSCNTSC000V1.0\";\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 350,
        "wires": [
            [
                "a02c15375f73a691"
            ]
        ]
    },
    {
        "id": "8b42b50d0ee3af6a",
        "type": "function",
        "z": "a0444666d3c69ec9",
        "name": "function 94",
        "func": "msg.dataPayloadSyncTblStsabit = msg.dataPayloadSync; //// değişken olarak atmassam casabit sıpamas içinde sürekli dataPayloadSync değişme ihtimali var  değişme ihtimali vardı\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 315,
        "y": 190,
        "wires": [
            [
                "9abd6b0225d6ae52"
            ]
        ],
        "l": false
    },
    {
        "id": "9abd6b0225d6ae52",
        "type": "function",
        "z": "a0444666d3c69ec9",
        "name": "function 95",
        "func": "msg.indexSync = msg.indexSync||0\nlet items = msg.dataPayloadSyncTblStsabit; \nlet index = msg.indexSync;\n\nif (!Array.isArray(items)) {\n   // node.error(\"items is not an array\");\n    return [null, msg];\n}\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n    \n\n   \n    // Construct the URL dynamically using dataKey\n    msg.stockCode_DataKey =items[index]?.DataKey;\n    msg.stockCode_Id = items[index]?.ID;\n   \n    return [msg, null];\n\n}\n\n\n \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 190,
        "wires": [
            [
                "62dc09ec68f86f07"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "62dc09ec68f86f07",
        "type": "subflow:407e1a0c9ab51943",
        "z": "a0444666d3c69ec9",
        "name": "",
        "x": 580,
        "y": 180,
        "wires": [
            [
                "19ef9ccbe49c87da",
                "ee5ade88fd41d033"
            ],
            [
                "47422c3884345466",
                "acd4bc8faf599004"
            ]
        ]
    },
    {
        "id": "19ef9ccbe49c87da",
        "type": "function",
        "z": "a0444666d3c69ec9",
        "name": "set index",
        "func": "msg.indexSync++\n\n\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.stockCode_Id}`;\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 170,
        "wires": [
            [
                "645298d8fbe218bf"
            ]
        ]
    },
    {
        "id": "47422c3884345466",
        "type": "function",
        "z": "a0444666d3c69ec9",
        "name": "set index",
        "func": "msg.indexSync++\n\nmsg.errorMesaj= msg.errorMesaj || msg.payload?.detail || \"error\"\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.stockCode_Id},'${msg.errorMesaj}'`;\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 220,
        "wires": [
            [
                "645298d8fbe218bf"
            ]
        ]
    },
    {
        "id": "645298d8fbe218bf",
        "type": "subflow:d296b4008b6072d8",
        "z": "a0444666d3c69ec9",
        "name": "",
        "x": 990,
        "y": 190,
        "wires": [
            [
                "010c1053c884cfa6"
            ],
            []
        ]
    },
    {
        "id": "ee5ade88fd41d033",
        "type": "debug",
        "z": "a0444666d3c69ec9",
        "name": "debug 308",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 400,
        "wires": []
    },
    {
        "id": "acd4bc8faf599004",
        "type": "debug",
        "z": "a0444666d3c69ec9",
        "name": "debug 309",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 530,
        "wires": []
    },
    {
        "id": "af8fa2a954b2bbfa",
        "type": "function",
        "z": "5608c41bb386c85b",
        "name": "function 92",
        "func": "msg.dataPayloadSyncTblCasabit = msg.dataPayloadSync; //// değişken olarak atmassam casabit sıpamas içinde sürekli dataPayloadSync değişme ihtimali var  değişme ihtimali vardı\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 325,
        "y": 140,
        "wires": [
            [
                "15a1d9cbef0fd28f"
            ]
        ],
        "l": false
    },
    {
        "id": "15a1d9cbef0fd28f",
        "type": "function",
        "z": "5608c41bb386c85b",
        "name": "function 93",
        "func": "msg.indexSyncTblcasabit = msg.indexSyncTblcasabit ||0\nlet items = msg.dataPayloadSyncTblCasabit; \nlet index = msg.indexSyncTblcasabit;\n\nif (!Array.isArray(items)) {\n    //node.error(\"items is not an array dataPayloadSyncTblCasabit\");\n    return [null, msg];\n}\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n    \n\n   \n    // Construct the URL dynamically using dataKey\n    msg.cutomer_DataKey =items[index]?.DataKey;\n    msg.cutomer_Id = items[index]?.ID;\n   \n    return [msg, null];\n\n}\n\n\n \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 435,
        "y": 140,
        "wires": [
            [
                "a3e85ca8d5c88f0d"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "a3e85ca8d5c88f0d",
        "type": "subflow:f80e2a714bd438bd",
        "z": "5608c41bb386c85b",
        "name": "",
        "x": 630,
        "y": 160,
        "wires": [
            [
                "21a975165f242b53"
            ],
            [
                "0f89c015839daccb"
            ]
        ]
    },
    {
        "id": "21a975165f242b53",
        "type": "function",
        "z": "5608c41bb386c85b",
        "name": "set index",
        "func": "msg.indexSyncTblcasabit++\n\n\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.cutomer_Id}`;\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 150,
        "wires": [
            [
                "d0abbf6459ca8b48"
            ]
        ]
    },
    {
        "id": "0f89c015839daccb",
        "type": "function",
        "z": "5608c41bb386c85b",
        "name": "set index",
        "func": "msg.indexSyncTblcasabit++\n\nmsg.errorMesaj= msg.errorMesaj || msg.payload?.detail || \"error\"\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.cutomer_Id},'${msg.errorMesaj}'`;\n \nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 200,
        "wires": [
            [
                "d0abbf6459ca8b48"
            ]
        ]
    },
    {
        "id": "d0abbf6459ca8b48",
        "type": "subflow:d296b4008b6072d8",
        "z": "5608c41bb386c85b",
        "name": "",
        "x": 1070,
        "y": 170,
        "wires": [
            [
                "03f3f95f82d20675"
            ],
            []
        ]
    },
    {
        "id": "abefcced94558a62",
        "type": "catch",
        "z": "5608c41bb386c85b",
        "name": "",
        "scope": [
            "af8fa2a954b2bbfa",
            "15a1d9cbef0fd28f",
            "a3e85ca8d5c88f0d",
            "21a975165f242b53",
            "0f89c015839daccb",
            "d0abbf6459ca8b48"
        ],
        "uncaught": false,
        "x": 600,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e2c183b2c9d370a4",
        "type": "function",
        "z": "4a994836a6392703",
        "g": "2817b92c6ba6251d",
        "name": "GetAllDocumentTypes",
        "func": "\n\nmsg.getAllDocumentTypesrPayload = msg.payload.data;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "9f49cd0452209994"
            ]
        ]
    },
    {
        "id": "d99da5c764952d30",
        "type": "comment",
        "z": "4a994836a6392703",
        "g": "2817b92c6ba6251d",
        "name": "GetAllSFORINGetAllDocumentTypes",
        "info": "",
        "x": 250,
        "y": 120,
        "wires": []
    },
    {
        "id": "9f49cd0452209994",
        "type": "link out",
        "z": "4a994836a6392703",
        "g": "2817b92c6ba6251d",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)OUT",
        "mode": "link",
        "links": [
            "5cab40d488b8ed67"
        ],
        "x": 815,
        "y": 160,
        "wires": []
    },
    {
        "id": "2ddf5f9abb4d2bff",
        "type": "subflow:e35d14410b661a09",
        "z": "4a994836a6392703",
        "g": "2817b92c6ba6251d",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllDocumentTypes",
                "type": "str"
            }
        ],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "e2c183b2c9d370a4"
            ],
            []
        ]
    },
    {
        "id": "7f8114e04290d140",
        "type": "function",
        "z": "4a994836a6392703",
        "g": "2817b92c6ba6251d",
        "name": "function 98",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"GNTSBSO000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 160,
        "wires": [
            [
                "2ddf5f9abb4d2bff"
            ]
        ],
        "l": false
    },
    {
        "id": "4118875c7f82f83b",
        "type": "function",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "function 99",
        "func": "msg.netsisOrderPayload=msg.payload;\nlet data = msg.payload;\n\nif(!data && data.count===0){\n    msg.errorMesaj = msg.errorMesaj||\"Kayıt Bulunamadı\";\n    return [null,msg ];\n}\nlet result = {};\n// Initialize an empty array to store unique docNum values\nlet listnetsisOrderDocNum = [];\n\n// Use Set to filter unique docNum values\nlistnetsisOrderDocNum = [...new Set(msg.netsisOrderPayload.map(item => item.docNum))];\n\n// Output the unique docNum list\nmsg.listnetsisOrderDocNum = listnetsisOrderDocNum;\n\n\n// `docNum` ile gruplama yapıyoruz\ndata.forEach(item => {\n    let docNum = item.docNum;\n\n    // Eğer `docNum` zaten varsa, öğeyi mevcut objeye ekliyoruz\n    if (result[docNum]) {\n        result[docNum].items.push({\n            itemNo: item.itemNo,\n            productCode: item.productCode,\n            quantity: item.quantity,\n            unit: item.unit,\n            baseUnit:item.baseUnit,\n            baseQuantity:item.baseQuantity,\n            pickFrom: item.pickFrom,\n            putawayTo:item.putAwayTo,\n            definitionLang: item.DefinitionLang,\n            status:item.status,\n            deliveryDate: item.deliveryDate,\n            groupCode: item.KOD_1\n        });\n    } else {\n        // Eğer yoksa, yeni bir obje oluşturup ekliyoruz\n        result[docNum] = {\n            docNum: docNum,\n            company: item.company,\n            boughtFrom:item.boughtFrom,\n            soldTo:item.soldTo,\n            shipTo:item.shipTo,\n            documantTypeCode: item.documantTypeCode,\n            createdOn: item.createdOn,            \n            customerCode: item.CUSTOMERCODE,\n            overallStatus: item.overallStatus, \n            plaka:item.PLAKA,\n            rootAdi:item.ROOTADI,            \n            sevkNot:item.SEVK_NOT,\n            sofor:item.SOFOR,  \n            tasiyiciAdi: item.TASIYICIADI,\n            tasiyiciVkn: item.TASIYICIVKN, \n            orderdeliveryDate: item.OrderdeliveryDate,\n            acik1:item.ACIK1,\n            items: [{\n            itemNo: item.itemNo,\n            productCode: item.productCode,\n            quantity: item.quantity,\n            unit: item.unit,\n            baseUnit:item.baseUnit,\n            baseQuantity:item.baseQuantity,\n            pickFrom: item.pickFrom,\n            putawayTo:item.putAwayTo,\n            definitionLang: item.DefinitionLang,\n            status:item.status,\n            deliveryDate: item.deliveryDate,\n            groupCode: item.KOD_1\n            \n          \n            }]\n        };\n    }\n});\n// Sonucu array formatına dönüştürüyoruz\nmsg.netsisOrderPayload_ = Object.values(result);\nreturn [msg,null];\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 320,
        "wires": [
            [
                "700c657d22d0cacb"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "b35aeea817a34da1",
        "type": "subflow:d296b4008b6072d8",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "",
        "x": 440,
        "y": 390,
        "wires": [
            [
                "4118875c7f82f83b"
            ],
            []
        ]
    },
    {
        "id": "4449edd9439843a8",
        "type": "function",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "BuyerAndSellerOrder",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSBSO000V1.0\";\n// Sorguyu dinamik olarak oluştur\nlet status_check_query='';\n// url'den gelen verilerde kısıt var ise sorguya ekleniyor\nlet paramsOrderNumber = msg.sipmas_DataKey;\nif (paramsOrderNumber !== undefined && paramsOrderNumber !== null && paramsOrderNumber !== '') {\n\n  \n    status_check_query = ` AND SPTRA.FISNO= '${paramsOrderNumber}'`\n\n}\nlet query = `\n WITH STBIRIM AS\n  (SELECT ROW_NUMBER() OVER(PARTITION BY KOD\n                            ORDER BY INCKEYNO ASC)+3 SIRA,\n                       KOD,\n                       OLCUBIRIMI,\n                       PAY,\n                       PAYDA\n   FROM TBLSTBIRIM),\n  \nSTATUS_CHECK AS (\n    SELECT FISNO,\n           CASE\n               WHEN COUNT(CASE WHEN SPTRA.STHAR_HTUR = 'K' THEN 1 END) = COUNT(*) THEN 'ISS'\n               ELSE 'WAI'\n           END AS overallStatus\n    FROM TBLSIPATRA SPTRA\n    WHERE  1=1   ${status_check_query ? status_check_query:'' }\n    GROUP BY FISNO\n)\nSELECT SPTRA.FISNO\t AS docNum,\n       DB_NAME() AS company,\n       CASE SPMAS.FTIRSIP\n           WHEN 6 THEN 'MS'\n           WHEN 7 THEN 'SS'\n       END documantTypeCode,\n       SPMAS.TARIH createdOn,\n         SPMAS.D_YEDEK10 OrderdeliveryDate,\n        ISNULL(SPTRA.STHAR_TESTAR ,SPMAS.D_YEDEK10) deliveryDate,\n       SPTRA.SIRA itemNo,\n       dbo.TRK(SPTRA.STOK_KODU) productCode, --SPTRA.STHAR_GCMIK-FIRMA_DOVTUT AS quantity ,\n CASE ISNULL(SPTRA.OLCUBR,1)\n      WHEN 0 THEN SPTRA.STHAR_GCMIK-FIRMA_DOVTUT\n     WHEN 1 THEN SPTRA.STHAR_GCMIK-FIRMA_DOVTUT\n     ELSE (STHAR_GCMIK-FIRMA_DOVTUT)*CEVRIM\n END AS quantity,\n CASE ISNULL(SPTRA.OLCUBR,1)\n     WHEN 0 THEN ST.OLCU_BR1\n     WHEN 1 THEN ST.OLCU_BR1\n     WHEN 2 THEN ST.OLCU_BR2\n     WHEN 3 THEN ST.OLCU_BR3\n     WHEN 4 THEN BRM.OLCUBIRIMI\n     WHEN 5 THEN BRM.OLCUBIRIMI\n END AS unit,\n    CASE SPTRA.STHAR_FTIRSIP  WHEN  6\n THEN  SPMAS.CARI_KODU ELSE NULL END soldTo,\n \n CASE SPTRA.STHAR_FTIRSIP  WHEN  7\n THEN  SPMAS.CARI_KODU ELSE NULL END  boughtFrom,\n     CASE SPTRA.STHAR_FTIRSIP  WHEN  6\n THEN  SPTRA.DEPO_KODU  ELSE NULL END pickFrom,\n \n CASE SPTRA.STHAR_FTIRSIP  WHEN  7\n THEN  SPTRA.DEPO_KODU  ELSE NULL END  putAwayTo,   \n    CASE SPTRA.EKALAN_NEDEN WHEN 1 THEN dbo.TRK(EKALAN)\n   ELSE dbo.TRK(ST.STOK_ADI) END  AS DefinitionLang,\n     SPTRA.STHAR_GCMIK AS baseQuantity,\n    ST.OLCU_BR1 AS baseUnit,\n    SPMAS.CARI_KOD2 AS shipTo,\n    \n\t\n\tCASE WHEN SPTRA.STHAR_HTUR ='K' THEN 'ISS'\n\tELSE 'WAI' END [status],\n\tSTATUS_CHECK.overallStatus,\n     ST.KOD_1,\n     SPEK.KT_PLAKA_6 PLAKA ,\n\t SPEK.KT_ROOTADI_6 ROOTADI,\n\t \n\t SPEK.KT_SEVK_NOT_6 SEVK_NOT, \n\t SPEK.KT_SOFOR_6 SOFOR,\n       SPEK.KT_TASIYICIVKN_6 TASIYICIVKN,\n     SPEK.KT_TASIYICI_ADI_6 TASIYICIADI,\n     EK.ACIK1\n\t\nFROM TBLSIPAMAS SPMAS\nLEFT JOIN  TBLFATUEK EK ON SPMAS.FATIRS_NO=EK.FATIRSNO AND SPMAS.FTIRSIP=EK.FKOD\nLEFT JOIN TBLSIPATRA SPTRA ON SPMAS.FATIRS_NO = SPTRA.FISNO\nLEFT JOIN TBLSTSABIT ST ON ST.STOK_KODU=SPTRA.STOK_KODU\nLEFT JOIN STBIRIM BRM ON BRM.KOD=SPTRA.STOK_KODU\nAND ISNULL(SPTRA.OLCUBR,1)=BRM.SIRA\nJOIN STATUS_CHECK ON SPMAS.FATIRS_NO = STATUS_CHECK.FISNO\nLEFT JOIN TBLSIPAMASSAHAEK SPEK ON SPEK.FATIRS_NO=SPMAS.FATIRS_NO AND SPEK.CARI_KODU=SPMAS.CARI_KODU AND SPEK.FTIRSIP=SPMAS.FTIRSIP\nWHERE SPMAS.SUBE_KODU IN  ('-1', '${branchCode}')     \n`;\n\n \n\n\n\n  \nif (paramsOrderNumber !== undefined && paramsOrderNumber !== null && paramsOrderNumber !== '') {\n   \n  query += `AND SPMAS.FATIRS_NO= '${paramsOrderNumber}'`\n    status_check_query = ` AND SPTRA.FISNO= '${paramsOrderNumber}'`\n\n}\n\n// msg.payload'a sorguyu ekle\n//node.warn(query);\nmsg.query = query;\n\n\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 390,
        "wires": [
            [
                "b35aeea817a34da1"
            ]
        ]
    },
    {
        "id": "d2599882a497a316",
        "type": "function",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "JSON",
        "func": "const utcNow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));\nconst documentData = {\n    docNum: \"\",\n    state: {\n        State: \"ACT\",\n        ProcessingState: \"WAI\",\n        SyncState: \"DWN\"\n    },\n    externalNum: \"\",\n    company: \"\",\n    documentType: {\n        Code: \"\",\n        Definition: \"\",\n        CounterCode: \"\",\n        Direction: \"\",\n        IsTwoStep: null,\n        Id: \"\"\n    },\n    documentDate: {\n        CreatedOn: null,\n        UpdatedOn: null,\n        LastMovedOn: null,\n        LastReceiptOn: null,\n        LastSyncedOn: null,\n        DocDate: null,\n        PlanedDate: null,\n        DeliveryDate: null\n    },\n    docCompanies: {\n        SoldTo: null,\n        BoughtFrom: null,\n        Transit: null,\n        ShipTo: null\n    },\n    documentAttributes: {\n        AttributeCode: null,\n        StrValue: null,\n        DateValue: utcNow,\n        NumValue: null,\n        ListedValue: null,\n        BoolValue: null,\n        RemoteName: null\n    },\n    documentUser: {\n        CreatedBy: \"node-red\",\n        UpdatedBy: null\n    },\n    childDocuments: null,\n    parentDocument: null,\n    documentStorageLocations: {\n        PickFrom: [],\n        PutawayTo: [],\n        IsObligatory: true\n    },\n    documentFiles: [],\n    items: [\n        {\n            ItemNo: null,\n            DocNum: \"\",\n            ProductCode: \"\",\n            Quantity: null,\n            Unit: \"\",\n            BaseQuantity: null,\n            BaseUnit: null,\n            state: {\n                State: \"ACT\",\n                ProcessingState: \"WAI\",\n                SyncState: \"DWN\"\n            },\n            reference: {\n                ErpOrder: \"\",\n                ErpOrderItemNum: \"\"\n            },\n            itemBatch: [],\n            itemSerials: [],\n            itemTolerance: {\n                PercentagePlus: 0,\n                PercentageMinus: 0,\n                QuantityPlus: 0,\n                QuantityMinus: 0,\n                Unit: 0\n            },\n            documentFiles: [],\n            documentItemAttributes: \n                            {\n                                AttributeCode:null ,\n                                StrValue:null ,\n                                DateValue: utcNow,\n                                NumValue: null,\n                                ListedValue: null,\n                                BoolValue: null,\n                                RemoteName: null \n                            },\n            description: {\n                DefinitionLang: \"\",\n                ShortenedDefinitionLang: \"\",\n                LongDescriptionLang: \"\"\n            },\n             documentStorageLocations: {\n                PickFrom: \n                    {\n                         plant: env.get('documentStorageLocations_Plant'),\n                        warehous: null,\n                        area: null,\n                        shelf: null\n                    }\n                ,\n                PutawayTo:\n                    {\n                        plant:env.get('documentStorageLocations_Plant'),\n                        warehouse: \"\",\n                        area: null,\n                        shelf: null\n                    }\n                ,\n                \"IsObligatory\": true\n            },\n            notes: [],\n            Id: \"\"\n        }\n    ],\n    notes: {\n        addedDate: utcNow,\n        updateDate: null,\n        note: null,\n        addedBy: null,\n        updatedBy: null\n    },\n    Id: \"\"\n};\nconst netsisProductTypes = msg.netsisProductTypes;\n// Utility function to get a value or default from template\nconst getValueOrDefault = (value, defaultValue) => value !== null && value !== undefined ? value : defaultValue;\nconst getValueProductType = (value) => {\n    const found = netsisProductTypes.find(x => x.key === value);\n    return found?.productTypeCodeName === \"ENDİREKT ÜRÜNLER\" || false;\n};\nlet data = msg.netsisOrderPayload_;\n \nif (data && Array.isArray(data)) {\n    const transformedData = data.map(order => {\n        node.warn(order.ROOTADI);\n        return {\n            docNum: getValueOrDefault(order.docNum, documentData.docNum),\n            state: {\n                State: getValueOrDefault(null, documentData.state.State),\n                ProcessingState: getValueOrDefault(order.overallStatus, documentData.state.ProcessingState),\n                SyncState: getValueOrDefault(null, documentData.state.SyncState)\n            },\n            externalNum: getValueOrDefault(order.docNum, documentData.externalNum),\n            company: getValueOrDefault(order.company, documentData.company),\n            documentType: msg.getAllDocumentTypesrPayload && Array.isArray(msg.getAllDocumentTypesrPayload)\n                ? msg.getAllDocumentTypesrPayload.find(doctype => doctype.code == order.documantTypeCode)\n                : {},\n            documentDate: {\n                CreatedOn: getValueOrDefault(order.createdOn, documentData.documentDate.CreatedOn),\n                UpdatedOn: getValueOrDefault(null, documentData.documentDate.UpdatedOn),\n                LastMovedOn: getValueOrDefault(null, documentData.documentDate.LastMovedOn),\n                LastReceiptOn: getValueOrDefault(null, documentData.documentDate.LastReceiptOn),\n                LastSyncedOn: getValueOrDefault(null, documentData.documentDate.LastSyncedOn),\n                DocDate: getValueOrDefault(order.createdOn, documentData.documentDate.DocDate),\n                PlanedDate: getValueOrDefault(order.createdOn, documentData.documentDate.PlanedDate),\n                DeliveryDate: getValueOrDefault(order.orderdeliveryDate, documentData.documentDate.DeliveryDate)\n            },\n            docCompanies: {\n                SoldTo: getValueOrDefault(order.soldTo, documentData.docCompanies.SoldTo),\n                BoughtFrom: getValueOrDefault(order.boughtFrom, documentData.docCompanies.BoughtFrom),\n                Transit: getValueOrDefault(null, documentData.docCompanies.Transit),\n                ShipTo: getValueOrDefault(order.shipTo, documentData.docCompanies.ShipTo)\n            },\n            documentAttributes: getValueOrDefault(\n                [\n                    ...(order.documantTypeCode == \"MS\" && order.plaka ? [{\n                        AttributeCode: getValueOrDefault(\"PLAKA\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.plaka, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"PLAKA\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.rootAdi ? [{\n                        AttributeCode: getValueOrDefault(\"ROOTADI\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.rootAdi, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"ROOTADI\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                   \n                    ...(order.documantTypeCode == \"MS\" && order.sevkNot ? [{\n                        AttributeCode: getValueOrDefault(\"SEVK_NOT\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.sevkNot, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"SEVK_NOT\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.sofor ? [{\n                        AttributeCode: getValueOrDefault(\"SOFOR\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.sofor, documentData.documentAttributes.StrValue),\n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"SOFOR\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    \n                    ...(order.documantTypeCode == \"MS\" && order.orderdeliveryDate ? [{\n                        AttributeCode: getValueOrDefault(\"SEVK_TARIHI\", documentData.documentAttributes.AttributeCode),\n                        StrValue: null,\n                        DateValue: getValueOrDefault(order.orderdeliveryDate, documentData.documentAttributes.DateValue),\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"SEVK_TARIHI\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.tasiyiciAdi ? [{\n                        AttributeCode: getValueOrDefault(\"TASIYICIADI\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.tasiyiciAdi, documentData.documentAttributes.StrValue), \n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"TASIYICIADI\", documentData.documentAttributes.RemoteName)\n\n                    }] : []),\n                    ...(order.documantTypeCode == \"MS\" && order.tasiyiciVkn ? [{\n                        AttributeCode: getValueOrDefault(\"TASIYICIVKN\", documentData.documentAttributes.AttributeCode),\n                        StrValue: getValueOrDefault(order.tasiyiciVkn, documentData.documentAttributes.StrValue), \n                        DateValue: null,\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"TASIYICIVKN\", documentData.documentAttributes.RemoteName)\n\n                    }] : [])\n                ]\n                \n                , documentData.documentAttributes),\n            documentUser: {\n                CreatedBy: getValueOrDefault(null, documentData.documentUser.CreatedBy),\n                UpdatedBy: getValueOrDefault(null, documentData.documentUser.UpdatedBy)\n            },\n            childDocuments: getValueOrDefault(null, documentData.childDocuments),\n            parentDocument: getValueOrDefault(null, documentData.parentDocument),\n            documentStorageLocations: {\n                PickFrom: getValueOrDefault(null, documentData.documentStorageLocations.PickFrom),\n                PutawayTo: getValueOrDefault(null, documentData.documentStorageLocations.PutawayTo),\n                IsObligatory: getValueOrDefault(null, documentData.documentStorageLocations.IsObligatory)\n            },\n            documentFiles: getValueOrDefault(null, documentData.documentFiles),\n            items: order.items ? order.items.map(item => ({\n               \n                ItemNo: getValueOrDefault(item.itemNo, documentData.items[0].ItemNo),\n                DocNum: getValueOrDefault(order.docNum, documentData.docNum),\n                ProductCode: getValueOrDefault(item.productCode, documentData.items[0].ProductCode),\n                Quantity: getValueOrDefault(item.quantity, documentData.items[0].Quantity),\n                Unit: getValueOrDefault(item.unit, documentData.items[0].Unit),\n                BaseQuantity: getValueOrDefault(item.baseQuantity, documentData.items[0].BaseQuantity),\n                BaseUnit: getValueOrDefault(item.baseUnit, documentData.items[0].BaseUnit),\n                state: {\n                    State: getValueOrDefault(null, documentData.items[0].state.State),\n                    ProcessingState: getValueOrDefault(item.status != \"ISS\" ? getValueProductType(item.groupCode) ? \"PRC\" : item.status : item.status, documentData.items[0].state.ProcessingState),\n                    SyncState: getValueOrDefault(null, documentData.items[0].state.SyncState)\n                },\n                reference: {\n                    ErpOrder: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrder),\n                    ErpOrderItemNum: getValueOrDefault(order.docNum, documentData.items[0].reference.ErpOrderItemNum)\n                },\n                itemBatch: getValueOrDefault(null, documentData.items[0].itemBatch),\n                itemSerials: getValueOrDefault(null, documentData.items[0].itemSerials),\n                itemTolerance: {\n                    PercentagePlus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentagePlus),\n                    PercentageMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.PercentageMinus),\n                    QuantityPlus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityPlus),\n                    QuantityMinus: getValueOrDefault(null, documentData.items[0].itemTolerance.QuantityMinus),\n                    Unit: getValueOrDefault(null, documentData.items[0].itemTolerance.Unit)\n                },\n                documentFiles: getValueOrDefault(null, documentData.items[0].documentFiles),\n                documentItemAttributes: [\n                    {\n                        AttributeCode: getValueOrDefault(\"TESLIM_TARIHI\", documentData.items[0].documentItemAttributes.AttributeCode),\n                        StrValue: null,\n                        DateValue: getValueOrDefault(item.deliveryDate, documentData.items[0].documentItemAttributes.DateValue),\n                        NumValue: null,\n                        ListedValue: null,\n                        BoolValue: null,\n                        RemoteName: getValueOrDefault(\"KALEMIN TESLIM TARIHI\", documentData.items[0].documentItemAttributes.RemoteName)\n                    }],\n                description: {\n                    DefinitionLang: getValueOrDefault(item.definitionLang, documentData.items[0].description.DefinitionLang),\n                    ShortenedDefinitionLang: getValueOrDefault(null, documentData.items[0].description.ShortenedDefinitionLang),\n                    LongDescriptionLang: getValueOrDefault(null, documentData.items[0].description.LongDescriptionLang)\n                },\n                   documentStorageLocations: {\n                 PickFrom: item.pickFrom ? [{\n                    plant: getValueOrDefault(env.get('documentStorageLocations_Plant'), documentData.items[0]?.documentStorageLocations?.PickFrom?.plant),\n                    warehouse: getValueOrDefault(item.pickFrom?.toString(), documentData.items[0]?.documentStorageLocations?.PickFrom?.warehouse),\n                    area: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PickFrom?.area),\n                    shelf: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PickFrom?.shelf)\n                }]\n                : [],\n            \n                 PutawayTo: item.putawayTo ? [{\n                    plant: getValueOrDefault(env.get('documentStorageLocations_Plant'), \n                        documentData.items[0]?.documentStorageLocations?.PutawayTo?.plant),\n                    warehouse: getValueOrDefault(item.putawayTo?.toString(),documentData.items[0]?.documentStorageLocations?.PutawayTo?.warehouse),\n                    area: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PutawayTo?.area),\n                    shelf: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.PutawayTo?.shelf)\n                }]\n                : [],\n    \n                IsObligatory: getValueOrDefault(null, documentData.items[0]?.documentStorageLocations?.IsObligatory)\n                },\n                notes: getValueOrDefault(null, documentData.items[0].notes),\n                \n            })) : [],\n            Notes: order.documantTypeCode == \"MS\" && order?.acik1 ? [{\n                addedDate: utcNow,\n                updateDate: null,\n                note: order?.acik1,\n                addedBy: null,\n                updatedBy: null\n\n            }] : []\n           \n        };\n    });\n\n    const result = {\n        requestId: \"\",\n        sender: \"node-red\",\n        data: transformedData\n        \n    };\n\n    msg.netsis2s4inBuyerAndSellerOrder = result;\n   \n} else {\n    node.warn(\"1111\");\n    // Hata mesajı\n    msg.payload = \"Unmatched account codes or netsis2s4inBuyerAndSellerOrder array is missing or not in expected format.\";\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 390,
        "wires": [
            [
                "e0b5b2e8ae455ae7"
            ]
        ]
    },
    {
        "id": "5cab40d488b8ed67",
        "type": "link in",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "MetropolUnNetsisToSFORINStock Card(MMSQL)IN",
        "links": [
            "9f49cd0452209994"
        ],
        "x": 115,
        "y": 330,
        "wires": [
            [
                "4449edd9439843a8"
            ]
        ]
    },
    {
        "id": "e0b5b2e8ae455ae7",
        "type": "function",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "Check",
        "func": "\n\n// Assign msg.payload to msg.netsis2s4inBuyerAndSellerOrder\nmsg.dataPayload = msg.netsis2s4inBuyerAndSellerOrder;\nmsg.flowName = msg.inregrationFlowData.flowName || \"GNTSBSO000V1.0\";\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.payload.data) && msg.payload.data.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 390,
        "wires": [
            [
                "23327e292123f24b"
            ],
            []
        ]
    },
    {
        "id": "b071bb445e7d186c",
        "type": "comment",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "olcubrm 0 olanlar kontrol edilecek",
        "info": "olcubrm 0 olanlar kontrol edilecek",
        "x": 300,
        "y": 350,
        "wires": []
    },
    {
        "id": "18ef2cd7a375fa85",
        "type": "link out",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0 Out_GetwareHouse",
        "mode": "link",
        "links": [
            "694f397723177783"
        ],
        "x": 535,
        "y": 570,
        "wires": []
    },
    {
        "id": "87743355ad736859",
        "type": "link in",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "ResultGetWarehouseLocationsIn",
        "links": [
            "de56bd29c6e3434b"
        ],
        "x": 615,
        "y": 570,
        "wires": [
            []
        ]
    },
    {
        "id": "23327e292123f24b",
        "type": "subflow:e35d14410b661a09",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/DocumentSync",
                "type": "str"
            }
        ],
        "x": 950,
        "y": 400,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d3126e2db3130484",
        "type": "function",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "GetWarehouseLocations",
        "func": "// Get the JSON data\nmsg.getWarehouseLocationsPayload = msg.payload.data;\n\n\n\nreturn msg;\n\n\n \n \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 650,
        "wires": [
            [
                "de56bd29c6e3434b"
            ]
        ]
    },
    {
        "id": "b525e6871c7e5d79",
        "type": "comment",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "GetAllSFORINGetWarehouseLocations",
        "info": "",
        "x": 250,
        "y": 590,
        "wires": []
    },
    {
        "id": "694f397723177783",
        "type": "link in",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "MetropolUn_Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0 In_GetwareHouse",
        "links": [
            "18ef2cd7a375fa85"
        ],
        "x": 165,
        "y": 650,
        "wires": [
            [
                "e771463ed8140dd9"
            ]
        ]
    },
    {
        "id": "de56bd29c6e3434b",
        "type": "link out",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "ResultGetWarehouseLocationsOut",
        "mode": "link",
        "links": [
            "87743355ad736859"
        ],
        "x": 725,
        "y": 650,
        "wires": []
    },
    {
        "id": "56622741fabbdf31",
        "type": "subflow:e35d14410b661a09",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetWarehouseLocations",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 650,
        "wires": [
            [
                "d3126e2db3130484"
            ],
            []
        ]
    },
    {
        "id": "e771463ed8140dd9",
        "type": "function",
        "z": "4a994836a6392703",
        "d": true,
        "g": "04be4bbb805f6483",
        "name": "function 100",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSBSO000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 215,
        "y": 640,
        "wires": [
            [
                "56622741fabbdf31"
            ]
        ],
        "l": false
    },
    {
        "id": "700c657d22d0cacb",
        "type": "subflow:e93f97e999fe62ab",
        "z": "4a994836a6392703",
        "g": "4ffcfc17d9807587",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 635,
        "y": 340,
        "wires": [
            [],
            [
                "d2599882a497a316"
            ]
        ],
        "outputLabels": [
            "",
            "netsisProductTypes"
        ],
        "l": false
    },
    {
        "id": "107498694ec2a151",
        "type": "function",
        "z": "e83dd01867d6527c",
        "name": "function 96",
        "func": "msg.dataPayloadSyncTblSipmas = msg.dataPayloadSync; //// değişken olarak atmassam  TblSipmas sıpamas içinde sürekli dataPayloadSync değişme ihtimali var  değişme ihtimali vardı\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 170,
        "wires": [
            [
                "d314a1e44e24c82b"
            ]
        ],
        "l": false
    },
    {
        "id": "d314a1e44e24c82b",
        "type": "function",
        "z": "e83dd01867d6527c",
        "name": "function 97",
        "func": "msg.indexSyncTblSipmas = msg.indexSyncTblSipmas ||0\nlet items = msg.dataPayloadSyncTblSipmas; \nlet index = msg.indexSyncTblSipmas;\n\nif (!Array.isArray(items)) {\n   // node.error(\"items is not an array indexSyncTblSipmas\");\n    return [null, msg];\n}\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n    \n \n   \n    // Construct the URL dynamically using dataKey\n    msg.sipmas_DataKey =items[index]?.DataKey;\n    msg.sipmas_Id = items[index]?.ID;\n   \n    return [msg, null];\n\n}\n\n\n \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 495,
        "y": 180,
        "wires": [
            [
                "662508ce083f5d3b"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "662508ce083f5d3b",
        "type": "subflow:4a994836a6392703",
        "z": "e83dd01867d6527c",
        "name": "",
        "x": 660,
        "y": 170,
        "wires": [
            [
                "dd392f95aaeebef0"
            ],
            [
                "17b2fab43f572118"
            ]
        ]
    },
    {
        "id": "dd392f95aaeebef0",
        "type": "function",
        "z": "e83dd01867d6527c",
        "name": "set index",
        "func": "msg.indexSyncTblSipmas++\n\n\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.sipmas_Id}`;\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 160,
        "wires": [
            [
                "b80e38507b5bdd2d"
            ]
        ]
    },
    {
        "id": "17b2fab43f572118",
        "type": "function",
        "z": "e83dd01867d6527c",
        "name": "set index",
        "func": "msg.indexSyncTblSipmas++\n\nmsg.errorMesaj= msg.errorMesaj || msg.payload?.detail || \"error\"\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.sipmas_Id},'${msg.errorMesaj}'`;\nmsg.query = query;\nmsg.errorMesaj=null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 210,
        "wires": [
            [
                "b80e38507b5bdd2d"
            ]
        ]
    },
    {
        "id": "b80e38507b5bdd2d",
        "type": "subflow:d296b4008b6072d8",
        "z": "e83dd01867d6527c",
        "name": "",
        "x": 1180,
        "y": 180,
        "wires": [
            [
                "77b8d55e52ead813"
            ],
            []
        ]
    },
    {
        "id": "b80b02ecfcf2aee8",
        "type": "catch",
        "z": "e83dd01867d6527c",
        "name": "",
        "scope": [
            "107498694ec2a151",
            "d314a1e44e24c82b",
            "662508ce083f5d3b",
            "dd392f95aaeebef0",
            "17b2fab43f572118",
            "b80e38507b5bdd2d"
        ],
        "uncaught": false,
        "x": 640,
        "y": 370,
        "wires": [
            []
        ]
    },
    {
        "id": "08f5b7f2d9c2f1d5",
        "type": "comment",
        "z": "2edf95049d03fe02",
        "name": "NetsistoSforinCategoriesIntegration",
        "info": "S4INDE OLAN TUM GRUP KODLARINI(KOD_2) SILINIYOR",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "c8c9d4575946d7d9",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = msg.netsisGroupCode;\n\n\n\n// Map the incoming objects to Sets based on their respective codes\nmsg.listNetsisGroupCode = Array.from(new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM])));\n\n \n\n\nmsg.status = true;\n   \nreturn  msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 270,
        "wires": [
            [
                "c8f5e470ee1a4ab9"
            ]
        ]
    },
    {
        "id": "c8f5e470ee1a4ab9",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "ConvertJson",
        "func": "let items = msg.listNetsisGroupCode;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\nif (!Array.isArray(items)) {\n    node.warn(\"Items is not an array!\");\n}\n\n\nconst allData = items.map(item => ({\n    \"categoryCode\": item[0],\n    \"definition_lang\": item[1],\n    \"parentCategory\": null,\n    \"netsisDataField\": true\n}));\n\n\nconst result = {\n    \"requestId\": \"\",\n    \"sender\": \"SFORIN\",\n    \"data\": allData\n    \n};\n\nmsg.dataPayload=result;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 270,
        "wires": [
            [
                "dd57b90e298b4119"
            ]
        ]
    },
    {
        "id": "dd57b90e298b4119",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "matchingItemsIndex",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.1\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 260,
        "wires": [
            [
                "8226c7a9619f82f3"
            ]
        ]
    },
    {
        "id": "68472188d30b4e5e",
        "type": "comment",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "Create Netsis To Sforin Product Category",
        "info": "KOD2 LERI MANUEL ACILMA IHTIMALINE KARSI KONTROLLU BIR AKTARIM SAGLANDI",
        "x": 220,
        "y": 220,
        "wires": []
    },
    {
        "id": "4fe26556de5f8fc1",
        "type": "subflow:d296b4008b6072d8",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": " SELECT DISTINCT dbo.TRK(KOD_1) GRUP_KOD,                 dbo.TRK(ISNULL(KOD1.GRUP_ISIM, '')) GRUP_ISIM FROM TBLSTSABIT ST LEFT JOIN TBLSTOKKOD1 KOD1 ON KOD1.GRUP_KOD=ST.KOD_1 WHERE KOD_1 IS NOT NULL",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 280,
        "wires": [
            [
                "2a70d2ce7afd5fb7"
            ],
            []
        ]
    },
    {
        "id": "2a70d2ce7afd5fb7",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\n \nmsg.netsisGroupCode=items;\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "c8c9d4575946d7d9"
            ]
        ]
    },
    {
        "id": "1b10eb3ceb06f325",
        "type": "link out",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesOut4",
        "mode": "link",
        "links": [
            "931f640414d07621"
        ],
        "x": 1745,
        "y": 330,
        "wires": []
    },
    {
        "id": "8226c7a9619f82f3",
        "type": "subflow:e35d14410b661a09",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/SyncProductCategories",
                "type": "str"
            }
        ],
        "x": 1640,
        "y": 260,
        "wires": [
            [
                "1b10eb3ceb06f325"
            ],
            []
        ]
    },
    {
        "id": "89547ef5d2693443",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "88e40feae09cb4d7",
        "name": "function 103",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.1\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 95,
        "y": 280,
        "wires": [
            [
                "4fe26556de5f8fc1"
            ]
        ],
        "l": false
    },
    {
        "id": "bd5863f279d8acbe",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "Compare Category Codes",
        "func": "\n// Extract the arrays from the message payload\nlet netsisGroupCode = msg.netsisGroupCode;\n\n// Map the incoming objects to Sets based on their respective codes\nmsg.listNetsisGroupCode = Array.from(new Set(netsisGroupCode.map(item => [item.GRUP_KOD, item.GRUP_ISIM, item.ALT_GRUP_KOD, item.ALT_GRUP_ISIM])));\n \n\n   \nreturn  msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 500,
        "wires": [
            [
                "d4916d0c55f34b57"
            ]
        ]
    },
    {
        "id": "d4916d0c55f34b57",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "ConvertJson",
        "func": "let items = msg.listNetsisGroupCode;\n// 0=> GRUP_KOD\n// 1=> GRUP_ISIM\n\nconst allData = items.map(item => ({\n    \"categoryCode\": item[2],\n    \"definition_lang\": item[3],\n    \"parentCategory\": item[0],\n    \"netsisDataField\": true\n}));\n\n\nconst result = {\n    \"requestId\": \"\",\n    \"sender\": \"node-red\",\n    \"data\": allData\n    \n};\nmsg.dataPayload=result;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 490,
        "wires": [
            [
                "78a520e94ecac894"
            ]
        ]
    },
    {
        "id": "78a520e94ecac894",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "matchingItemsIndex",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.1\";\n\nreturn msg;;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 490,
        "wires": [
            [
                "e6ef8bb4aeec3bf0"
            ]
        ]
    },
    {
        "id": "ade37fd3d6884a0d",
        "type": "comment",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "Create Netsis To Sforin Product Category",
        "info": "KOD2 LERI MANUEL ACILMA IHTIMALINE KARSI KONTROLLU BIR AKTARIM SAGLANDI",
        "x": 260,
        "y": 440,
        "wires": []
    },
    {
        "id": "4500df576b032b37",
        "type": "subflow:d296b4008b6072d8",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "",
        "env": [
            {
                "name": "query",
                "value": " SELECT DISTINCT dbo.TRK(KOD_1) GRUP_KOD,                 dbo.TRK(ISNULL(KOD1.GRUP_ISIM, '')) GRUP_ISIM,                 dbo.TRK(KOD_2) ALT_GRUP_KOD,                 dbo.TRK(ISNULL(KOD_2.GRUP_ISIM, '')) ALT_GRUP_ISIM FROM TBLSTSABIT ST LEFT JOIN TBLSTOKKOD1 KOD1 ON KOD1.GRUP_KOD=ST.KOD_1 LEFT JOIN TBLSTOKKOD2 KOD_2 ON KOD_2.GRUP_KOD=ST.KOD_2 WHERE KOD_1 IS NOT NULL   AND KOD_2 IS NOT NULL",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 500,
        "wires": [
            [
                "96c8a7c233cc7b29"
            ],
            []
        ]
    },
    {
        "id": "96c8a7c233cc7b29",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "Get Netsis Group Code Result",
        "func": "let items = msg.payload;\nif (!items || !Array.isArray(items)) {\n    node.error(\"Invalid payload data\", msg);\n    return null;\n}\n\n\nmsg.netsisGroupCode=items;\n\n \n \nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "bd5863f279d8acbe"
            ]
        ]
    },
    {
        "id": "931f640414d07621",
        "type": "link in",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "MetropolUnNetsisToSforinFieldIntegrationCompareCategoryCodesIn",
        "links": [
            "1b10eb3ceb06f325"
        ],
        "x": 65,
        "y": 500,
        "wires": [
            [
                "742e24344cd1cbad"
            ]
        ]
    },
    {
        "id": "d3ae7c1a110ecf05",
        "type": "link out",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "GetAllProductCataOut",
        "mode": "link",
        "links": [
            "7897ab6d6c5e4f57"
        ],
        "x": 1765,
        "y": 480,
        "wires": []
    },
    {
        "id": "e6ef8bb4aeec3bf0",
        "type": "subflow:e35d14410b661a09",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/SyncProductCategories",
                "type": "str"
            }
        ],
        "x": 1620,
        "y": 490,
        "wires": [
            [
                "d3ae7c1a110ecf05"
            ],
            []
        ]
    },
    {
        "id": "742e24344cd1cbad",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "f3713ffc90b82f1b",
        "name": "function 104",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 115,
        "y": 500,
        "wires": [
            [
                "4500df576b032b37"
            ]
        ],
        "l": false
    },
    {
        "id": "01cf3ea9ee41d1a8",
        "type": "comment",
        "z": "2edf95049d03fe02",
        "g": "7819cc31128657b2",
        "name": "GET ALL msg.netsisCatagoryType",
        "info": "",
        "x": 200,
        "y": 610,
        "wires": []
    },
    {
        "id": "7897ab6d6c5e4f57",
        "type": "link in",
        "z": "2edf95049d03fe02",
        "g": "7819cc31128657b2",
        "name": "GetAllProductCataIn",
        "links": [
            "d3ae7c1a110ecf05"
        ],
        "x": 125,
        "y": 650,
        "wires": [
            [
                "7a1a8ddb1e6d9651"
            ]
        ]
    },
    {
        "id": "2f17c1d0853dcd5f",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "7819cc31128657b2",
        "name": "function 105",
        "func": "msg.getAllNetsisProductTypes=msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 650,
        "wires": [
            []
        ]
    },
    {
        "id": "9e550fb64304ba19",
        "type": "subflow:e35d14410b661a09",
        "z": "2edf95049d03fe02",
        "g": "7819cc31128657b2",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "wmsmaster/api/WmsMaster/GetAllProductCategory",
                "type": "str"
            }
        ],
        "x": 290,
        "y": 650,
        "wires": [
            [
                "2f17c1d0853dcd5f"
            ],
            [
                "3370eb434dc8c65e"
            ]
        ]
    },
    {
        "id": "7a1a8ddb1e6d9651",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "7819cc31128657b2",
        "name": "function 106",
        "func": "msg.flowName = msg.inregrationFlowData.flowName || \"NTSF000V1.1\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 185,
        "y": 650,
        "wires": [
            [
                "9e550fb64304ba19"
            ]
        ],
        "l": false
    },
    {
        "id": "3370eb434dc8c65e",
        "type": "function",
        "z": "2edf95049d03fe02",
        "g": "7819cc31128657b2",
        "name": "errorMesajRes",
        "func": "\nglobal.set('NTSP000V1_payload_res', msg.errorMesaj||\"Entegrasyon Sonucunda Hata alındı\" )\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 690,
        "wires": [
            []
        ]
    },
    {
        "id": "7a44f711dd435c61",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "function 110",
        "func": "// Global değişkenlerden token bilgilerini al\nlet netsisToken = global.get(\"NetsisToken\");\nlet refreshToken = global.get(\"RefreshToken\");\nlet issuedDate = global.get(\"issuedDate\");\nlet expiresDate = global.get(\"expiresDate\");\n\n// Şu anki zamanın TR saatine göre alınması\nlet now = new Date();\nlet nowTR = new Date(now.getTime() + 3 * 60 * 60 * 1000);\n\n// Token bilgisi kontrolü\nif (netsisToken && refreshToken && issuedDate && expiresDate) {\n   // Şu anki zamanın token geçerlilik aralığında olup olmadığını kontrol et\n   if (nowTR.getTime() >= issuedDate.getTime() && nowTR.getTime() <= expiresDate.getTime()) {\n      // expiresDate ile nowTR arasındaki farkı hesapla (milisaniye olarak)\n      let timeDifference = expiresDate.getTime() - nowTR.getTime();\n\n      // Fark 5 dakikadan az ise\n      if (timeDifference > 0 && timeDifference <= 5 * 60 * 1000) {\n         // Token süresi 5 dakikadan az kaldı\n         return [null, null,msg];\n      }\n      // Token hala geçerli ve süresi 5 dakikadan fazla\n      return [msg, null,null];\n   } else {\n      // Token geçerlilik süresi dolmuş\n      return [null, msg,null];\n   }\n} else {\n   // Token bilgisi yoksa 2. çıkıştan çık\n   return [null, msg,null];\n}\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 130,
        "wires": [
            [
                "ee20b864850c1e82"
            ],
            [
                "bfd6c063ab26fd29"
            ],
            [
                "bfd6c063ab26fd29"
            ]
        ],
        "outputLabels": [
            "Validate Token",
            "Get Token",
            "Refresh_token"
        ]
    },
    {
        "id": "bfd6c063ab26fd29",
        "type": "subflow:317a0e3edab25639",
        "z": "fc936f675a46124b",
        "name": "",
        "x": 590,
        "y": 160,
        "wires": [
            [
                "ee20b864850c1e82"
            ],
            [
                "74ddf016e413da47"
            ]
        ]
    },
    {
        "id": "74ddf016e413da47",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "ReturnNetsisErrorMes",
        "func": "msg.netsisTokenError=msg.logData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 170,
        "wires": [
            [
                "51cd88a319665df6"
            ]
        ]
    },
    {
        "id": "ee20b864850c1e82",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "Get Sforin Category",
        "func": "const baseUrl = env.get(\"NetsisUrl\");\n msg.headers = {\n    Authorization: \"Bearer \" + global.get(\"NetsisToken\")\n};\n\nmsg.url = baseUrl +(env.get(\"RestUrl\")|| msg.restUrl);\nmsg.payload=msg.dataPayload;\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 70,
        "wires": [
            [
                "58768310a49e45ae"
            ]
        ]
    },
    {
        "id": "2930f83f2d8cf707",
        "type": "http request",
        "z": "fc936f675a46124b",
        "name": "RestAPI",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1180,
        "y": 70,
        "wires": [
            [
                "d29433a87086878f"
            ]
        ]
    },
    {
        "id": "dec59997da606257",
        "type": "complete",
        "z": "fc936f675a46124b",
        "name": "",
        "scope": [
            "2930f83f2d8cf707",
            "2e6df8e25c99879f",
            "9521e3f719b1abbf"
        ],
        "uncaught": false,
        "x": 250,
        "y": 310,
        "wires": [
            [
                "c57baf050f082941"
            ]
        ]
    },
    {
        "id": "620f6c1199da5f7f",
        "type": "catch",
        "z": "fc936f675a46124b",
        "name": "",
        "scope": [
            "2930f83f2d8cf707",
            "2e6df8e25c99879f",
            "9521e3f719b1abbf"
        ],
        "uncaught": false,
        "x": 200,
        "y": 480,
        "wires": [
            [
                "edabd08802b7f914"
            ]
        ]
    },
    {
        "id": "c57baf050f082941",
        "type": "switch",
        "z": "fc936f675a46124b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 375,
        "y": 310,
        "wires": [
            [
                "bfd6c063ab26fd29"
            ],
            [
                "1632a53b514c67c0"
            ],
            [],
            [
                "3cae524a04864887"
            ]
        ],
        "l": false
    },
    {
        "id": "edabd08802b7f914",
        "type": "debug",
        "z": "fc936f675a46124b",
        "name": "debug 228",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 470,
        "wires": []
    },
    {
        "id": "1632a53b514c67c0",
        "type": "switch",
        "z": "fc936f675a46124b",
        "name": "",
        "property": "payload.IsSuccessful",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 300,
        "wires": [
            [
                "572bd69e3d03b079",
                "a3dad7ab3fe1bc68"
            ],
            [
                "a56e7094a71790e5",
                "3cae524a04864887"
            ]
        ]
    },
    {
        "id": "572bd69e3d03b079",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||true; //default false\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\n\nlet statusCode = msg.statusCode || 200; // Default to 200 if not provided\n// Handle potential issues with undefined or invalid result.data\nlet responsePayload;\n \nif ( isDubug) {\n    responsePayload = result;\n}\n//node.warn(msg.payload);\n\n\n// input.statusCode kontrol ediyoruz\nlet jobResult_ = (msg.statusCode === 200 || msg.statusCode === 400) ? 0 : 2;\n\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: env.get(\"RestUrl\") || msg.url, // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult: jobResult_, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info ,\n    flowName: msg.flowName || \"NetsisApiV1\",   \n    requestPayload: JSON.stringify(msg.dataPayload || {}), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload) // Serialized response payload\n}];\n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": [
            [
                "8154aeb9ef0351ac"
            ]
        ]
    },
    {
        "id": "a56e7094a71790e5",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "LogJson",
        "func": "const isDubug = msg?.propIntegration?.isDebugMode ||true; //default false\n\n// Access the incoming payload and status code\nlet result = msg.payload || {}; // Ensure payload is an object\nlet statusCode = msg.statusCode || null; // Default to 200 if not provided\nlet responsePayload;\n \nif ( isDubug) {\n    responsePayload = result;\n}\n// Populate the data object dynamically\nconst data = [{\n   \n    dataKey: env.get(\"RestUrl\") || msg.url, // Use payload dataKey if available\n    dataType: result?.dataType || 0, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: msg.errorMesaj?.namestring || \"\", // Fallback message\n    jobResult: 2|| 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: statusCode, // Status code from msg\n    duration: null, // Duration object\n    flowName: msg.flowName || \"NetsisApiV1\",  \n    additionalData:\"\", // Extra info    \n    requestPayload: JSON.stringify(msg.dataPayload || null), // Serialized request payload\n    responsePayload: JSON.stringify(responsePayload || null) // Serialized response payload\n}];\n\n \n\n// Attach the data object to msg for further use\nmsg.logData = data;\n\n// Return the modified msg object\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            [
                "8154aeb9ef0351ac"
            ]
        ]
    },
    {
        "id": "8154aeb9ef0351ac",
        "type": "subflow:7cdf28f23984a61d",
        "z": "fc936f675a46124b",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "{{{flowName}}}",
                "type": "env"
            },
            {
                "name": "sourceSystem",
                "value": "Netsis2SFORIN_FieldIntegration_MMSQL_v1.0",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1170,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "51cd88a319665df6",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "netsisTokenErrorMessage",
        "func": "msg.netsisTokenErrorMessage=\"Token alma işlemi sirasinda hata\"\nmsg.checkRepeatCount = 0;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1045,
        "y": 200,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "3cae524a04864887",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "netsisTokenErrorMessage",
        "func": "\nmsg.checkRepeatCount = 0;\nmsg.netsisTokenErrorMessage += msg.payload.ErrorDesc ||\"An error has occurred. Please check the log file\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 895,
        "y": 260,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "58768310a49e45ae",
        "type": "switch",
        "z": "fc936f675a46124b",
        "name": "",
        "property": "ChooseRequestMethod",
        "propertyType": "env",
        "rules": [
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 975,
        "y": 70,
        "wires": [
            [
                "2930f83f2d8cf707"
            ],
            [
                "2e6df8e25c99879f"
            ],
            [
                "9521e3f719b1abbf"
            ]
        ],
        "l": false
    },
    {
        "id": "2e6df8e25c99879f",
        "type": "http request",
        "z": "fc936f675a46124b",
        "name": "RestAPI",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1180,
        "y": 110,
        "wires": [
            [
                "941e17d89b49f97b"
            ]
        ]
    },
    {
        "id": "d29433a87086878f",
        "type": "debug",
        "z": "fc936f675a46124b",
        "name": "debug 315",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 70,
        "wires": []
    },
    {
        "id": "941e17d89b49f97b",
        "type": "debug",
        "z": "fc936f675a46124b",
        "name": "debug 316",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 120,
        "wires": []
    },
    {
        "id": "a3dad7ab3fe1bc68",
        "type": "function",
        "z": "fc936f675a46124b",
        "name": "function 163",
        "func": "const repeatCount = env.get(\"repeatCount\");\nlet checkRepeatCount = msg.checkRepeatCount || 0;\n\n\n\n\nmsg.checkRepeatCount = checkRepeatCount + 1;\n\n\n\nif(repeatCount >checkRepeatCount)\n{\n    \n    msg.checkRepeatCount =checkRepeatCount+1;\n    \n    return[msg,null]\n}\nelse\n{\n    msg.checkRepeatCount = 0;\n   \n   \n    return [null, msg]\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 135,
        "y": 120,
        "wires": [
            [
                "7a44f711dd435c61"
            ],
            []
        ],
        "icon": "font-awesome/fa-repeat",
        "l": false
    },
    {
        "id": "9521e3f719b1abbf",
        "type": "http request",
        "z": "fc936f675a46124b",
        "name": "RestAPI",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1180,
        "y": 160,
        "wires": [
            [
                "5bf8954bef341f4c"
            ]
        ]
    },
    {
        "id": "5bf8954bef341f4c",
        "type": "debug",
        "z": "fc936f675a46124b",
        "name": "debug 463",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 170,
        "wires": []
    },
    {
        "id": "d1f0be44a0e8f7f8",
        "type": "switch",
        "z": "c823b85caa289042",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 170,
        "wires": [
            [
                "89fc36eae7e36b02"
            ]
        ]
    },
    {
        "id": "48f7569c4b46b9c8",
        "type": "function",
        "z": "c823b85caa289042",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 190,
        "wires": [
            [
                "2a2f176dc584c355"
            ]
        ]
    },
    {
        "id": "2a2f176dc584c355",
        "type": "cronplus",
        "z": "c823b85caa289042",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 730,
        "y": 190,
        "wires": [
            [
                "f9d7c26c6024dab8"
            ]
        ]
    },
    {
        "id": "03096c4dc4f957d4",
        "type": "switch",
        "z": "c823b85caa289042",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 975,
        "y": 150,
        "wires": [
            [
                "871fbb069a1d6d1c"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "871fbb069a1d6d1c",
        "type": "subflow:bb656f77f61addff",
        "z": "c823b85caa289042",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1160,
        "y": 170,
        "wires": [
            [
                "a7b09031e600d0d3"
            ]
        ]
    },
    {
        "id": "a7b09031e600d0d3",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c823b85caa289042",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1230,
        "y": 230,
        "wires": [
            [
                "3759357c5e2ce90d"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "447437eca4fd7982",
        "type": "subflow:bb656f77f61addff",
        "z": "c823b85caa289042",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 370,
        "wires": [
            [
                "b30ad249dc203f0c"
            ]
        ]
    },
    {
        "id": "b30ad249dc203f0c",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "c823b85caa289042",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1270,
        "y": 430,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "89fc36eae7e36b02",
        "type": "switch",
        "z": "c823b85caa289042",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "48f7569c4b46b9c8"
            ],
            [
                "3fbcf15129c6cfe4"
            ]
        ]
    },
    {
        "id": "3fbcf15129c6cfe4",
        "type": "function",
        "z": "c823b85caa289042",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 250,
        "wires": [
            [
                "f9d7c26c6024dab8"
            ]
        ]
    },
    {
        "id": "f9d7c26c6024dab8",
        "type": "function",
        "z": "c823b85caa289042",
        "name": "function 111",
        "func": "let propIntegration = msg.payload;\n\n\n\nlet listAllIntegrationParameters = global.get('allIntegrationParameters');\n\n\nmsg.propIntegration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 895,
        "y": 190,
        "wires": [
            [
                "03096c4dc4f957d4"
            ]
        ],
        "l": false
    },
    {
        "id": "3759357c5e2ce90d",
        "type": "subflow:8a27645487b5e36b",
        "z": "c823b85caa289042",
        "name": "",
        "x": 1230,
        "y": 300,
        "wires": [
            [
                "447437eca4fd7982"
            ],
            [
                "447437eca4fd7982"
            ]
        ]
    },
    {
        "id": "a9e9f250b4d6f830",
        "type": "function",
        "z": "8a27645487b5e36b",
        "name": "function 112",
        "func": "const utcNow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));\n// Get All Production\nlet data = msg.payload;\n\n// Varsayılan JSON yapısı\nconst documentData = {\n    Header: {\n        PrdDocNo: null,\n        StateObject: \"WAI\",\n        DocState: \"WAI\",\n        ProductionType: \"PR\",\n        Machine: null,\n        Shift: null,\n        ProductCode: null,\n        Version: null,\n        TargetOperationQty: null,\n        OperationUnit: null,\n        TargetMaterialQty: null,\n        MaterialQty: \"0\",\n        MaterialUnit: null,\n        TolerancePlusValue: \"0\",\n        ToleranceMinusValue: \"0\",\n        PartnerSales: null,\n        PartnerShipment: null,\n        PartnerInventory: null,\n        PostingOperationDocNo: null,\n        PostingDate: utcNow,\n        NewDate: utcNow,\n        UpdDate: null,\n        DocDate: utcNow,\n        ProductionDate: utcNow,\n        ValidityBeginDate: null,\n        ValidityEndDate: null,\n        DatePg01: utcNow,\n        DatePg02: utcNow,\n        NewUser: null,\n        UpdUser: null,\n        Batch: null,\n        SerialId: 0,\n        RefProductCode: null,\n        RefVersion: null,\n        RefPrdDocNo: null,\n        RefDlvDocNo: null,\n        InventoryDocNo: null,\n        Text: {\n            Text01: null,\n            Text02: null,\n            Text03: null,\n            Text04: null,\n            Text05: null,\n            Text06: null,\n            Text07: null,\n            Text08: null,\n            Text09: null\n        }\n    },\n    Items: \n        {\n            PrdDocNo: null,\n            PrdItemNo: null,\n            StateObject: null,\n            DocState: null,\n            ComponentId: null,\n            Machine: null,\n            MachineGroup: null,\n            TargetOperationQty: null,\n            OperationUnit: null,\n            TargetMaterialQty: null,\n            MaterialQty: null,\n            MaterialUnit: null,\n            TolerancePlusValue: null,\n            ToleranceMinusValue: null,\n            SubstitutionProductCode: null,\n            AlternativeProductCode: null,\n            PDisassemblyWaste: null,\n            NewUser: null,\n            UpdUser: null\n        }\n    ,\n    TaskItems: \n        {\n            PrdDocNo: null,\n            Task: null,\n            ComponentId: null,\n            TaskItemNo: null,\n            MaterialQuantity: null,\n            MaterialUnit: null,\n            PAutoConsumption: null,\n            Location: null\n        },\n    attributes: \n            {\n                attributeCode: null,\n                strValue: null,\n                dateValue: utcNow,\n                numValue: 0,\n                listedValue: null,\n                boolValue: true,\n                remoteName: null\n            }\n        \n    \n};\n\n// Helper function for null or undefined check\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Üretim verilerini dönüştür\nconst productionDataPayload = data.map(prod => ({\n    Header: {\n        PrdDocNo: getValueOrDefault(prod.ISEMRINO, documentData.Header.PrdDocNo),\n        StateObject: getValueOrDefault(null, documentData.Header.StateObject),\n        DocState: getValueOrDefault(null, documentData.Header.DocState),\n        ProductionType: getValueOrDefault(null, documentData.Header.ProductionType),\n        Machine: getValueOrDefault(null, documentData.Header.Machine),\n        Shift: getValueOrDefault(null, documentData.Header.Shift),\n        ProductCode: getValueOrDefault(prod.STOK_KODU, documentData.Header.ProductCode),\n        Version: getValueOrDefault(null, documentData.Header.Version),\n        TargetOperationQty: getValueOrDefault(prod.MIKTAR, documentData.Header.TargetOperationQty),\n        OperationUnit: getValueOrDefault(prod.OLCU_BR1, documentData.Header.OperationUnit),\n        TargetMaterialQty: getValueOrDefault(null, documentData.Header.TargetMaterialQty),\n        MaterialQty: getValueOrDefault(null, documentData.Header.MaterialQty),\n        MaterialUnit: getValueOrDefault(null, documentData.Header.MaterialUnit),\n        TolerancePlusValue: getValueOrDefault(null, documentData.Header.TolerancePlusValue),\n        ToleranceMinusValue: getValueOrDefault(null, documentData.Header.ToleranceMinusValue),\n        PostingDate: getValueOrDefault(null, documentData.Header.PostingDate), \n        NewDate: getValueOrDefault(prod.TARIH, documentData.Header.NewDate), \n        UpdDate: getValueOrDefault(null, documentData.Header.UpdDate), \n        DocDate: getValueOrDefault(prod.TARIH, documentData.Header.DocDate), \n        ProductionDate: getValueOrDefault(prod.TARIH, documentData.Header.ProductionDate), \n        ValidityBeginDate: getValueOrDefault(null, documentData.Header.ValidityBeginDate), \n        ValidityEndDate: getValueOrDefault(null, documentData.Header.ValidityEndDate),\n    },\n    Items: []\n       // {\n    //     PrdDocNo: getValueOrDefault(null, documentData.Items.PrdDocNo),\n    //     PrdItemNo: getValueOrDefault(null, documentData.Items.PrdItemNo),\n    //     StateObject: getValueOrDefault(null, documentData.Items.StateObject),\n    //     DocState: getValueOrDefault(null, documentData.Items.DocState),\n    //     ComponentId: getValueOrDefault(null, documentData.Items.ComponentId),\n    //     Machine: getValueOrDefault(null, documentData.Items.Machine),\n    //     MachineGroup: getValueOrDefault(null, documentData.Items.Machine),\n    //     TargetOperationQty: getValueOrDefault(null, documentData.Items.Machine),\n    //     OperationUnit: getValueOrDefault(null, documentData.Items.Machine),\n    //     TargetMaterialQty: getValueOrDefault(null, documentData.Items.Machine),\n    //     MaterialQty: getValueOrDefault(null, documentData.Items.MaterialQty),\n    //     MaterialUnit: getValueOrDefault(null, documentData.Items.MaterialUnit),\n    //     TolerancePlusValue: getValueOrDefault(null, documentData.Items.TolerancePlusValue ),\n    //     ToleranceMinusValue: getValueOrDefault(null, documentData.Items.ToleranceMinusValue),\n    //     SubstitutionProductCode: getValueOrDefault(null, documentData.Items.SubstitutionProductCode),\n    //     AlternativeProductCode: getValueOrDefault(null, documentData.Items.AlternativeProductCode),\n    //     PDisassemblyWaste: getValueOrDefault(null, documentData.Items.PDisassemblyWaste),\n    //     NewUser: getValueOrDefault(null, documentData.Items.NewUser),\n    //     UpdUser: getValueOrDefault(null, documentData.Items.UpdUser),\n    //\n    //}]\n    ,\n       TaskItems: [] ,\n    //     PrdDocNo: getValueOrDefault(null, documentData.TaskItems.PrdDocNo),\n    //     Task: getValueOrDefault(null, documentData.TaskItems.Task),\n    //     ComponentId: getValueOrDefault(null, documentData.TaskItems.ComponentId),\n    //     TaskItemNo: getValueOrDefault(null, documentData.TaskItems.TaskItemNo),\n    //     MaterialQuantity: getValueOrDefault(null, documentData.TaskItems.MaterialQuantity),\n    //     MaterialUnit: getValueOrDefault(null, documentData.TaskItems.MaterialUnit),\n    //     PAutoConsumption: getValueOrDefault(null, documentData.TaskItems.PAutoConsumption),\n    //     Location: getValueOrDefault(null, documentData.TaskItems.Location),\n    // } ,\n     attributes:[\n         {\n             AttributeCode: getValueOrDefault(\"ETIKET\", documentData.attributes.attributeCode) ,\n             StrValue: getValueOrDefault(prod.ReportItem, documentData.attributes.strValue) ,\n             DateValue: null,\n             NumValue: null,\n             ListedValue: null,\n             BoolValue: null,\n             RemoteName: getValueOrDefault(\"ETIKET DIZAYN\", documentData.attributes.remoteName) \n         },\n         {\n             AttributeCode: getValueOrDefault(\"PINARIHRSERINUM\", documentData.attributes.attributeCode),\n             StrValue: getValueOrDefault(prod.PNRSERINUM, documentData.attributes.strValue),\n             DateValue: null,\n             NumValue: null,\n             ListedValue: null,\n             BoolValue: null,\n             RemoteName: getValueOrDefault(\"PINAR IHRACAT SERI NUMARASI\", documentData.attributes.remoteName)\n         },\n         {\n             AttributeCode: getValueOrDefault(\"VARDIYA\", documentData.attributes.attributeCode),\n             StrValue: getValueOrDefault(prod.VARDIYA, documentData.attributes.strValue),\n             DateValue: null,\n             NumValue: null,\n             ListedValue: null,\n             BoolValue: null,\n             RemoteName: getValueOrDefault(\"PINAR IHRACAT SERI NUMARASI\", documentData.attributes.remoteName)\n         }\n     ]\n}));\n\n\n\nconst result = {\n    requestId: \"\",\n    sender: \"node-red\",\n    data: productionDataPayload\n    \n};\nmsg.productionDataPayload=result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 160,
        "wires": [
            [
                "20827dae192116ca",
                "11b07a72df54e74f"
            ]
        ]
    },
    {
        "id": "08ee9b2e410b9128",
        "type": "subflow:d296b4008b6072d8",
        "z": "8a27645487b5e36b",
        "name": "",
        "x": 710,
        "y": 150,
        "wires": [
            [
                "a9e9f250b4d6f830"
            ],
            []
        ]
    },
    {
        "id": "5fb7317ccb04afb0",
        "type": "function",
        "z": "8a27645487b5e36b",
        "name": "GET PRODUCTIONDOC",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSPD000V1.0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \nISEMRINO,\nTARIH,\ndbo.trk(A.STOK_KODU) STOK_KODU,\nA.MIKTAR,\ndbo.TRK(ACIKLAMA)ACIKLAMA,\nTESLIM_TARIHI,\nA.DEPO_KODU,\nCIKIS_DEPO_KODU,\nSIPARIS_NO,\nSUBEKODU,\nB.KT_REPORT_ITEMS AS ReportItem,\nST.OLCU_BR1,\nB.KT_PINARIHRSIPNUM AS PNRSERINUM,\nB.KT_VARDIYA AS VARDIYA\n\n\nFROM  TBLISEMRI A\nJOIN TBLSTSABIT ST ON A.STOK_KODU=ST.STOK_KODU\nLEFT JOIN TBLISEMRIEK B ON A.ISEMRINO=B.ISEMRI WHERE \n   1=1   AND A.USK_STATUS !='T'\n`;\n\n \n\n\n// url'den gelen verilerde kısıt var ise sorguya ekleniyor\nlet paramsProductionDocNum = global.get('NTSPD000V1reqProductionDocNum')\n  \nif (paramsProductionDocNum !== undefined && paramsProductionDocNum !== null && paramsProductionDocNum !== '') {\n   \n  query += `AND ISEMRINO= '${paramsProductionDocNum}'`\n}\n\n// msg.payload'a sorguyu ekle\n\nmsg.query = query;\nif (global.get('NTSPD000V1reqProductionDocNum')) {\n  global.set('NTSPD000V1reqProductionDocNum', null)\n}\n\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 160,
        "wires": [
            [
                "08ee9b2e410b9128"
            ]
        ]
    },
    {
        "id": "91d4d062b703a331",
        "type": "subflow:e35d14410b661a09",
        "z": "8a27645487b5e36b",
        "name": "ProductionDocSync",
        "env": [
            {
                "name": "Url",
                "value": "production/api/v1/Production/ProductionDoc/ProductionDocSync",
                "type": "str"
            }
        ],
        "x": 1470,
        "y": 70,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "20827dae192116ca",
        "type": "function",
        "z": "8a27645487b5e36b",
        "name": "Check",
        "func": "\n\n// Assign msg.dataPayload to msg.sforinPartner\nmsg.dataPayload = msg.productionDataPayload;\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSPD000V1.0\";\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.dataPayload) && msg.dataPayload.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    \n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 150,
        "wires": [
            [
                "91d4d062b703a331"
            ],
            []
        ]
    },
    {
        "id": "11b07a72df54e74f",
        "type": "debug",
        "z": "8a27645487b5e36b",
        "name": "debug 335",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "productionDataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 250,
        "wires": []
    },
    {
        "id": "function-dynamic-mapping",
        "type": "function",
        "z": "subflow-dynamic-mapping",
        "name": "Dynamic Mapping Logic",
        "func": "let payload = msg.payload[0] || msg.payload ||  {};\n\nlet rootMapping = env.get(\"RootMapping\") || {};\nlet headerMapping = env.get(\"HeaderMapping\") || [];\nlet itemMapping = env.get(\"ItemMapping\") || [];\nlet defaultHeader = env.get(\"DefaultHeader\") || [];\nlet defaultItems = env.get(\"DefaultItems\") || [];\n// Çıkış yapısını başlat\nlet output = {};\n\n \nlet headerTarget = rootMapping.HeaderTarget || defaultHeader;  // Default hedef adı\noutput[headerTarget] = {};\nheaderMapping.forEach(rule => {\n    let sourceValue = payload.header?.[rule.source] || \"\";  // Kaynak değeri al\n    output[headerTarget][rule.target] = sourceValue;       // Hedef alana yaz\n});\n\n \nlet itemsTarget = rootMapping.ItemsTarget || defaultItems;  // Default hedef adı\noutput[itemsTarget] = [];\nlet items = payload.Items || [];\n \noutput[itemsTarget] = items.map(item => {\n    let mappedItem = {};\n    itemMapping.forEach(rule => {\n        let sourceValue = item?.[rule.source] || \"\";       // Kaynak değeri al\n        mappedItem[rule.target] = sourceValue;            // Hedef alana yaz\n    });\n    return mappedItem;\n});\n\nmsg.netsisDataPayload = output;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "e0921e81eae9d87e",
        "type": "subflow:fc936f675a46124b",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1170,
        "y": 510,
        "wires": [
            [
                "54a380c993027735"
            ],
            [
                "4ea56a7a8dbf06b7"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "17dd36a28748d550",
        "type": "json",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 300,
        "y": 180,
        "wires": [
            [
                "bca32c9a073479ad"
            ]
        ]
    },
    {
        "id": "c019cf85a425d802",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n   // { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n    { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n  //  { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = { success: false, errors: errors };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 510,
        "wires": [
            [
                "73d422ceef763272"
            ],
            [
                "cffd02da26061153"
            ]
        ]
    },
    {
        "id": "e009ad2aec34e52c",
        "type": "http response",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1720,
        "y": 120,
        "wires": []
    },
    {
        "id": "54a380c993027735",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "Response Message",
        "func": "msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.customerCode\nconst returnMessage={\n    customerCode: msg?.customerCode,\n    receivingNumber: msg.receivingNumber\n    \n};\nmsg.payload = {\n    status: \"Info\",\n    message: JSON.stringify(returnMessage) ||\"Transfer successfully completed\",\n    programName: \"STNSREC0001.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nmsg.res = global.get('STNSWAY000V1_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 470,
        "wires": [
            [
                "204e4c7a5d7cfd6a"
            ]
        ]
    },
    {
        "id": "4ea56a7a8dbf06b7",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "Response Message",
        "func": " \nmsg.payload = {\n    status: \"Error\",\n    message: msg.netsisTokenErrorMessage ||\"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\",\n    programName: \"STNSREC0001.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nmsg.res = global.get('STNSWAY000V1_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 510,
        "wires": [
            [
                "bc4ee7273c6618a5"
            ]
        ]
    },
    {
        "id": "204e4c7a5d7cfd6a",
        "type": "http response",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1750,
        "y": 410,
        "wires": []
    },
    {
        "id": "bc4ee7273c6618a5",
        "type": "http response",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1750,
        "y": 510,
        "wires": []
    },
    {
        "id": "b3dc7d48ef8f59be",
        "type": "comment",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "S2N SALES WAYBILL",
        "info": "SATIŞ IRSALIYESI",
        "x": 320,
        "y": 140,
        "wires": []
    },
    {
        "id": "73d422ceef763272",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "function 134",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \n\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\n\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        FATIRS_NO: null,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 2,\n        KOD1: null,\n        KOD2: null,\n        TIPI: 2,\n        Aciklama: \"Node-Red\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: null,\n        KDV_DAHILMI: true,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        EfaturaCarisiMi: true,\n        EIrsaliye: true,\n        FIYATTARIHI:null,\n        ODEMETARIHI:null,\n        KOSULTARIHI:null,\n        FAT_ALTM1:null,\n        FAT_ALTM2:null,\n        ODEMEGUNU:null,\n        GEN_ISK1T:null,\n        GEN_ISK2T:null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null\n\n\n\n\n\n\n\n\n    },\n    EIrsEkBilgi: {\n        PLAKA: null,\n        TASIYICIVKN: null,\n        TASIYICIADI: null,\n        TASIYICIILCE: null,\n        TASIYICIIL: null,\n        TASIYICIULKE: null,\n        TASIYICIPOSTAKODU: null,\n        SOFOR1ADI: null,\n        SOFOR1SOYADI: null,\n        SOFOR1ACIKLAMA: null,\n        SOFOR1TCKN: null,\n        SOFOR2ADI: null,\n        SOFOR2SOYADI: null,\n        SOFOR2ACIKLAMA: null,\n        SOFOR2TCKN: null,\n        SOFOR3ADI: null,\n        SOFOR3SOYADI: null,\n        SOFOR3ACIKLAMA: null,\n        SOFOR3TCKN: null,\n        SEVKTAR: null,\n        DORSEPLAKA1: null,\n        DORSEPLAKA2: null,\n        DORSEPLAKA3: null,\n        MATBUKULLANILSIN: false,\n    },\n   \n    Kalems: [\n        {\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            DOVIZ_TURU:null,\n            DOVTIP:null,\n            STra_DOVTIP:0,\n            STra_HTUR: \"H\",\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: null,\n            STra_CARI_KOD: null,\n            STra_GC: \"C\",\n            DEPO_KODU: 0,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n            STra_SIPKONT:null,\n            Stra_IrsKont:null,\n            Firmadovtut:0,\n            STra_SatIsk:null,\n            STra_SatIsk2:null,\n            STra_SatIsk3:null,\n            STra_SatIsk4:null,\n            STra_SatIsk5:null,\n            STra_SatIsk6:null,\n            STra_ODEGUN:null,\n            SatirBaziAciks:null,\n            S_Yedek2:'NODE-RED'\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n     // gelen post isteğin itemlerin sayısı\n    KalemAdedi:msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 2,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// EIrsEkBilgi alanlarını doldur\nconst eIrsEkBilgiData = incomingData.EIrsEkBilgi || {}; // Gelen EIrsEkBilgi yoksa boş nesne kullan\nfor (const key in defaultValue.EIrsEkBilgi) {\n    result.EIrsEkBilgi[key] = getValueOrDefault(\n        eIrsEkBilgiData[key],\n        defaultValue.EIrsEkBilgi[key]\n    );\n}\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\n \nmsg.dataPayload = result;\nmsg.dataPayload.FatUst.FATIRS_NO=null;\nmsg.flowName=\"S2N_RECEVING_URL\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 540,
        "wires": [
            [
                "e0921e81eae9d87e"
            ]
        ]
    },
    {
        "id": "bca32c9a073479ad",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"Date\",\"target\":\"Tarih\"},{\"source\":\"User\",\"target\":\"Kullanici\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"Unit\",\"target\":\"Olcubr\"},{\"source\":\"OrderLineNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"},{\"source\":\"TargetWarehouseCode\",\"target\":\"Gir_Depo_Kodu\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 270,
        "wires": [
            [
                "f235bf4213131a7c"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "9944ab08c6ca5fc1",
        "type": "subflow:d296b4008b6072d8",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "MssqlFatUst",
        "x": 860,
        "y": 240,
        "wires": [
            [
                "47adbb736dc97325"
            ],
            [
                "75778646aef5f360"
            ]
        ]
    },
    {
        "id": "b477db32229842ee",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "Get FatUst",
        "func": " \nmsg.flowName =  \"S2NSWAY000V1_0\";\nlet invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \n\nA.CARI_KODU,\nA.KOD1,\nA.KOD2,\nCS.PLASIYER_KODU,\nFEK.ACIK1,\nFEK.ACIK2,\nFEK.ACIK3,\nFEK.acik4,\nFEK.acik5,\nFEK.acik6,\nFEK.acik7,\nFEK.acik8,\nFEK.acik9,\nFEK.acik10,\nFEK.acik11,\nFEK.acik12,\nFEK.acik13,\nFEK.acik14,\nFEK.acik15,\nFEK.acik16,\nA.PROJE_KODU,\nA.GEN_ISK1T,\nA.GEN_ISK2T,\nA.GEN_ISK3T,\nA.GEN_ISK1O,\nA.GEN_ISK2O,\nA.GEN_ISK3O,\nDOVIZ_TIPI,\nKDV,\nFAT_ALTM2,\nFAT_ALTM1,\nODEMEGUNU\nFROM TBLSIPAMAS A  \nJOIN TBLCASABIT CS ON A.CARI_KODU=CS.CARI_KOD\nJOIN TBLFATUEK FEK ON FEK.FATIRSNO=A.FATIRS_NO AND FEK.CKOD=A.CARI_KODU AND FEK.FKOD=6\nWHERE FATIRS_NO='${invoiceNumber}' AND  FTIRSIP=6\n`;\n\n \n\n \nmsg.query=query;\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 170,
        "wires": [
            [
                "9944ab08c6ca5fc1"
            ]
        ]
    },
    {
        "id": "47adbb736dc97325",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "SetFatUst",
        "func": "const date = msg.netsisDataPayload?.FatUst?.Tarih;\n\n\nlet data = msg.payload[0];\n\n// Gelen data'nın array olup olmadığını kontrol et\nif (!data ) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Data is either empty or not an array\",\n            query: msg.query\n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\n\nmsg.netsisDataPayload.FatUst.CariKod = data.CARI_KODU;\nmsg.netsisDataPayload.FatUst.ENTEGRE_TRH = date;\nmsg.netsisDataPayload.FatUst.FiiliTarih = date;\nmsg.netsisDataPayload.FatUst.SIPARIS_TEST = date;\nmsg.netsisDataPayload.FatUst.Tarih = date;\nmsg.netsisDataPayload.FatUst.FIYATTARIHI = date;\nmsg.netsisDataPayload.FatUst.ODEMETARIHI = date;\nmsg.netsisDataPayload.FatUst.KOSULTARIHI = date;\nmsg.netsisDataPayload.FatUst.KOD1 = data.KOD1;\nmsg.netsisDataPayload.FatUst.KOD2 = data.KOD2;\nmsg.netsisDataPayload.FatUst.KDV = data.KDV;\nmsg.netsisDataPayload.FatUst.FAT_ALTM1 = data.FAT_ALTM1;\nmsg.netsisDataPayload.FatUst.FAT_ALTM2 = data.FAT_ALTM2;\nmsg.netsisDataPayload.FatUst.ODEMEGUNU = data.ODEMEGUNU;\nmsg.netsisDataPayload.FatUst.EKACK1 = data.ACIK1;\nmsg.netsisDataPayload.FatUst.EKACK2 = data.ACIK2;\nmsg.netsisDataPayload.FatUst.EKACK3 = data.ACIK3;\nmsg.netsisDataPayload.FatUst.EKACK4 = data.acik4;\nmsg.netsisDataPayload.FatUst.EKACK5 = data.acik5;\nmsg.netsisDataPayload.FatUst.EKACK6 = data.acik6;\nmsg.netsisDataPayload.FatUst.EKACK7 = data.acik7;\nmsg.netsisDataPayload.FatUst.EKACK8 = data.acik8;\nmsg.netsisDataPayload.FatUst.EKACK9 = data.acik9;\nmsg.netsisDataPayload.FatUst.EKACK10 = data.acik10;\nmsg.netsisDataPayload.FatUst.EKACK11 = data.acik11;\nmsg.netsisDataPayload.FatUst.EKACK12 = data.acik12;\nmsg.netsisDataPayload.FatUst.EKACK13 = data.acik13;\nmsg.netsisDataPayload.FatUst.EKACK14 = data.acik14;\nmsg.netsisDataPayload.FatUst.EKACK15 = data.acik15;\nmsg.netsisDataPayload.FatUst.EKACK16 = data.acik16;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLASIYER_KODU;\nmsg.netsisDataPayload.FatUst.Proje_Kodu = data.PROJE_KODU;\nmsg.netsisDataPayload.FatUst.GEN_ISK1T = data.GEN_ISK1T;\nmsg.netsisDataPayload.FatUst.GEN_ISK2T = data.GEN_ISK2T;\nmsg.netsisDataPayload.FatUst.GEN_ISK3T = data.GEN_ISK3T;\nmsg.netsisDataPayload.FatUst.GEN_ISK1O = data.GEN_ISK1o;\nmsg.netsisDataPayload.FatUst.GEN_ISK2O = data.GEN_ISK2o;\nmsg.netsisDataPayload.FatUst.GEN_ISK3O = data.GEN_ISK3o;\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 300,
        "wires": [
            [
                "d5b550e7fece540d"
            ],
            [
                "cffd02da26061153"
            ]
        ]
    },
    {
        "id": "d5b550e7fece540d",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "GetFatKalem",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT STOK_KODU,\n\t   EKALAN,\n       EKALAN1,\n        EKALAN_NEDEN,\n       MUH_KODU,\n       STHAR_DOVTIP,\n       STHAR_DOVFIAT,\n       STHAR_NF,\n       STHAR_BF,\n       STHAR_KDV,\n       CASE\n           WHEN STHAR_DOVFIAT=0 THEN 0\n           ELSE STHAR_BF/STHAR_DOVFIAT\n       END AS kur,\n       STHAR_KOD1,\n       STHAR_SATISK*100000 AS STHAR_SATISK,\n       STHAR_MALFISK,\n       STHAR_SATISK2,\n       STRA_SATISK3,\n       STRA_SATISK4,\n       STRA_SATISK5,\n       STRA_SATISK6,\n       PROJE_KODU,\n\t   SIRA,\n\t   OLCUBR,\n\t   FISNO ,\n\t   STRA_SIPKONT,\n\t   ACIKLAMA1,\n\t   ACIKLAMA2,\n\t   ACIKLAMA3,\n\t   ACIKLAMA4,\n\t   ACIKLAMA5,\n\t   ACIKLAMA6,\n\t   ACIKLAMA7,\n\t   ACIKLAMA8,\n\t   ACIKLAMA9,\n\t   ACIKLAMA10,\n     PLASIYER_KODU,\n      A.STHAR_TESTAR,\n     A.STHAR_CARIKOD,\n     A.DEPO_KODU\n\t   \nFROM TBLSIPATRA A\nLEFT JOIN  TBLSSATIRAC SAC ON SAC.INCKEYNO= A.INCKEYNO\nWHERE STHAR_FTIRSIP=6 \n  AND FISNO='${msg.netsisDataPayload.FatUst.FATIRS_NO}' \n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 180,
        "wires": [
            [
                "c5f4bb91d823838c"
            ]
        ]
    },
    {
        "id": "c5f4bb91d823838c",
        "type": "subflow:d296b4008b6072d8",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "MssqlFatKalem",
        "x": 1100,
        "y": 230,
        "wires": [
            [
                "7230b70e1a88d898"
            ],
            [
                "bf4f82484a5f3bce"
            ]
        ]
    },
    {
        "id": "7230b70e1a88d898",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "SetFatKalem",
        "func": "let data = msg.payload;\nlet netsisDataItemList = msg.netsisDataPayload?.Kalems;\nlet netsisDataInvoice = msg.netsisDataPayload?.FatUst;\n\nlet errorDec=[];\n// Veri kontrolü\nif (Array.isArray(data) && data.length > 0 && Array.isArray(netsisDataItemList)) {\n    //bize gelen post isteğinden alıacak veri netsisDataItemList alınacak \n    netsisDataItemList.forEach(netsisDataItem => {\n        //gelen veri kısıtı ile alıacak  netsis sipariş datası netsisData\n        let netsisData = data.find(x => \n            x?.STOK_KODU == netsisDataItem?.StokKodu && \n            x?.SIRA == netsisDataItem?.Sira\n        );\n       \n        if (netsisData)\n         {\n           \n          \n            let itemData = {\n                StokKodu: netsisData.STOK_KODU,\n                Sira: netsisData.SIRA,\n                STra_GCMIK: netsisDataItem.STra_GCMIK,\n                STra_TAR: netsisDataInvoice.Tarih,\n                ...(netsisData.kur >0 ? {\n                    STra_NF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    STra_BF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    DOVIZ_TURU: netsisData.STHAR_DOVTIP,\n                    DOVTIP: netsisData.STHAR_DOVTIP,\n                    STra_DOVTIP: netsisData.STHAR_DOVTIP\n                    \n\n                }:{\n                    STra_NF: netsisData.STHAR_NF,\n                    STra_BF: netsisData.STHAR_BF\n                }),\n               \n                STra_SIPNUM: netsisData.FISNO,\n                ProjeKodu: netsisData.PROJE_KODU,\n                STra_SIPKONT:netsisData.STRA_SIPKONT,\n                Stra_IrsKont: netsisData.STRA_SIPKONT,\n                STra_HTUR: \"H\",\n                DEPO_KODU: netsisData.DEPO_KODU,\n                Firmadovtut: netsisDataItem.STra_GCMIK,\n                STra_SatIsk: netsisData.STHAR_SATISK,\n                STra_SatIsk2: netsisData.STHAR_SATISK2,\n                STra_SatIsk3: netsisData.STRA_SATISK3,\n                STra_SatIsk4: netsisData.STRA_SATISK4,\n                STra_SatIsk5: netsisData.STRA_SATISK5,\n                STra_SatIsk6: netsisData.STRA_SATISK6,\n                STra_ODEGUN: netsisDataInvoice.ODEMEGUNU,\n                //SatirBaziAciks: Array.from({ length: 10 }, (_, i) => netsisData[`ACIKLAMA1${i+1}`]) ,\n                Plasiyer_Kodu: netsisData.PLASIYER_KODU,\n                Ekalanneden: netsisData.EKALAN_NEDEN,\n                Ekalan: netsisData.EKALAN,\n                Ekalan1: netsisData.EKALAN1,\n                STra_testar: netsisData.STHAR_TESTAR,\n                Olcubr: 1,\n                STra_CARI_KOD: netsisData.STHAR_CARIKOD,\n                STra_GC: \"C\",\n                Stra_FiiliTar: netsisDataInvoice.Tarih,\n                D_YEDEK10: netsisDataInvoice.Tarih\n\n            }\n           \n            //Check if the item already exists in kalems\n            let existingItemIndex = msg.netsisDataPayload.Kalems.findIndex(\n                item => item.StokKodu == netsisData.STOK_KODU && item.Sira == netsisData.SIRA\n            );\n           \n            if (existingItemIndex !== -1) {\n                // Null kontrolü ekle\n                if (msg.netsisDataPayload.Kalems[existingItemIndex]) {\n                    msg.netsisDataPayload.Kalems[existingItemIndex] = {\n                        ...msg.netsisDataPayload.Kalems[existingItemIndex],\n                        ...itemData\n                    };\n                }\n            }\n\n         }\n         else {\n            errorDec.push(`No record was found in Netsis for this order (${netsisDataInvoice.FATIRS_NO}).Stock Code: ${netsisDataItem?.StokKodu }`)\n            \n         }\n          \n\n          \n    });\n    if (errorDec.length > 0){\n        msg.payload = {\n            success: false,\n             errors: {\n                message: errorDec\n\n            }\n        };\n        msg.statusCode = 400;\n\n        return [null, msg]; // Hata durumu\n    }\n    msg.payload = msg.netsisDataPayload;\n    return [msg,null ]\n}  \n   \n  else {\n    // Hata mesajını düzenle\n    msg.payload = { success: false, errors: {\n        message: \"Data is either empty or not an array\" \n      \n    }};\n    msg.statusCode = 400;\n\n    return [null, msg]; // Hata durumu\n}\n\n\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 290,
        "wires": [
            [
                "c019cf85a425d802"
            ],
            [
                "cffd02da26061153"
            ]
        ]
    },
    {
        "id": "75778646aef5f360",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    success: false, errors: {\n        message: \"Error\",\n        query: msg.query\n    }\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 370,
        "wires": [
            [
                "cffd02da26061153"
            ]
        ]
    },
    {
        "id": "bf4f82484a5f3bce",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    success: false, errors: {\n        message: \"Error\",\n        query: msg.query\n    }\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 330,
        "wires": [
            [
                "cffd02da26061153"
            ]
        ]
    },
    {
        "id": "f235bf4213131a7c",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "ParamsCheck",
        "func": "let invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\n\nif (!invoiceNumber) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid OrderNo\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 250,
        "wires": [
            [
                "b477db32229842ee"
            ],
            [
                "cffd02da26061153"
            ]
        ]
    },
    {
        "id": "cffd02da26061153",
        "type": "function",
        "z": "ccc4f9f8e6f67860",
        "g": "eaea8916b86f0291",
        "name": "Res",
        "func": "msg.res = global.get('STNSWAY000V1_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 140,
        "wires": [
            [
                "e009ad2aec34e52c"
            ]
        ]
    },
    {
        "id": "0858b95ba622a39f",
        "type": "subflow:fc936f675a46124b",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1670,
        "y": 200,
        "wires": [
            [
                "c9ae78118c25c668",
                "b9761f83fc9e8ce6"
            ],
            [
                "6a9947be10b41dfa",
                "5738e6743dd0dc6d"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "4bc00aa89bca27d9",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n  //  { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n    { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n  //  { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = { success: false, errors: errors };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 220,
        "wires": [
            [
                "2b1d22185f323dd2"
            ],
            [
                "3dce7a533d1cf6d0"
            ]
        ]
    },
    {
        "id": "2b1d22185f323dd2",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "function 121",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \nnode.warn(utcNow);\nnode.warn(\"my warning\");\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\n\n\n\nconst defaultValue = {\n    FatUst: {\n        \n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        FATIRS_NO: null,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 3,\n        KOD1: null,\n        KOD2: null,\n        TIPI:2,\n        Aciklama: \"SFORIN\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: null,\n        KDV_DAHILMI: true,\n        PLA_KODU: 14,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        EfaturaCarisiMi: true,\n        EIrsaliye: true,\n        KS_KODU: \"100\",\n        FIYATTARIHI:null,\n        ODEMETARIHI:null,\n        KOSULTARIHI:null,\n        FAT_ALTM1:null,\n        FAT_ALTM2:null,\n        ODEMEGUNU:null,\n        GEN_ISK1T:null,\n        GEN_ISK2T:null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null\n    },\n    // EIrsEkBilgi: {\n    //     PLAKA: null,\n    //     TASIYICIVKN: null,\n    //     TASIYICIADI: null,\n    //     TASIYICIILCE: null,\n    //     TASIYICIIL: null,\n    //     TASIYICIULKE: null,\n    //     TASIYICIPOSTAKODU: null,\n    //     SOFOR1ADI: null,\n    //     SOFOR1SOYADI: null,\n    //     SOFOR1ACIKLAMA: null,\n    //     SOFOR1TCKN: null,\n    //     SOFOR2ADI: null,\n    //     SOFOR2SOYADI: null,\n    //     SOFOR2ACIKLAMA: null,\n    //     SOFOR2TCKN: null,\n    //     SOFOR3ADI: null,\n    //     SOFOR3SOYADI: null,\n    //     SOFOR3ACIKLAMA: null,\n    //     SOFOR3TCKN: null,\n    //     SEVKTAR: null,\n    //     DORSEPLAKA1: null,\n    //     DORSEPLAKA2: null,\n    //     DORSEPLAKA3: null,\n    //     MATBUKULLANILSIN: false,\n    // },\n   \n    Kalems: [\n        {\n            STra_HTUR: \"H\",\n            STra_GC: \"G\",\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            DOVIZ_TURU: null,\n            DOVTIP: null,\n            STra_DOVTIP: 0,\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: 7,\n            STra_CARI_KOD: null,\n            DEPO_KODU: 0,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n            STra_SIPKONT: null,\n            Stra_IrsKont: null,\n            Firmadovtut: 0,\n            STra_SatIsk: null,\n            STra_SatIsk2: null,\n            STra_SatIsk3: null,\n            STra_SatIsk4: null,\n            STra_SatIsk5: null,\n            STra_SatIsk6: null,\n            STra_ODEGUN: null,\n            SatirBaziAciks: null,\n           \n            S_Yedek2:'SFORIN'\n\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n    KalemAdedi: msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 3,\n    KosulMalFazlasiIsle: true,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n \nincomingData.FatUst.FATIRS_NO = incomingData.FatUst.FATIRS_NO_2;\n \n\n\n\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n   \n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// // EIrsEkBilgi alanlarını doldur\n// const eIrsEkBilgiData = incomingData.EIrsEkBilgi || {}; // Gelen EIrsEkBilgi yoksa boş nesne kullan\n// for (const key in defaultValue.EIrsEkBilgi) {\n//     result.EIrsEkBilgi[key] = getValueOrDefault(\n//         eIrsEkBilgiData[key],\n//         defaultValue.EIrsEkBilgi[key]\n//     );\n// }\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nmsg.dataPayload = result;\nnode.warn(msg.dataPayload);\nmsg.flowName =\"STNBWAY000V1_0\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 200,
        "wires": [
            [
                "0858b95ba622a39f",
                "7ccf586cbdc8fab7"
            ]
        ],
        "info": "{\r\n  \"FatUst\": {\r\n    \"Tarih\": \"2024-11-13 00:00:00\",\r\n     \"ENTEGRE_TRH\": \"2024-11-13 00:00:00\",\r\n      \"FiiliTarih\": \"2024-11-14 00:00:00\"\r\n  },\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6,\r\n        \"STra_testar\": \"2024-11-13 00:00:00\"\r\n          \"D_YEDEK10\": \"2024-11-11 00:00:00\"\r\n    },\r\n    {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    },\r\n    {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    }\r\n  ]\r\n}\r\n"
    },
    {
        "id": "c5f27ce0338c31b5",
        "type": "json",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "66acd97ca597c47c"
            ]
        ]
    },
    {
        "id": "3dce7a533d1cf6d0",
        "type": "http response",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1330,
        "y": 480,
        "wires": []
    },
    {
        "id": "66acd97ca597c47c",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"DispatchNoteDate\",\"target\":\"Tarih\"},{\"source\":\"PartnerCode\",\"target\":\"CARI_KOD\"},{\"source\":\"DispatchNoteNumber\",\"target\":\"FATIRS_NO_2\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"Unit\",\"target\":\"Olcubr\"},{\"source\":\"ItemNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 230,
        "y": 190,
        "wires": [
            [
                "4502f908659e379c",
                "260e396473311b1b"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "5d0f3d48f430aaba",
        "type": "subflow:d296b4008b6072d8",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "MssqlFatUst",
        "x": 620,
        "y": 170,
        "wires": [
            [
                "2ab892472c31a362"
            ],
            [
                "3e80d5367a18bb0c"
            ]
        ]
    },
    {
        "id": "2ca966aede7939dc",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "Get FatUst",
        "func": " \nmsg.flowName =  \"STNBWAY000V1_0\";\nlet invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \nA.CARI_KODU,\nA.KOD1,\nA.KOD2,\n \nA.PLA_KODU as PLASIYER_KODU,\nFEK.ACIK1,\nFEK.ACIK2,\nFEK.ACIK3,\nFEK.acik4,\nFEK.acik5,\nFEK.acik6,\nFEK.acik7,\nFEK.acik8,\nFEK.acik9,\nFEK.acik10,\nFEK.acik11,\nFEK.acik12,\nFEK.acik13,\nFEK.acik14,\nFEK.acik15,\nFEK.acik16,\nA.PROJE_KODU,\nA.GEN_ISK1T,\nA.GEN_ISK2T,\nA.GEN_ISK3T,\nA.GEN_ISK1O,\nA.GEN_ISK2O,\nA.GEN_ISK3O,\nDOVIZ_TIPI,\nKDV,\nKDV_DAHILMI,\nFAT_ALTM2,\nFAT_ALTM1,\nODEMEGUNU\nFROM TBLSIPAMAS A  \nJOIN TBLCASABIT CS ON A.CARI_KODU=CS.CARI_KOD\nJOIN TBLFATUEK FEK ON FEK.FATIRSNO=A.FATIRS_NO AND FEK.CKOD=A.CARI_KODU AND FEK.FKOD=7\nWHERE FATIRS_NO='${invoiceNumber}' AND  FTIRSIP=7\n`;\n\n \n\n \nmsg.query=query;\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "5d0f3d48f430aaba"
            ]
        ]
    },
    {
        "id": "2ab892472c31a362",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "SetFatUst",
        "func": "const date = msg.netsisDataPayload?.FatUst?.Tarih;\n\n\nlet data = msg.payload[0];\n\n// Gelen data'nın array olup olmadığını kontrol et\nif (!data ) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Data is either empty or not an array\",\n            query: msg.query\n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\n\nmsg.netsisDataPayload.FatUst.CariKod = data.CARI_KODU;\nmsg.netsisDataPayload.FatUst.ENTEGRE_TRH = date;\nmsg.netsisDataPayload.FatUst.FiiliTarih = date;\nmsg.netsisDataPayload.FatUst.SIPARIS_TEST = date;\nmsg.netsisDataPayload.FatUst.Tarih = date;\nmsg.netsisDataPayload.FatUst.FIYATTARIHI = date;\nmsg.netsisDataPayload.FatUst.ODEMETARIHI = date;\nmsg.netsisDataPayload.FatUst.KOSULTARIHI = date;\nmsg.netsisDataPayload.FatUst.KOD1 = data.KOD1;\nmsg.netsisDataPayload.FatUst.KOD2 = data.KOD2;\nmsg.netsisDataPayload.FatUst.KDV = data.KDV;\nmsg.netsisDataPayload.FatUst.KDV_DAHILMI = data.KDV_DAHILMI ==\"H\"? false:true;\nmsg.netsisDataPayload.FatUst.FAT_ALTM1 = data.FAT_ALTM1;\nmsg.netsisDataPayload.FatUst.FAT_ALTM2 = data.FAT_ALTM2;\nmsg.netsisDataPayload.FatUst.ODEMEGUNU = data.ODEMEGUNU;\nmsg.netsisDataPayload.FatUst.EKACK1 = data.ACIK1;\nmsg.netsisDataPayload.FatUst.EKACK2 = data.ACIK2;\nmsg.netsisDataPayload.FatUst.EKACK3 = data.ACIK3;\nmsg.netsisDataPayload.FatUst.EKACK4 = data.acik4;\nmsg.netsisDataPayload.FatUst.EKACK5 = data.acik5;\nmsg.netsisDataPayload.FatUst.EKACK6 = data.acik6;\nmsg.netsisDataPayload.FatUst.EKACK7 = data.acik7;\nmsg.netsisDataPayload.FatUst.EKACK8 = data.acik8;\nmsg.netsisDataPayload.FatUst.EKACK9 = data.acik9;\nmsg.netsisDataPayload.FatUst.EKACK10 = data.acik10;\nmsg.netsisDataPayload.FatUst.EKACK11 = data.acik11;\nmsg.netsisDataPayload.FatUst.EKACK12 = data.acik12;\nmsg.netsisDataPayload.FatUst.EKACK13 = data.acik13;\nmsg.netsisDataPayload.FatUst.EKACK14 = data.acik14;\nmsg.netsisDataPayload.FatUst.EKACK15 = data.acik15;\nmsg.netsisDataPayload.FatUst.EKACK16 = data.acik16;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLASIYER_KODU;\nmsg.netsisDataPayload.FatUst.Proje_Kodu = data.PROJE_KODU;\nmsg.netsisDataPayload.FatUst.GEN_ISK1T = data.GEN_ISK1T;\nmsg.netsisDataPayload.FatUst.GEN_ISK2T = data.GEN_ISK2T;\nmsg.netsisDataPayload.FatUst.GEN_ISK3T = data.GEN_ISK3T;\nmsg.netsisDataPayload.FatUst.GEN_ISK1O = data.GEN_ISK1o;\nmsg.netsisDataPayload.FatUst.GEN_ISK2O = data.GEN_ISK2o;\nmsg.netsisDataPayload.FatUst.GEN_ISK3O = data.GEN_ISK3o;\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": [
            [
                "020a7c06aee57295"
            ],
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "020a7c06aee57295",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "GetFatKalem",
        "func": "\nmsg.flowName = \"STNBWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT STOK_KODU,\n\t   EKALAN,\n       EKALAN1,\n        EKALAN_NEDEN,\n       MUH_KODU,\n       STHAR_DOVTIP,\n       STHAR_DOVFIAT,\n       STHAR_NF,\n       STHAR_BF,\n       STHAR_KDV,\n       CASE\n           WHEN STHAR_DOVFIAT=0 THEN 0\n           ELSE STHAR_BF/STHAR_DOVFIAT\n       END AS kur,\n       STHAR_KOD1,\n       STHAR_SATISK*100000 AS STHAR_SATISK,\n       STHAR_MALFISK,\n       STHAR_SATISK2,\n       STRA_SATISK3,\n       STRA_SATISK4,\n       STRA_SATISK5,\n       STRA_SATISK6,\n       PROJE_KODU,\n\t   SIRA,\n\t   OLCUBR,\n\t   FISNO ,\n\t   STRA_SIPKONT,\n\t   ACIKLAMA1,\n\t   ACIKLAMA2,\n\t   ACIKLAMA3,\n\t   ACIKLAMA4,\n\t   ACIKLAMA5,\n\t   ACIKLAMA6,\n\t   ACIKLAMA7,\n\t   ACIKLAMA8,\n\t   ACIKLAMA9,\n\t   ACIKLAMA10,\n     PLASIYER_KODU,\n      A.STHAR_TESTAR,\n     A.STHAR_CARIKOD\n\t   \nFROM TBLSIPATRA A\nLEFT JOIN  TBLSSATIRAC SAC ON SAC.INCKEYNO= A.INCKEYNO\nWHERE STHAR_FTIRSIP=7\n  AND FISNO='${msg.netsisDataPayload.FatUst.FATIRS_NO}' \n  AND A.STOK_KODU='${msg.netsisDataPayload.Kalems[0].StokKodu}'\n  AND A.STHAR_ACIKLAMA='${msg.netsisDataPayload.FatUst.CARI_KOD}'\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 120,
        "wires": [
            [
                "283d31b81ea43379"
            ]
        ]
    },
    {
        "id": "283d31b81ea43379",
        "type": "subflow:d296b4008b6072d8",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "MssqlFatKalem",
        "x": 880,
        "y": 170,
        "wires": [
            [
                "92df67b1a91e36aa"
            ],
            [
                "f98613779e1b1fa8"
            ]
        ]
    },
    {
        "id": "92df67b1a91e36aa",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "SetFatKalem",
        "func": "let data = msg.payload;\nlet netsisDataItemList = msg.netsisDataPayload?.Kalems;\nlet netsisDataInvoice = msg.netsisDataPayload?.FatUst;\n\nlet errorDec=[];\n// Veri kontrolü\nif (Array.isArray(data) && data.length > 0 && Array.isArray(netsisDataItemList)) {\n    //bize gelen post isteğinden alıacak veri netsisDataItemList alınacak \n    netsisDataItemList.forEach(netsisDataItem => {\n        //gelen veri kısıtı ile alıacak  netsis sipariş datası netsisData\n        let netsisData = data.find(x => \n            x?.STOK_KODU == netsisDataItem?.StokKodu && \n            x?.SIRA == netsisDataItem?.Sira\n        );\n       \n        if (netsisData)\n         {\n           \n          \n            let itemData = {\n                StokKodu: netsisData.STOK_KODU,\n                Sira: netsisData.SIRA,\n                STra_GCMIK: netsisDataItem.STra_GCMIK,\n                STra_TAR: netsisDataInvoice.Tarih,\n                STra_KDV: netsisData.STHAR_KDV,\n                ...(netsisData.kur >0 ? {\n                    STra_NF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    STra_BF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    DOVIZ_TURU: netsisData.STHAR_DOVTIP,\n                    DOVTIP: netsisData.STHAR_DOVTIP,\n                    STra_DOVTIP: netsisData.STHAR_DOVTIP,\n                    STra_DOVFIAT:netsisData.STHAR_DOVFIAT\n\n                }:{\n                    STra_NF: netsisData.STHAR_NF,\n                    STra_BF: netsisData.STHAR_BF\n                }),\n               \n                STra_SIPNUM: netsisData.FISNO,\n                ProjeKodu: netsisData.PROJE_KODU,\n                STra_SIPKONT:netsisData.STRA_SIPKONT,\n                Stra_IrsKont: netsisData.STRA_SIPKONT,\n                STra_HTUR: \"H\",\n                DEPO_KODU: netsisDataItem.DEPO_KODU,\n                //Firmadovtut: netsisDataItem.STra_GCMIK,\n                STra_SatIsk: netsisData.STHAR_SATISK,\n                STra_SatIsk2: netsisData.STHAR_SATISK2,\n                STra_SatIsk3: netsisData.STRA_SATISK3,\n                STra_SatIsk4: netsisData.STRA_SATISK4,\n                STra_SatIsk5: netsisData.STRA_SATISK5,\n                STra_SatIsk6: netsisData.STRA_SATISK6,\n                STra_ODEGUN: netsisDataInvoice.ODEMEGUNU,\n                //SatirBaziAciks: Array.from({ length: 10 }, (_, i) => netsisData[`ACIKLAMA1${i+1}`]) ,\n                Plasiyer_Kodu: netsisData.PLASIYER_KODU,\n                Ekalanneden: netsisData.EKALAN_NEDEN,\n                Ekalan: netsisData.EKALAN,\n                Ekalan1: netsisData.EKALAN1,\n                STra_testar: netsisData.STHAR_TESTAR,\n                Olcubr: 1,\n                STra_CARI_KOD: netsisData.STHAR_CARIKOD,\n                STra_GC: \"G\",\n                Stra_FiiliTar: netsisDataInvoice.Tarih,\n                D_YEDEK10: netsisDataInvoice.Tarih\n\n            }\n           \n            //Check if the item already exists in kalems\n            let existingItemIndex = msg.netsisDataPayload.Kalems.findIndex(\n                item => item.StokKodu == netsisData.STOK_KODU && item.Sira == netsisData.SIRA\n            );\n           \n            if (existingItemIndex !== -1) {\n                // Null kontrolü ekle\n                if (msg.netsisDataPayload.Kalems[existingItemIndex]) {\n                    msg.netsisDataPayload.Kalems[existingItemIndex] = {\n                        ...msg.netsisDataPayload.Kalems[existingItemIndex],\n                        ...itemData\n                    };\n                }\n            }\n\n         }\n         else {\n            errorDec.push(`No record was found in Netsis for this order (${netsisDataInvoice.FATIRS_NO}).Stock Code: ${netsisDataItem?.StokKodu }`)\n            \n         }\n          \n\n          \n    });\n    if (errorDec.length > 0){\n        msg.payload = {\n            success: false,\n             errors: {\n                message: errorDec\n\n            }\n        };\n        msg.statusCode = 400;\n\n        return [null, msg]; // Hata durumu\n    }\n    msg.payload = msg.netsisDataPayload;\n    return [msg,null ]\n}  \n   \n  else {\n    // Hata mesajını düzenle\n    msg.payload = { success: false, errors: {\n        message: \"Data is either empty or not an array\" \n      \n    }};\n    msg.statusCode = 400;\n\n    return [null, msg]; // Hata durumu\n}\n\n\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 220,
        "wires": [
            [
                "4bc00aa89bca27d9"
            ],
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "3e80d5367a18bb0c",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    success: false, errors: {\n        message: \"Error\",\n        query: msg.query\n    }\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 270,
        "wires": [
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "f98613779e1b1fa8",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    success: false, errors: {\n        message: \"Error\",\n        query: msg.query\n    }\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 270,
        "wires": [
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "4502f908659e379c",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "ParamsCheck",
        "func": "let invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\nlet invoiceCustomerCode = msg.netsisDataPayload.FatUst.CARI_KOD;\nlet orderLineNo = msg.netsisDataPayload.Kalems[0].Sira;\n\nif (!invoiceNumber) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid OrderNo\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nif (!invoiceCustomerCode) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid invoiceCustomerCode\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nif (!orderLineNo) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid orderLineNo\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 260,
        "wires": [
            [
                "2ca966aede7939dc"
            ],
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "209f8283ffcca544",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "Res",
        "func": " msg.res=global.get('STNBWAY000V1_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 480,
        "wires": [
            [
                "3dce7a533d1cf6d0",
                "3e11708962d48809"
            ]
        ]
    },
    {
        "id": "5b05ac44432206bd",
        "type": "comment",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "info": "CREATE PROCEDURE SP_S4IN_UPDATE_FATUIRS\n    @FisNo NVARCHAR(20),   -- Fiş numarası parametresi\n    @CariKodu NVARCHAR(50) -- Cari kod parametresi\nAS\nBEGIN\n    SET NOCOUNT ON;\n\n\t DECLARE @TotalAmount DECIMAL(18, 2);  -- Toplam Tutar  \n\tDECLARE @GrossAmount DECIMAL(18, 2);  -- Brüt Tutar  \n\tDECLARE @TotalVAT DECIMAL(18, 2);     -- Toplam KDV  \n\n    BEGIN TRY\n        -- 1. Toplam tutarı hesapla ve değişkene ata\n        SELECT \n            @TotalAmount = ISNULL(SUM((STHAR_NF * STHAR_GCMIK) * (1 + STHAR_KDV / 100.0)), 0),\n\t\t\t@GrossAmount = ISNULL(SUM(STHAR_BF * STHAR_GCMIK ), 0),\n\t\t\t@TotalVAT=ISNULL( SUM((STHAR_NF * STHAR_GCMIK)*(STHAR_KDV/100) ),0)\n        FROM TBLSTHAR WITH (NOLOCK)\n        WHERE FISNO = @FisNo\n        AND STHAR_ACIKLAMA = @CariKodu; \n        \n        BEGIN TRANSACTION;\n\n        -- 3. GENELTOPLAM ve brüt tutar  alanını güncelle\n        UPDATE TBLFATUIRS\n        SET GENELTOPLAM = @TotalAmount,\n\t\t BRUTTUTAR = @GrossAmount,\n\t\t KDV=@TotalVAT\n        WHERE FATIRS_NO = @FisNo\n        AND CARI_KODU = @CariKodu;       \n        COMMIT TRANSACTION;       \n\n    END TRY\n    BEGIN CATCH\n        \n        ROLLBACK TRANSACTION;\n\n        \n    END CATCH\nEND;\n",
        "x": 1600,
        "y": 130,
        "wires": []
    },
    {
        "id": "29ff395eec903b96",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "SetFatKalem(ItemTransactions)",
        "func": "let netsisDataItemList = msg.netsisDataPayload?.Kalems;\nlet netsisDataInvoice = msg.netsisDataPayload?.FatUst;\n\nlet errorDec = [];\n \nconst defaultValue = {\n    TransactSupport: null,\n    MuhasebelesmisBelge: null,\n    Stok_Kodu: null,\n    Fisno: null,\n    Sthar_Gcmik: null,\n    Sthar_Gckod: null,\n    Sthar_Tarih: null,\n    DEPO_KODU: null,\n    Sthar_Aciklama: null,\n    Sthar_Htur: null,\n    Sthar_Sipnum: null,\n    Sthar_Carikod: null,\n    STra_SIPKONT: null,\n    Sira: null,\n    Irsaliye_No: null,\n    Irsaliye_Tarih: null,\n    Sthar_Testar: null,\n    Olcubr: null,\n    Vade_Tarihi: null,\n    D_YEDEK10: null,\n    DuzeltmeTarihi: null,\n    Sthar_Nf: null,\n    Sthar_Bf: null,\n    Sthar_Kdv: null,\n    Sthar_Ftirsip: null,\n    Sthar_Bgtip: null,\n    Plasiyer_Kodu: null,\n    S_Yedek2: null,\n    FIYATTARIHI: null,\n    ODEMETARIHI:null\n};\nlet itemData;\nconst getValueOrDefault = (value, defaultValue) => value !== null && value !== undefined ? value : defaultValue;\n\n// Veri kontrolü\nif (Array.isArray(netsisDataItemList) && netsisDataItemList.length > 0) {\n    // Bize gelen post isteğinden alınacak veri netsisDataItemList\n    netsisDataItemList.forEach(netsisDataItem => {\n      \n          itemData = {\n            TransactSupport: true,\n            MuhasebelesmisBelge: true, \n            Stok_Kodu: getValueOrDefault(netsisDataItem.StokKodu, defaultValue.Stok_Kodu),\n            Fisno: getValueOrDefault(netsisDataInvoice.FATIRS_NO, defaultValue.Fisno),           \n            Sthar_Gcmik: getValueOrDefault(netsisDataItem.STra_GCMIK, defaultValue.Sthar_Gcmik),\n            Sthar_Tarih: getValueOrDefault(netsisDataInvoice.Tarih, defaultValue.Sthar_Tarih),\n            Sthar_Gckod: \"G\",\n            Sthar_Aciklama:getValueOrDefault(netsisDataInvoice.CARI_KOD, null),\n            Sthar_Htur: \"H\",\n            Sthar_Ftirsip:\"4\",\n            Sthar_Bgtip:\"I\",\n            S_Yedek2:\"SFORIN\",\n            Sthar_Kdv:getValueOrDefault(netsisDataItem.STra_KDV, 0),\n            Sthar_Sipnum: getValueOrDefault(netsisDataItem.STra_SIPNUM, defaultValue.Sthar_Sipnum),\n            Sthar_Carikod: getValueOrDefault(netsisDataInvoice.CARI_KOD, null),\n            STra_SIPKONT: getValueOrDefault(netsisDataItem.STra_SIPKONT, defaultValue.STra_SIPKONT),\n            Stra_IrsKont: netsisDataItem.Stra_IrsKont,\n            Sira: getValueOrDefault(netsisDataItem.Sira, defaultValue.Sira),\n            Irsaliye_No: getValueOrDefault(netsisDataInvoice.FATIRS_NO, defaultValue.Fisno),       \n            Irsaliye_Tarih: getValueOrDefault(netsisDataInvoice.Tarih, defaultValue.Sthar_Tarih),\n            Sthar_Testar: getValueOrDefault(netsisDataItem.STra_testar, defaultValue.Sthar_Testar),\n            Olcubr: getValueOrDefault(1, defaultValue.Olcubr),\n            Vade_Tarihi: getValueOrDefault(netsisDataInvoice.ODEMETARIHI, defaultValue.ODEMETARIHI),\n            D_YEDEK10: getValueOrDefault(netsisDataInvoice.Tarih, defaultValue.D_YEDEK10),\n            DEPO_KODU: getValueOrDefault(netsisDataItem.DEPO_KODU, defaultValue.DEPO_KODU),\n            ProjeKodu: netsisDataItem.PROJE_KODU,\n            Plasiyer_Kodu: getValueOrDefault(netsisDataItem.Plasiyer_Kodu, defaultValue.Plasiyer_Kodu),\n            Ekalanneden: netsisDataItem.Ekalanneden,\n            Ekalan: netsisDataItem.Ekalan,\n            Ekalan1: netsisDataItem.Ekalan1,\n            FIYATTARIHI: getValueOrDefault(netsisDataInvoice.FIYATTARIHI, defaultValue.FIYATTARIHI),            \n            Sthar_Nf: getValueOrDefault(netsisDataItem.STra_NF, defaultValue.Sthar_Nf),\n            Sthar_Bf: getValueOrDefault(netsisDataItem.STra_BF, defaultValue.Sthar_Bf),  \n            Sthar_Dovtip: netsisDataItem?.STHAR_DOVTIP || 0,\n            Sthar_Dovfiat:netsisDataItem?.STra_DOVFIAT || 0\n        };\n      \n    });   \n\n     msg.dataPayload = itemData;\n    return [msg, null];\n} else {\n    // Hata mesajını düzenle\n    msg.payload = {\n        success: false,\n        errors: {\n            message: \"Data is either empty or not an array\"\n        }\n    };\n    msg.statusCode = 400;\n    return [null, msg]; // Hata durumu\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 330,
        "wires": [
            [
                "5a0258fea29e4d08"
            ],
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "5a0258fea29e4d08",
        "type": "subflow:fc936f675a46124b",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemTransactions",
                "type": "str"
            }
        ],
        "x": 1680,
        "y": 380,
        "wires": [
            [
                "0bb745620aed0c74",
                "fe3a431b5793db6a"
            ],
            [
                "7575473c6d2c8a74"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "c75810f63ff5f8b0",
        "type": "subflow:d296b4008b6072d8",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "MssqlFatKalem",
        "x": 1680,
        "y": 500,
        "wires": [
            [],
            [
                "209f8283ffcca544"
            ]
        ]
    },
    {
        "id": "0bb745620aed0c74",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "CalculatedInvoice",
        "func": "\nmsg.flowName = \"STNBWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\n//kalem eklendiğinde netsis hesaplatma yapmıyor proc ile hesaplatma yapıyorz \nlet query = `\n  SP_S4IN_UPDATE_FATUIRS   '${msg.netsisDataPayload.FatUst.FATIRS_NO}', '${msg.netsisDataPayload.FatUst.CARI_KOD}' \n \n`;\n\nmsg.query = query;\nnode.warn(query);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 440,
        "wires": [
            [
                "c75810f63ff5f8b0",
                "3fdde4abc487fc2e"
            ]
        ],
        "info": "CREATE PROCEDURE SP_S4IN_UPDATE_FATUIRS\r\n    @FisNo NVARCHAR(20),   -- Fiş numarası parametresi\r\n    @CariKodu NVARCHAR(50) -- Cari kod parametresi\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\r\n\t DECLARE @TotalAmount DECIMAL(18, 2);  -- Toplam Tutar  \r\n\tDECLARE @GrossAmount DECIMAL(18, 2);  -- Brüt Tutar  \r\n\tDECLARE @TotalVAT DECIMAL(18, 2);     -- Toplam KDV  \r\n\r\n    BEGIN TRY\r\n        -- 1. Toplam tutarı hesapla ve değişkene ata\r\n        SELECT \r\n            @TotalAmount = ISNULL(SUM((STHAR_NF * STHAR_GCMIK) * (1 + STHAR_KDV / 100.0)), 0),\r\n\t\t\t@GrossAmount = ISNULL(SUM(STHAR_BF * STHAR_GCMIK ), 0),\r\n\t\t\t@TotalVAT=ISNULL( SUM((STHAR_NF * STHAR_GCMIK)*(STHAR_KDV/100) ),0)\r\n        FROM TBLSTHAR WITH (NOLOCK)\r\n        WHERE FISNO = @FisNo\r\n        AND STHAR_ACIKLAMA = @CariKodu; \r\n        \r\n        BEGIN TRANSACTION;\r\n\r\n        -- 3. GENELTOPLAM ve brüt tutar  alanını güncelle\r\n        UPDATE TBLFATUIRS\r\n        SET GENELTOPLAM = @TotalAmount,\r\n\t\t BRUTTUTAR = @GrossAmount,\r\n\t\t KDV=@TotalVAT\r\n        WHERE FATIRS_NO = @FisNo\r\n        AND CARI_KODU = @CariKodu;       \r\n        COMMIT TRANSACTION;       \r\n\r\n    END TRY\r\n    BEGIN CATCH\r\n        \r\n        ROLLBACK TRANSACTION;\r\n\r\n        \r\n    END CATCH\r\nEND;\r\n"
    },
    {
        "id": "c9ae78118c25c668",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 344",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 130,
        "wires": []
    },
    {
        "id": "6a9947be10b41dfa",
        "type": "function",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "function 157",
        "func": "let match = msg.payload.ErrorDesc.match(/Hata Kodu\\s*:\\s*(\\d+)/);\nmsg.errorStatusCode = match ? match[1] : null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 250,
        "wires": [
            [
                "289a0bef95410df6"
            ]
        ]
    },
    {
        "id": "289a0bef95410df6",
        "type": "switch",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "",
        "property": "errorStatusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "402",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 290,
        "wires": [
            [
                "29ff395eec903b96"
            ],
            []
        ],
        "info": "Hata Kodu : 402\r\nDetay : \r\n\r\n<ErrorHeader>\r\nError Time : 2/28/2025 12:28:44 PM\r\nKernel Version : 9.0.57.0\r\nKernel Address : 12B11CA4\r\nObject Address : 18D85F70\r\nObject Name : NXObj_TFatura18D85F70\r\nClass Name : TFatura\r\n</ErrorHeader>\r\n<Hata>\r\nMK0000000000005 Nolu Evrak Daha önceden kaydedilmişNetOpenX50.Fatura\r\n\r\nKONTROL BU HATA KODU VAR ISE 1 CIKIS \r\nOTHERWISE 2"
    },
    {
        "id": "260e396473311b1b",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 397",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "netsisDataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 150,
        "wires": []
    },
    {
        "id": "3fdde4abc487fc2e",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 500,
        "wires": []
    },
    {
        "id": "b9761f83fc9e8ce6",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 426",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 190,
        "wires": []
    },
    {
        "id": "5738e6743dd0dc6d",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 427",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "netsisTokenErrorMessage",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 230,
        "wires": []
    },
    {
        "id": "fe3a431b5793db6a",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 428",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2060,
        "y": 370,
        "wires": []
    },
    {
        "id": "7575473c6d2c8a74",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 429",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 420,
        "wires": []
    },
    {
        "id": "7ccf586cbdc8fab7",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 431",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 140,
        "wires": []
    },
    {
        "id": "3e11708962d48809",
        "type": "debug",
        "z": "9ef239d14888af27",
        "g": "a5d0bd7e0538715e",
        "name": "debug 468",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 530,
        "wires": []
    },
    {
        "id": "013efbbba054d98c",
        "type": "subflow:fc936f675a46124b",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 820,
        "y": 330,
        "wires": [
            [
                "c166e897452ea0a2"
            ],
            [
                "fa471c42192040e0"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "8ae4765a8c923539",
        "type": "json",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 210,
        "y": 210,
        "wires": [
            [
                "1f56c8919c07a708"
            ]
        ]
    },
    {
        "id": "9ac01bd32ff7edcd",
        "type": "function",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "Zorunlu Alan Kontrolü",
        "func": "   msg.payload = msg.netsisDataPayload;\n// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n  //  { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n   // { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n   // { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    //{ path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n   // { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n    { path: \"Gir_Depo_Kodu\", message: \"Kalems içindeki (value)  Gir_Depo_Kodu zorunlu.\" },\n\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = {\n        Type: 2, //\"ERROR\",    \n        Sender: \"Node-Red-STNWTRF001V1_1\",\n        Detail: `${JSON.stringify(errors)} Zorunlu Alan Kontrolu`,\n        DefinitionLang: \"Sorgu sirasinda hata\",\n        Data: errors,\n        Module: \"Node-Red-STNWTRF001V1_\"\n    };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 370,
        "wires": [
            [
                "9b2c68f26c2623e0"
            ],
            [
                "3b388fa9be5fa075"
            ]
        ],
        "info": "{\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\":1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1\r\n    }\r\n  ]\r\n}"
    },
    {
        "id": "18f417bd7132171d",
        "type": "http response",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 430,
        "wires": []
    },
    {
        "id": "c166e897452ea0a2",
        "type": "function",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "Response Message",
        "func": "msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.customerCode\nconst returnMessage={\n    customerCode: msg?.customerCode,\n    receivingNumber: msg.receivingNumber\n    \n};\n\nmsg.payload = {\n    type: 0,\n    Sender: \"STNWTRF001V1_0\", //  \n    Detail: JSON.stringify(returnMessage) || \"Transfer Error\",\n    DefinitionLang: JSON.stringify(returnMessage) || \"Transfer Error\",\n    Data: [returnMessage],\n    Module: \"Node-Red-STNWTRF001V1_0\"\n};\n \nmsg.res = global.get('STNWTRF000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 290,
        "wires": [
            [
                "2a0c3264649da094"
            ]
        ]
    },
    {
        "id": "fa471c42192040e0",
        "type": "function",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "Response Message",
        "func": "\nmsg.payload = {\n    Type: 2,\n    Sender: \"Node-Red-STNWTRF001V1_0\", //  \n    Detail: msg.netsisTokenErrorMessage || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n    DefinitionLang: JSON.stringify(msg.netsisTokenErrorMessage) || \"Transfer Error\",\n    Data: [msg.netsisTokenErrorMessage],\n    Module: \"Node-Red-STNSINV000V1.0\"\n}; \n \n\nmsg.res = global.get('STNWTRF000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 330,
        "wires": [
            [
                "c3768f8361071b0c"
            ]
        ]
    },
    {
        "id": "2a0c3264649da094",
        "type": "http response",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 280,
        "wires": []
    },
    {
        "id": "c3768f8361071b0c",
        "type": "http response",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1400,
        "y": 330,
        "wires": []
    },
    {
        "id": "9b2c68f26c2623e0",
        "type": "function",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "function 122",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \n\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\n\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: null,\n        CariKod: null,\n        FATIRS_NO: null,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 5,\n        KOD1: null,\n        KOD2: null,\n        TIPI:2,\n        Aciklama: \"SFORIN\",\n        ENTEGRE_TRH: formattedDate,\n        KDV_DAHILMI: false,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        \n    },\n    Kalems: [\n        {\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            STra_HTUR: \"C\",\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: 9,\n            STra_CARI_KOD: null,\n            STra_GC: \"G\",\n            DEPO_KODU: 1,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n            Gir_Depo_Kodu:1,\n            S_Yedek2: 'SFORIN'\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n     KalemAdedi:msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 4,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// EIrsEkBilgi alanlarını doldur\nconst eIrsEkBilgiData = incomingData.EIrsEkBilgi || {}; // Gelen EIrsEkBilgi yoksa boş nesne kullan\nfor (const key in defaultValue.EIrsEkBilgi) {\n    result.EIrsEkBilgi[key] = getValueOrDefault(\n        eIrsEkBilgiData[key],\n        defaultValue.EIrsEkBilgi[key]\n    );\n}\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nmsg.dataPayload = result;\nmsg.flowName =\"STNWENT000V1_0\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 330,
        "wires": [
            [
                "013efbbba054d98c"
            ]
        ],
        "info": "{\r\n  \"FatUst\": {\r\n     \"Tarih\": \"2024-11-13 00:00:00\",\r\n     \"ENTEGRE_TRH\": \"2024-11-13 00:00:00\",\r\n      \"FiiliTarih\": \"2024-11-14 00:00:00\"\r\n  },\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6,\r\n       \"STra_testar\": \"2024-11-13 00:00:00\"\r\n       \"D_YEDEK10\": \"2024-11-11 00:00:00\"  //teslim Tarih\r\n    },\r\n    {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    },\r\n    {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    }\r\n  ]\r\n}\r\n"
    },
    {
        "id": "1f56c8919c07a708",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"Date\",\"target\":\"Tarih\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"OrderLineNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"},{\"source\":\"TargetWarehouseCode\",\"target\":\"Gir_Depo_Kodu\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 240,
        "y": 280,
        "wires": [
            [
                "9ac01bd32ff7edcd"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "eb331c8c32deaa1d",
        "type": "comment",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "S2N Warehouse Trf",
        "info": "Depolar arasi transfer ",
        "x": 410,
        "y": 200,
        "wires": []
    },
    {
        "id": "3b388fa9be5fa075",
        "type": "function",
        "z": "5d0772e7b4d40c7d",
        "g": "7fa9daa49aea977c",
        "name": "Res",
        "func": "msg.res = global.get('STNWTRF000V1_res')\n\n \n\n msg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-STNSINV000V1.0\", // C# kodundaki varsayılan değeri koruduk\n    Detail:  \"Transfer Error\",\n    DefinitionLang: JSON.stringify() || \"Transfer Error\",\n    Data: [],\n    Module: \"Node-Red-STNSINV000V1.0\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 380,
        "wires": [
            [
                "18f417bd7132171d"
            ]
        ]
    },
    {
        "id": "7807e8f98cd6f630",
        "type": "subflow:fc936f675a46124b",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1330,
        "y": 310,
        "wires": [
            [
                "dcee01621bfab79c"
            ],
            [
                "e7ee5385f8de97fd"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "559e4ee976f9d343",
        "type": "json",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 710,
        "y": 230,
        "wires": [
            [
                "ac2f27697587c30c"
            ]
        ]
    },
    {
        "id": "567c79d6b0c53b04",
        "type": "function",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "Zorunlu Alan Kontrolü",
        "func": "msg.payload=msg.netsisDataPayload;\n// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n  //  { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n   // { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n   // { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    // { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = { success: false, errors: errors };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 340,
        "wires": [
            [
                "da0f70f519dcd91d"
            ],
            [
                "1bb6c13a48aa8276"
            ]
        ],
        "info": "{\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\":1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1\r\n    }\r\n  ]\r\n}"
    },
    {
        "id": "7afd481b9d48fcd1",
        "type": "http response",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 840,
        "y": 450,
        "wires": []
    },
    {
        "id": "dcee01621bfab79c",
        "type": "function",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "Response Message",
        "func": "msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.customerCode\nconst returnMessage={\n    customerCode: msg?.customerCode,\n    receivingNumber: msg.receivingNumber\n    \n};\nmsg.payload = {\n    status: \"Info\",\n    message: JSON.stringify(returnMessage) ||\"Transfer successfully completed\",\n    programName: \"STNWENT000V1_0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nmsg.res = global.get('STNWENT000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 290,
        "wires": [
            [
                "d57ff27416a49126"
            ]
        ]
    },
    {
        "id": "e7ee5385f8de97fd",
        "type": "function",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "Response Message",
        "func": " \nmsg.payload = {\n    status: \"Error\",\n    message: msg.netsisTokenErrorMessage ||\"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\",\n    programName: \"STNWENT000V1_0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nmsg.res = global.get('STNWENT000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 330,
        "wires": [
            [
                "27207b995aeb64f2"
            ]
        ]
    },
    {
        "id": "d57ff27416a49126",
        "type": "http response",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1840,
        "y": 280,
        "wires": []
    },
    {
        "id": "27207b995aeb64f2",
        "type": "http response",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1920,
        "y": 330,
        "wires": []
    },
    {
        "id": "da0f70f519dcd91d",
        "type": "function",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "function 120",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \n\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\n\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: 0,\n        CariKod: \"1\",\n        FATIRS_NO: null,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 8,\n        KOD1: null,\n        KOD2: null,\n        TIPI:2,\n        Aciklama: \"Node-Red\",\n        AMBHARTUR: 2,\n        ENTEGRE_TRH: formattedDate,\n        KDV_DAHILMI: false,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        KS_KODU: \"100\",\n        CikisYeri:0\n        \n        \n    },\n    Kalems: [\n        {\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            STra_HTUR: \"C\",\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: 9,\n            STra_CARI_KOD: null,\n            STra_GC: \"G\",\n            DEPO_KODU: 1,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n            S_Yedek2: 'NODE-RED'\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n    KalemAdedi: msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 8,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// EIrsEkBilgi alanlarını doldur\nconst eIrsEkBilgiData = incomingData.EIrsEkBilgi || {}; // Gelen EIrsEkBilgi yoksa boş nesne kullan\nfor (const key in defaultValue.EIrsEkBilgi) {\n    result.EIrsEkBilgi[key] = getValueOrDefault(\n        eIrsEkBilgiData[key],\n        defaultValue.EIrsEkBilgi[key]\n    );\n}\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nmsg.dataPayload = result;\nmsg.flowName =\"STNWENT000V1_0\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 330,
        "wires": [
            [
                "7807e8f98cd6f630",
                "108d9b74615d318f"
            ]
        ]
    },
    {
        "id": "108d9b74615d318f",
        "type": "debug",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "debug 235",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 400,
        "wires": []
    },
    {
        "id": "ac2f27697587c30c",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"Date\",\"target\":\"Tarih\"},{\"source\":\"User\",\"target\":\"Kullanici\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"OrderLineNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"},{\"source\":\"TargetWarehouseCode\",\"target\":\"Gir_Depo_Kodu\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 760,
        "y": 280,
        "wires": [
            [
                "567c79d6b0c53b04"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "1bb6c13a48aa8276",
        "type": "function",
        "z": "dd21aeba43582ce3",
        "g": "0d2e94a9e1ef7022",
        "name": "Res",
        "func": "msg.res = global.get('STNWENT000V1_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 400,
        "wires": [
            [
                "7afd481b9d48fcd1"
            ]
        ]
    },
    {
        "id": "2343dcde078c0de1",
        "type": "function",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "Zorunlu Alan Kontrolü",
        "func": "msg.payload=msg.netsisDataPayload;\n// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n  //  { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n   // { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n   // { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n   // { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = { success: false, errors: errors };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 250,
        "wires": [
            [
                "75c8c70a80585425"
            ],
            [
                "f00d65ed85189650"
            ]
        ],
        "info": "{\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\":1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1\r\n    }\r\n  ]\r\n}"
    },
    {
        "id": "dcf5c52429103c36",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"Date\",\"target\":\"Tarih\"},{\"source\":\"User\",\"target\":\"Kullanici\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"OrderLineNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"},{\"source\":\"TargetWarehouseCode\",\"target\":\"Gir_Depo_Kodu\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 260,
        "y": 270,
        "wires": [
            [
                "2343dcde078c0de1"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "75c8c70a80585425",
        "type": "function",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "function 123",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \n\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\n\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: 0,\n        CariKod: \"1\",\n        FATIRS_NO: null,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 9,\n        KOD1: null,\n        KOD2: null,\n        TIPI:2,\n        Aciklama: \"Node-Red\",\n        AMBHARTUR: 2,\n        ENTEGRE_TRH: formattedDate,\n        KDV_DAHILMI: false,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        KS_KODU: \"100\",\n        CikisYeri:0\n        \n        \n    },\n    Kalems: [\n        {\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            STra_HTUR: \"C\",\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: 9,\n            STra_CARI_KOD: null,\n            STra_GC: \"C\",\n            DEPO_KODU: 1,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n               S_Yedek2:'NODE-RED'\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n     KalemAdedi: msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 9,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// EIrsEkBilgi alanlarını doldur\nconst eIrsEkBilgiData = incomingData.EIrsEkBilgi || {}; // Gelen EIrsEkBilgi yoksa boş nesne kullan\nfor (const key in defaultValue.EIrsEkBilgi) {\n    result.EIrsEkBilgi[key] = getValueOrDefault(\n        eIrsEkBilgiData[key],\n        defaultValue.EIrsEkBilgi[key]\n    );\n}\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nmsg.dataPayload = result;\nmsg.flowName =\"STNWEX000V1.0\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 210,
        "wires": [
            [
                "f54c264a9d99416a",
                "dee9a999c0a00e11"
            ]
        ]
    },
    {
        "id": "263393d0dfbf5305",
        "type": "http response",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 660,
        "y": 380,
        "wires": []
    },
    {
        "id": "94608eb23ce1fc19",
        "type": "json",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 190,
        "y": 210,
        "wires": [
            [
                "dcf5c52429103c36"
            ]
        ]
    },
    {
        "id": "f54c264a9d99416a",
        "type": "subflow:fc936f675a46124b",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1100,
        "y": 210,
        "wires": [
            [
                "402d0d012bdfafb2"
            ],
            [
                "820212a268fdfe83"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "dee9a999c0a00e11",
        "type": "debug",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "debug 240",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 160,
        "wires": []
    },
    {
        "id": "402d0d012bdfafb2",
        "type": "function",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "Response Message",
        "func": "msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.customerCode\nconst returnMessage={\n    customerCode: msg?.customerCode,\n    receivingNumber: msg.receivingNumber\n    \n};\nmsg.payload = {\n    status: \"Info\",\n    message: JSON.stringify(returnMessage) ||\"Transfer successfully completed\",\n    programName: \"STNWEX000V1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nmsg.res = global.get('STNWEX000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 170,
        "wires": [
            [
                "ab0ff447a64f012c"
            ]
        ]
    },
    {
        "id": "820212a268fdfe83",
        "type": "function",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "Response Message",
        "func": " \nmsg.payload = {\n    status: \"Error\",\n    message: msg.netsisTokenErrorMessage ||\"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\",\n    programName: \"STNWEX000V1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nmsg.res = global.get('STNWEX000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 210,
        "wires": [
            [
                "c9ddde8853d8daca"
            ]
        ]
    },
    {
        "id": "ab0ff447a64f012c",
        "type": "http response",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1600,
        "y": 160,
        "wires": []
    },
    {
        "id": "c9ddde8853d8daca",
        "type": "http response",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1680,
        "y": 210,
        "wires": []
    },
    {
        "id": "f00d65ed85189650",
        "type": "function",
        "z": "ddcc1ea5734e68f3",
        "g": "67a2890d02f58176",
        "name": "Res",
        "func": "msg.res = global.get('STNWEX000V1_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "263393d0dfbf5305"
            ]
        ]
    },
    {
        "id": "e2c41f405270e1cf",
        "type": "json",
        "z": "2a1dc06c4b793347",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 220,
        "y": 130,
        "wires": [
            [
                "1b44886d9c652b7d"
            ]
        ]
    },
    {
        "id": "1b44886d9c652b7d",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "2a1dc06c4b793347",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"Header\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"Date\",\"target\":\"Tarih\"},{\"source\":\"User\",\"target\":\"Kullanici\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"OrderLineNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"},{\"source\":\"TargetWarehouseCode\",\"target\":\"Gir_Depo_Kodu\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 250,
        "y": 180,
        "wires": [
            [
                "067a123a5e498823"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "067a123a5e498823",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "Zorunlu Alan Kontrolü",
        "func": " msg.payload=msg.netsisDataPayload;\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    //{ path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n    { path: \"Gir_Depo_Kodu\", message: \"Kalems içindeki (value)  Gir_Depo_Kodu zorunlu.\" }\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = { success: false, errors: errors };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nmsg.requestBody = msg.payload;\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "b2b3259e5f015d6e"
            ],
            [
                "22859ab018bc0ced"
            ]
        ],
        "info": "{\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\":1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1\r\n    },\r\n\t {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1\r\n    }\r\n  ]\r\n}"
    },
    {
        "id": "0bd4de9e60b3a7fa",
        "type": "http response",
        "z": "2a1dc06c4b793347",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 390,
        "wires": []
    },
    {
        "id": "b2b3259e5f015d6e",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "function 135",
        "func": "msg.restUrl = `api/v2/BOM/${msg.requestBody.data.Kalems[0].StokKodu}`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 180,
        "wires": [
            [
                "396c274adc16196b"
            ]
        ]
    },
    {
        "id": "6ff6b7a4080c2892",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "SetUSK",
        "func": "const getValueBelgeTip = (value) =>\n    value !== null && value !==\"\" && value !== undefined ? 1 : 0;\nconst utcNow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));\nlet data = msg.payload.Data;\nconst requestBodyItem=msg.requestBody.data.Kalems[0];\nconst requestBody = msg.requestBody.data.Header;\n// Varsayılan JSON yapısı\nconst defaultData = {\n    Kalem: \n        {\n            Index: 0,\n            StokKodu: \"\",\n            GC: null,\n            DepoKodu: null,\n            OlcuBirimi: 0,\n            Miktar: 0.0,\n            Aciklama: \"\"\n        }\n    ,\n    Seri: [],\n    ShrinkageDetailList: [],\n    MamulFireSeri: [],\n    MuhasebelesmisBelge: false,\n    TransactSupport: true,\n    UretSon_FisNo: null,\n    UretSon_Tarih: utcNow,\n    UretSon_Depo: null,\n    UretSon_Mamul: null,\n    UretSon_SipNo:null,\n    UretSon_Miktar: 0.0,\n    UretSon_MalY1: 0.0,\n    UretSon_Maly2: 0.0,\n    Sube_Kodu: env.get('BranchCode'),\n    F_Yedek1: 0.00000000,\n    F_Yedek2: 0.0,\n    I_Yedek1: null,\n    I_Yedek2: 0,\n    B_Yedek1: 0,\n    B_Yedek2: 0,\n    Oncelik: 0,\n    KayitYapanKul: null,\n    KayitTarihi: utcNow,\n    Mamul_Olcu_Birimi: 0,\n    StokDepoKullan: false,\n    BAKIYE_DEPO: 0,\n    OTO_YMAM_STOK_KULLAN: false,\n    OTO_YMAM_GIRDI_CIKTI: false,\n    SeriSayisi: 0,\n    BelgeTipi: 1,\n    DepoOnceligi: 0,\n    HataKodu: 0,\n    SeriVarMi: false,\n    AltRecKullan: false,\n    KayitlaraGecilsin: true,\n    KaynakListCount: 0,\n    FireDepo: 0,\n    MamulFireSeriSayisi: 0,\n    ReceteGetir: true,    \n    S_Yedek3: 'NODE-RED'\n  \n};\n\n\nif (Array.isArray(data.BOMItemList) && data.BOMItemList.length>0)\n{\n\n    // Yeni JSON oluşturma\n    let uskDataNetsis = { ...defaultData };\n    let index_ = 0;\n    // BOMItemList kontrol ve işleme\n    uskDataNetsis.Kalem = data.BOMItemList.map((item, index) => {\n        index_ = index;\n        // Miktar ve Fiyat'ı işleyelim\n     \n   \n\n        return {\n\n            Index: index,\n            StokKodu: item.Ham_Kodu || defaultData.Kalem.StokKodu,\n            GC: 1,\n            DepoKodu: requestBodyItem.DEPO_KODU || defaultData.Kalem.DepoKodu,\n            OlcuBirimi: 0,\n            Miktar: (parseFloat(item.Miktar) / parseFloat(data.ReceteToplami)) * parseFloat(requestBodyItem.STra_GCMIK)  || 1,\n            Aciklama: requestBodyItem.StokKodu || \"\",\n  \n        };\n    });\n\n    // uskDataNetsis.Kalem.push({\n\n    //     Index: index_,\n    //     StokKodu: requestBodyItem.StokKodu || defaultData.Kalem.StokKodu,\n    //     GC: 0,\n    //     DepoKodu: requestBodyItem.Gir_Depo_Kodu || defaultData.Kalem.DepoKodu,\n    //     OlcuBirimi: 1,\n    //     Miktar: parseFloat(requestBodyItem.STra_GCMIK) || 1,\n    //     Aciklama: \"Uretim\",\n    // })\n\n   \n    uskDataNetsis.UretSon_Tarih = requestBody.Tarih;\n    uskDataNetsis.UretSon_Depo = parseInt(requestBodyItem.Gir_Depo_Kodu);\n    uskDataNetsis.UretSon_Mamul = requestBodyItem.StokKodu;\n    uskDataNetsis.UretSon_Miktar = parseFloat(requestBodyItem.STra_GCMIK);\n    uskDataNetsis.I_Yedek1 = requestBodyItem.DEPO_KODU;    \n    // uskDataNetsis.Mamul_Olcu_Birimi = 1;\n    uskDataNetsis.UretSon_SipNo = requestBody.FATIRS_NO;\n    uskDataNetsis.BelgeTipi = getValueBelgeTip(requestBody.FATIRS_NO)\n    // Tamamlanan JSON'u geri döndür\n    msg.dataPayload = uskDataNetsis;     \n    msg.flowName = \"STNFGRWC000V1_0\"\n    node.warn(msg.dataPayload);\n    return [msg,null];\n\n}\nelse{\n    // Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\n    msg.payload = { success: false, errors: `There is no recipe available for the relevant stock ${requestBodyItem.StokKodu} in the ERP system.` };\n    msg.statusCode = 400;\n    return [null, msg];\n\n}\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 140,
        "wires": [
            [
                "0c111866cedf437f"
            ],
            [
                "22859ab018bc0ced"
            ]
        ]
    },
    {
        "id": "396c274adc16196b",
        "type": "subflow:fc936f675a46124b",
        "z": "2a1dc06c4b793347",
        "name": "Get Bom Item List",
        "env": [
            {
                "name": "ChooseRequestMethod",
                "value": "GET",
                "type": "str"
            }
        ],
        "x": 980,
        "y": 180,
        "wires": [
            [
                "6ff6b7a4080c2892"
            ],
            [
                "26738bf15b0bec3f"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "0c111866cedf437f",
        "type": "subflow:fc936f675a46124b",
        "z": "2a1dc06c4b793347",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/FinishedGoodsReceiptWChanges/ReceiptProduce",
                "type": "str"
            }
        ],
        "x": 1400,
        "y": 120,
        "wires": [
            [
                "0ff00c0b221ee690",
                "56ad52c322888624"
            ],
            [
                "26738bf15b0bec3f"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "26738bf15b0bec3f",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "Response Message",
        "func": " \nmsg.payload = {\n    status: \"Error\",\n    message: msg.netsisTokenErrorMessage ||\"An error has occurred. Please check the log file\",\n    programName: \"STNFGRWC000V1_0\",   \n    stockCode: msg.requestBody.data.Kalems[0].StokKodu,\n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nmsg.res = global.get('STNFGRWC000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 240,
        "wires": [
            [
                "99a56f86bea9460e"
            ]
        ]
    },
    {
        "id": "56ad52c322888624",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "Response Message",
        "func": "msg.docNo = msg.payload.Data.UretSon_FisNo;\nmsg.customerCode\nconst returnMessage={\n    \n    docNo: msg.docNo\n    \n};\nmsg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"STNFGRWC000V1_0\", \n     timestamp: new Date().toISOString() ,// Yerel tarih ve saat\n        AttributeCode: \"NETSISUSK\",\n        StrValue: msg.docNo,       \n        RemoteName: \"NETSIS USK NUMARASI\" \n   \n};\nmsg.res = global.get('STNFGRWC000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 50,
        "wires": [
            [
                "9afd0c7a939d7409"
            ]
        ]
    },
    {
        "id": "99a56f86bea9460e",
        "type": "http response",
        "z": "2a1dc06c4b793347",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1860,
        "y": 440,
        "wires": []
    },
    {
        "id": "9afd0c7a939d7409",
        "type": "http response",
        "z": "2a1dc06c4b793347",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1870,
        "y": 40,
        "wires": []
    },
    {
        "id": "22859ab018bc0ced",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "Res",
        "func": "msg.res = global.get('STNFGRWC000V1_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 430,
        "wires": [
            [
                "0bd4de9e60b3a7fa"
            ]
        ]
    },
    {
        "id": "0ff00c0b221ee690",
        "type": "function",
        "z": "2a1dc06c4b793347",
        "name": "MongoQueryV2",
        "func": "\nconst query =   {\n  update: {\n    filter: {\n       \"Header.PrdDocNo\":`${msg.requestBody.data.Header.FATIRS_NO}`\n    },\n    update: {\n      $set: {\n        \"Header.StateObject\": \"CNF\",\n        \"Header.DocState\": \"CNF\"\n        \n      }\n    },\n    \n  }\n};\n;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 110,
        "wires": [
            [
                "1d0860518a8131bd",
                "c4095bc3b35eb6d7"
            ]
        ]
    },
    {
        "id": "1d0860518a8131bd",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "2a1dc06c4b793347",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "ProductionDoc",
                "type": "str"
            }
        ],
        "x": 1645,
        "y": 160,
        "wires": [
            [
                "7df6dc7484767f98"
            ]
        ],
        "l": false
    },
    {
        "id": "7df6dc7484767f98",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "2a1dc06c4b793347",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "ProductionDoc",
                "type": "str"
            },
            {
                "name": "IsUpdated",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1705,
        "y": 160,
        "wires": [
            []
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "c4095bc3b35eb6d7",
        "type": "debug",
        "z": "2a1dc06c4b793347",
        "name": "debug 488",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1900,
        "y": 80,
        "wires": []
    },
    {
        "id": "3d527ebf2f5da739",
        "type": "subflow:fc936f675a46124b",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 580,
        "wires": [
            [
                "900d035c135ff04b"
            ],
            [
                "75415a36ecb9e79f"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "0caee4a797e8b576",
        "type": "json",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 270,
        "y": 250,
        "wires": [
            [
                "1dbc5ab823d969f0"
            ]
        ]
    },
    {
        "id": "991e7900be59744c",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n   // { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n    { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n  //  { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = { success: false, errors: errors };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 580,
        "wires": [
            [
                "f97804e429fcda6d"
            ],
            [
                "92454af63018d947"
            ]
        ]
    },
    {
        "id": "f5eb9f583ee3fb82",
        "type": "http response",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1700,
        "y": 280,
        "wires": []
    },
    {
        "id": "900d035c135ff04b",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "Response Message",
        "func": "msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.customerCode\nconst returnMessage={\n    customerCode: msg?.customerCode,\n    receivingNumber: msg.receivingNumber\n    \n};\nmsg.payload = {\n    status: \"Info\",\n    message: JSON.stringify(returnMessage) ||\"Transfer successfully completed\",\n    programName: \"STNSREC0001.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nmsg.res = global.get('STNSWAY000V2_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 540,
        "wires": [
            [
                "20f3445faca4ac8a"
            ]
        ]
    },
    {
        "id": "75415a36ecb9e79f",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "Response Message",
        "func": " \nmsg.payload = {\n    status: \"Error\",\n    message: msg.netsisTokenErrorMessage ||\"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\",\n    programName: \"STNSREC0001.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nmsg.res = global.get('STNSWAY000V2_res')\nreturn msg;\n ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 580,
        "wires": [
            [
                "c7a70b5ef0d64f36"
            ]
        ]
    },
    {
        "id": "20f3445faca4ac8a",
        "type": "http response",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1720,
        "y": 480,
        "wires": []
    },
    {
        "id": "c7a70b5ef0d64f36",
        "type": "http response",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1720,
        "y": 580,
        "wires": []
    },
    {
        "id": "5c1e73838ceb54c7",
        "type": "comment",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "S2N SALES WAYBILL",
        "info": "SATIŞ IRSALIYESI",
        "x": 290,
        "y": 210,
        "wires": []
    },
    {
        "id": "f97804e429fcda6d",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "function 137",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \n\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\n\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        FATIRS_NO: null,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 2,\n        KOD1: null,\n        KOD2: null,\n        TIPI: 2,\n        Aciklama: \"Node-Red\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: null,\n        KDV_DAHILMI: true,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        EfaturaCarisiMi: true,\n        EIrsaliye: true,\n        FIYATTARIHI:null,\n        ODEMETARIHI:null,\n        KOSULTARIHI:null,\n        FAT_ALTM1:null,\n        FAT_ALTM2:null,\n        ODEMEGUNU:null,\n        GEN_ISK1T:null,\n        GEN_ISK2T:null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null\n\n\n\n\n\n\n\n\n    },\n    EIrsEkBilgi: {\n        PLAKA: null,\n        TASIYICIVKN: null,\n        TASIYICIADI: null,\n        TASIYICIILCE: null,\n        TASIYICIIL: null,\n        TASIYICIULKE: null,\n        TASIYICIPOSTAKODU: null,\n        SOFOR1ADI: null,\n        SOFOR1SOYADI: null,\n        SOFOR1ACIKLAMA: null,\n        SOFOR1TCKN: null,\n        SOFOR2ADI: null,\n        SOFOR2SOYADI: null,\n        SOFOR2ACIKLAMA: null,\n        SOFOR2TCKN: null,\n        SOFOR3ADI: null,\n        SOFOR3SOYADI: null,\n        SOFOR3ACIKLAMA: null,\n        SOFOR3TCKN: null,\n        SEVKTAR: null,\n        DORSEPLAKA1: null,\n        DORSEPLAKA2: null,\n        DORSEPLAKA3: null,\n        MATBUKULLANILSIN: false,\n    },\n   \n    Kalems: [\n        {\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            DOVIZ_TURU:null,\n            DOVTIP:null,\n            STra_DOVTIP:0,\n            STra_HTUR: \"H\",\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: null,\n            STra_CARI_KOD: null,\n            STra_GC: \"C\",\n            DEPO_KODU: 0,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n            STra_SIPKONT:null,\n            Stra_IrsKont:null,\n            Firmadovtut:0,\n            STra_SatIsk:null,\n            STra_SatIsk2:null,\n            STra_SatIsk3:null,\n            STra_SatIsk4:null,\n            STra_SatIsk5:null,\n            STra_SatIsk6:null,\n            STra_ODEGUN:null,\n            SatirBaziAciks:null\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n     // gelen post isteğin itemlerin sayısı\n    KalemAdedi:msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 2,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// EIrsEkBilgi alanlarını doldur\nconst eIrsEkBilgiData = incomingData.EIrsEkBilgi || {}; // Gelen EIrsEkBilgi yoksa boş nesne kullan\nfor (const key in defaultValue.EIrsEkBilgi) {\n    result.EIrsEkBilgi[key] = getValueOrDefault(\n        eIrsEkBilgiData[key],\n        defaultValue.EIrsEkBilgi[key]\n    );\n}\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\n \nmsg.dataPayload = result;\nmsg.dataPayload.FatUst.FATIRS_NO=null;\nmsg.flowName=\"S2N_RECEVING_URL\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 570,
        "wires": [
            [
                "3d527ebf2f5da739"
            ]
        ]
    },
    {
        "id": "1dbc5ab823d969f0",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"OrderNo\",\"target\":\"FATIRS_NO\"},{\"source\":\"Date\",\"target\":\"Tarih\"},{\"source\":\"User\",\"target\":\"Kullanici\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"Unit\",\"target\":\"Olcubr\"},{\"source\":\"OrderLineNo\",\"target\":\"Sira\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"},{\"source\":\"TargetWarehouseCode\",\"target\":\"Gir_Depo_Kodu\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 300,
        "y": 340,
        "wires": [
            [
                "48f5877bd292bee0"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "845afc77ec50a148",
        "type": "subflow:d296b4008b6072d8",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "MssqlFatUst",
        "x": 830,
        "y": 310,
        "wires": [
            [
                "8807175d7ec7a39c"
            ],
            [
                "5e741f11bda748d9"
            ]
        ]
    },
    {
        "id": "1ffb1393454fad27",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "Get FatUst",
        "func": " \nmsg.flowName =  \"S2NSWAY000V1_0\";\nlet invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \n\nA.CARI_KODU,\nA.KOD1,\nA.KOD2,\nCS.PLASIYER_KODU,\nFEK.ACIK1,\nFEK.ACIK2,\nFEK.ACIK3,\nFEK.acik4,\nFEK.acik5,\nFEK.acik6,\nFEK.acik7,\nFEK.acik8,\nFEK.acik9,\nFEK.acik10,\nFEK.acik11,\nFEK.acik12,\nFEK.acik13,\nFEK.acik14,\nFEK.acik15,\nFEK.acik16,\nA.PROJE_KODU,\nA.GEN_ISK1T,\nA.GEN_ISK2T,\nA.GEN_ISK3T,\nA.GEN_ISK1O,\nA.GEN_ISK2O,\nA.GEN_ISK3O,\nDOVIZ_TIPI,\nKDV,\nFAT_ALTM2,\nFAT_ALTM1,\nODEMEGUNU\nFROM TBLSIPAMAS A  \nJOIN TBLCASABIT CS ON A.CARI_KODU=CS.CARI_KOD\nJOIN TBLFATUEK FEK ON FEK.FATIRSNO=A.FATIRS_NO AND FEK.CKOD=A.CARI_KODU AND FEK.FKOD=6\nWHERE FATIRS_NO='${invoiceNumber}' AND  FTIRSIP=6\n`;\n\n \n\n \nmsg.query=query;\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 240,
        "wires": [
            [
                "845afc77ec50a148"
            ]
        ]
    },
    {
        "id": "8807175d7ec7a39c",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "SetFatUst",
        "func": "const date = msg.netsisDataPayload?.FatUst?.Tarih;\n\n\nlet data = msg.payload[0];\n\n// Gelen data'nın array olup olmadığını kontrol et\nif (!data ) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Data is either empty or not an array\",\n            query: msg.query\n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\n\nmsg.netsisDataPayload.FatUst.CariKod = data.CARI_KODU;\nmsg.netsisDataPayload.FatUst.ENTEGRE_TRH = date;\nmsg.netsisDataPayload.FatUst.FiiliTarih = date;\nmsg.netsisDataPayload.FatUst.SIPARIS_TEST = date;\nmsg.netsisDataPayload.FatUst.Tarih = date;\nmsg.netsisDataPayload.FatUst.FIYATTARIHI = date;\nmsg.netsisDataPayload.FatUst.ODEMETARIHI = date;\nmsg.netsisDataPayload.FatUst.KOSULTARIHI = date;\nmsg.netsisDataPayload.FatUst.KOD1 = data.KOD1;\nmsg.netsisDataPayload.FatUst.KOD2 = data.KOD2;\nmsg.netsisDataPayload.FatUst.KDV = data.KDV;\nmsg.netsisDataPayload.FatUst.FAT_ALTM1 = data.FAT_ALTM1;\nmsg.netsisDataPayload.FatUst.FAT_ALTM2 = data.FAT_ALTM2;\nmsg.netsisDataPayload.FatUst.ODEMEGUNU = data.ODEMEGUNU;\nmsg.netsisDataPayload.FatUst.EKACK1 = data.ACIK1;\nmsg.netsisDataPayload.FatUst.EKACK2 = data.ACIK2;\nmsg.netsisDataPayload.FatUst.EKACK3 = data.ACIK3;\nmsg.netsisDataPayload.FatUst.EKACK4 = data.acik4;\nmsg.netsisDataPayload.FatUst.EKACK5 = data.acik5;\nmsg.netsisDataPayload.FatUst.EKACK6 = data.acik6;\nmsg.netsisDataPayload.FatUst.EKACK7 = data.acik7;\nmsg.netsisDataPayload.FatUst.EKACK8 = data.acik8;\nmsg.netsisDataPayload.FatUst.EKACK9 = data.acik9;\nmsg.netsisDataPayload.FatUst.EKACK10 = data.acik10;\nmsg.netsisDataPayload.FatUst.EKACK11 = data.acik11;\nmsg.netsisDataPayload.FatUst.EKACK12 = data.acik12;\nmsg.netsisDataPayload.FatUst.EKACK13 = data.acik13;\nmsg.netsisDataPayload.FatUst.EKACK14 = data.acik14;\nmsg.netsisDataPayload.FatUst.EKACK15 = data.acik15;\nmsg.netsisDataPayload.FatUst.EKACK16 = data.acik16;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLASIYER_KODU;\nmsg.netsisDataPayload.FatUst.Proje_Kodu = data.PROJE_KODU;\nmsg.netsisDataPayload.FatUst.GEN_ISK1T = data.GEN_ISK1T;\nmsg.netsisDataPayload.FatUst.GEN_ISK2T = data.GEN_ISK2T;\nmsg.netsisDataPayload.FatUst.GEN_ISK3T = data.GEN_ISK3T;\nmsg.netsisDataPayload.FatUst.GEN_ISK1O = data.GEN_ISK1o;\nmsg.netsisDataPayload.FatUst.GEN_ISK2O = data.GEN_ISK2o;\nmsg.netsisDataPayload.FatUst.GEN_ISK3O = data.GEN_ISK3o;\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 370,
        "wires": [
            [
                "f75c6ee39c5ae12d"
            ],
            [
                "92454af63018d947"
            ]
        ]
    },
    {
        "id": "f75c6ee39c5ae12d",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "GetFatKalem",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT STOK_KODU,\n\t   EKALAN,\n       EKALAN1,\n        EKALAN_NEDEN,\n       MUH_KODU,\n       STHAR_DOVTIP,\n       STHAR_DOVFIAT,\n       STHAR_NF,\n       STHAR_BF,\n       STHAR_KDV,\n       CASE\n           WHEN STHAR_DOVFIAT=0 THEN 0\n           ELSE STHAR_BF/STHAR_DOVFIAT\n       END AS kur,\n       STHAR_KOD1,\n       STHAR_SATISK*100000 AS STHAR_SATISK,\n       STHAR_MALFISK,\n       STHAR_SATISK2,\n       STRA_SATISK3,\n       STRA_SATISK4,\n       STRA_SATISK5,\n       STRA_SATISK6,\n       PROJE_KODU,\n\t   SIRA,\n\t   OLCUBR,\n\t   FISNO ,\n\t   STRA_SIPKONT,\n\t   ACIKLAMA1,\n\t   ACIKLAMA2,\n\t   ACIKLAMA3,\n\t   ACIKLAMA4,\n\t   ACIKLAMA5,\n\t   ACIKLAMA6,\n\t   ACIKLAMA7,\n\t   ACIKLAMA8,\n\t   ACIKLAMA9,\n\t   ACIKLAMA10,\n     PLASIYER_KODU,\n      A.STHAR_TESTAR,\n     A.STHAR_CARIKOD\n\t   \nFROM TBLSIPATRA A\nLEFT JOIN  TBLSSATIRAC SAC ON SAC.INCKEYNO= A.INCKEYNO\nWHERE STHAR_FTIRSIP=6 \n  AND FISNO='${msg.netsisDataPayload.FatUst.FATIRS_NO}' \n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 250,
        "wires": [
            [
                "4af6ca01524958dc"
            ]
        ]
    },
    {
        "id": "4af6ca01524958dc",
        "type": "subflow:d296b4008b6072d8",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "MssqlFatKalem",
        "x": 1070,
        "y": 300,
        "wires": [
            [
                "2d2984fa699fe0d4"
            ],
            [
                "e15a9f5e56dd1762"
            ]
        ]
    },
    {
        "id": "2d2984fa699fe0d4",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "SetFatKalem",
        "func": "let data = msg.payload;\nlet netsisDataItemList = msg.netsisDataPayload?.Kalems;\nlet netsisDataInvoice = msg.netsisDataPayload?.FatUst;\n\nlet errorDec=[];\n// Veri kontrolü\nif (Array.isArray(data) && data.length > 0 && Array.isArray(netsisDataItemList)) {\n    //bize gelen post isteğinden alıacak veri netsisDataItemList alınacak \n    netsisDataItemList.forEach(netsisDataItem => {\n        //gelen veri kısıtı ile alıacak  netsis sipariş datası netsisData\n        let netsisData = data.find(x => \n            x?.STOK_KODU == netsisDataItem?.StokKodu && \n            x?.SIRA == netsisDataItem?.Sira\n        );\n       \n        if (netsisData)\n         {\n           \n          \n            let itemData = {\n                StokKodu: netsisData.STOK_KODU,\n                Sira: netsisData.SIRA,\n                STra_GCMIK: netsisDataItem.STra_GCMIK,\n                STra_TAR: netsisDataInvoice.Tarih,\n                ...(netsisData.kur >0 ? {\n                    STra_NF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    STra_BF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    DOVIZ_TURU: netsisData.STHAR_DOVTIP,\n                    DOVTIP: netsisData.STHAR_DOVTIP,\n                    STra_DOVTIP: netsisData.STHAR_DOVTIP\n                    \n\n                }:{\n                    STra_NF: netsisData.STHAR_NF,\n                    STra_BF: netsisData.STHAR_BF\n                }),\n               \n                STra_SIPNUM: netsisData.FISNO,\n                ProjeKodu: netsisData.PROJE_KODU,\n                STra_SIPKONT:netsisData.STRA_SIPKONT,\n                Stra_IrsKont: netsisData.STRA_SIPKONT,\n                STra_HTUR: \"H\",\n                DEPO_KODU: netsisDataItem.DEPO_KODU,\n                Firmadovtut: netsisDataItem.STra_GCMIK,\n                STra_SatIsk: netsisData.STHAR_SATISK,\n                STra_SatIsk2: netsisData.STHAR_SATISK2,\n                STra_SatIsk3: netsisData.STRA_SATISK3,\n                STra_SatIsk4: netsisData.STRA_SATISK4,\n                STra_SatIsk5: netsisData.STRA_SATISK5,\n                STra_SatIsk6: netsisData.STRA_SATISK6,\n                STra_ODEGUN: netsisDataInvoice.ODEMEGUNU,\n                //SatirBaziAciks: Array.from({ length: 10 }, (_, i) => netsisData[`ACIKLAMA1${i+1}`]) ,\n                Plasiyer_Kodu: netsisData.PLASIYER_KODU,\n                Ekalanneden: netsisData.EKALAN_NEDEN,\n                Ekalan: netsisData.EKALAN,\n                Ekalan1: netsisData.EKALAN1,\n                STra_testar: netsisData.STHAR_TESTAR,\n                Olcubr: 1,\n                STra_CARI_KOD: netsisData.STHAR_CARIKOD,\n                STra_GC: \"C\",\n                Stra_FiiliTar: netsisDataInvoice.Tarih,\n                D_YEDEK10: netsisDataInvoice.Tarih\n\n            }\n           \n            //Check if the item already exists in kalems\n            let existingItemIndex = msg.netsisDataPayload.Kalems.findIndex(\n                item => item.StokKodu == netsisData.STOK_KODU && item.Sira == netsisData.SIRA\n            );\n           \n            if (existingItemIndex !== -1) {\n                // Null kontrolü ekle\n                if (msg.netsisDataPayload.Kalems[existingItemIndex]) {\n                    msg.netsisDataPayload.Kalems[existingItemIndex] = {\n                        ...msg.netsisDataPayload.Kalems[existingItemIndex],\n                        ...itemData\n                    };\n                }\n            }\n\n         }\n         else {\n            errorDec.push(`No record was found in Netsis for this order (${netsisDataInvoice.FATIRS_NO}).Stock Code: ${netsisDataItem?.StokKodu }`)\n            \n         }\n          \n\n          \n    });\n    if (errorDec.length > 0){\n        msg.payload = {\n            success: false,\n             errors: {\n                message: errorDec\n\n            }\n        };\n        msg.statusCode = 400;\n\n        return [null, msg]; // Hata durumu\n    }\n    msg.payload = msg.netsisDataPayload;\n    return [msg,null ]\n}  \n   \n  else {\n    // Hata mesajını düzenle\n    msg.payload = { success: false, errors: {\n        message: \"Data is either empty or not an array\" \n      \n    }};\n    msg.statusCode = 400;\n\n    return [null, msg]; // Hata durumu\n}\n\n\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 360,
        "wires": [
            [
                "991e7900be59744c"
            ],
            [
                "92454af63018d947"
            ]
        ]
    },
    {
        "id": "5e741f11bda748d9",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    success: false, errors: {\n        message: \"Error\",\n        query: msg.query\n    }\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 440,
        "wires": [
            [
                "92454af63018d947"
            ]
        ]
    },
    {
        "id": "e15a9f5e56dd1762",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    success: false, errors: {\n        message: \"Error\",\n        query: msg.query\n    }\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 400,
        "wires": [
            [
                "92454af63018d947"
            ]
        ]
    },
    {
        "id": "48f5877bd292bee0",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "ParamsCheck",
        "func": "let invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\n\nif (!invoiceNumber) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid OrderNo\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "1ffb1393454fad27"
            ],
            [
                "92454af63018d947"
            ]
        ]
    },
    {
        "id": "92454af63018d947",
        "type": "function",
        "z": "c1457f7fe69a15e3",
        "g": "4b9d29631a6a83c4",
        "name": "Res",
        "func": " msg.res=global.get('STNSWAY000V2_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 290,
        "wires": [
            [
                "f5eb9f583ee3fb82"
            ]
        ]
    },
    {
        "id": "4ffb24ea616b56ed",
        "type": "function",
        "z": "03cb704bd5b0b530",
        "name": "function 140",
        "func": "const utcNow = new Date(new Date().getTime() + (3 * 60 * 60 * 1000));\n// Get All Production\nlet data = msg.payload;\n\n// Varsayılan JSON yapısı\nconst documentData = {\n    Header: {\n        PrdDocNo: null,\n        StateObject: \"WAI\",\n        DocState: \"WAI\",\n        ProductionType: \"PR\",\n        Machine: null,\n        Shift: null,\n        ProductCode: null,\n        Version: null,\n        TargetOperationQty: null,\n        OperationUnit: null,\n        TargetMaterialQty: null,\n        MaterialQty: \"0\",\n        MaterialUnit: null,\n        TolerancePlusValue: \"0\",\n        ToleranceMinusValue: \"0\",\n        PartnerSales: null,\n        PartnerShipment: null,\n        PartnerInventory: null,\n        PostingOperationDocNo: null,\n        PostingDate: utcNow,\n        NewDate: utcNow,\n        UpdDate: null,\n        DocDate: utcNow,\n        ProductionDate: utcNow,\n        ValidityBeginDate: null,\n        ValidityEndDate: null,\n        DatePg01: utcNow,\n        DatePg02: utcNow,\n        NewUser: null,\n        UpdUser: null,\n        Batch: null,\n        SerialId: 0,\n        RefProductCode: null,\n        RefVersion: null,\n        RefPrdDocNo: null,\n        RefDlvDocNo: null,\n        InventoryDocNo: null,\n        Text: {\n            Text01: null,\n            Text02: null,\n            Text03: null,\n            Text04: null,\n            Text05: null,\n            Text06: null,\n            Text07: null,\n            Text08: null,\n            Text09: null\n        }\n    },\n    Items: \n        {\n            PrdDocNo: null,\n            PrdItemNo: null,\n            StateObject: null,\n            DocState: null,\n            ComponentId: null,\n            Machine: null,\n            MachineGroup: null,\n            TargetOperationQty: null,\n            OperationUnit: null,\n            TargetMaterialQty: null,\n            MaterialQty: null,\n            MaterialUnit: null,\n            TolerancePlusValue: null,\n            ToleranceMinusValue: null,\n            SubstitutionProductCode: null,\n            AlternativeProductCode: null,\n            PDisassemblyWaste: null,\n            NewUser: null,\n            UpdUser: null\n        }\n    ,\n    TaskItems: \n        {\n            PrdDocNo: null,\n            Task: null,\n            ComponentId: null,\n            TaskItemNo: null,\n            MaterialQuantity: null,\n            MaterialUnit: null,\n            PAutoConsumption: null,\n            Location: null\n        },\n    attributes: \n            {\n                attributeCode: null,\n                strValue: null,\n                dateValue: utcNow,\n                numValue: 0,\n                listedValue: null,\n                boolValue: true,\n                remoteName: null\n            }\n        \n    \n};\n\n// Helper function for null or undefined check\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Üretim verilerini dönüştür\nconst productionDataPayload = data.map(prod => ({\n    Header: {\n        PrdDocNo: getValueOrDefault(prod.ISEMRINO, documentData.Header.PrdDocNo),\n        StateObject: getValueOrDefault(null, documentData.Header.StateObject),\n        DocState: getValueOrDefault(null, documentData.Header.DocState),\n        ProductionType: getValueOrDefault(null, documentData.Header.ProductionType),\n        Machine: getValueOrDefault(null, documentData.Header.Machine),\n        Shift: getValueOrDefault(null, documentData.Header.Shift),\n        ProductCode: getValueOrDefault(prod.STOK_KODU, documentData.Header.ProductCode),\n        Version: getValueOrDefault(null, documentData.Header.Version),\n        TargetOperationQty: getValueOrDefault(prod.MIKTAR, documentData.Header.TargetOperationQty),\n        OperationUnit: getValueOrDefault(prod.OLCU_BR1, documentData.Header.OperationUnit),\n        TargetMaterialQty: getValueOrDefault(null, documentData.Header.TargetMaterialQty),\n        MaterialQty: getValueOrDefault(null, documentData.Header.MaterialQty),\n        MaterialUnit: getValueOrDefault(null, documentData.Header.MaterialUnit),\n        TolerancePlusValue: getValueOrDefault(null, documentData.Header.TolerancePlusValue),\n        ToleranceMinusValue: getValueOrDefault(null, documentData.Header.ToleranceMinusValue),\n        PostingDate: getValueOrDefault(null, documentData.Header.PostingDate), \n        NewDate: getValueOrDefault(prod.TARIH, documentData.Header.NewDate), \n        UpdDate: getValueOrDefault(null, documentData.Header.UpdDate), \n        DocDate: getValueOrDefault(prod.TARIH, documentData.Header.DocDate), \n        ProductionDate: getValueOrDefault(prod.TARIH, documentData.Header.ProductionDate), \n        ValidityBeginDate: getValueOrDefault(null, documentData.Header.ValidityBeginDate), \n        ValidityEndDate: getValueOrDefault(null, documentData.Header.ValidityEndDate),\n    },\n    Items: [{\n        PrdDocNo: getValueOrDefault(null, documentData.Items.PrdDocNo),\n        PrdItemNo: getValueOrDefault(null, documentData.Items.PrdItemNo),\n        StateObject: getValueOrDefault(null, documentData.Items.StateObject),\n        DocState: getValueOrDefault(null, documentData.Items.DocState),\n        ComponentId: getValueOrDefault(null, documentData.Items.ComponentId),\n        Machine: getValueOrDefault(null, documentData.Items.Machine),\n        MachineGroup: getValueOrDefault(null, documentData.Items.Machine),\n        TargetOperationQty: getValueOrDefault(prod.MIKTAR, documentData.Items.Machine),\n        OperationUnit: getValueOrDefault(null, documentData.Items.Machine),\n        TargetMaterialQty: getValueOrDefault(prod.MIKTAR, documentData.Items.Machine),\n        MaterialQty: getValueOrDefault(null, documentData.Items.MaterialQty),\n        MaterialUnit: getValueOrDefault(null, documentData.Items.MaterialUnit),\n        TolerancePlusValue: getValueOrDefault(null, documentData.Items.TolerancePlusValue ),\n        ToleranceMinusValue: getValueOrDefault(null, documentData.Items.ToleranceMinusValue),\n        SubstitutionProductCode: getValueOrDefault(null, documentData.Items.SubstitutionProductCode),\n        AlternativeProductCode: getValueOrDefault(null, documentData.Items.AlternativeProductCode),\n        PDisassemblyWaste: getValueOrDefault(null, documentData.Items.PDisassemblyWaste),\n        NewUser: getValueOrDefault(null, documentData.Items.NewUser),\n        UpdUser: getValueOrDefault(null, documentData.Items.UpdUser),\n    }],\n       TaskItems: [] ,\n    //     PrdDocNo: getValueOrDefault(null, documentData.TaskItems.PrdDocNo),\n    //     Task: getValueOrDefault(null, documentData.TaskItems.Task),\n    //     ComponentId: getValueOrDefault(null, documentData.TaskItems.ComponentId),\n    //     TaskItemNo: getValueOrDefault(null, documentData.TaskItems.TaskItemNo),\n    //     MaterialQuantity: getValueOrDefault(null, documentData.TaskItems.MaterialQuantity),\n    //     MaterialUnit: getValueOrDefault(null, documentData.TaskItems.MaterialUnit),\n    //     PAutoConsumption: getValueOrDefault(null, documentData.TaskItems.PAutoConsumption),\n    //     Location: getValueOrDefault(null, documentData.TaskItems.Location),\n    // } ,\n    attributes:[\n         {\n             AttributeCode: getValueOrDefault(\"ETIKET\", documentData.attributes.attributeCode) ,\n             StrValue: getValueOrDefault(prod.ReportItem, documentData.attributes.strValue) ,\n             DateValue: null,\n             NumValue: null,\n             ListedValue: null,\n             BoolValue: null,\n             RemoteName: getValueOrDefault(\"ETIKET DIZAYN\", documentData.attributes.remoteName) \n         },\n        {\n            AttributeCode: getValueOrDefault(\"PINARIHRSERINUM\", documentData.attributes.attributeCode),\n            StrValue: getValueOrDefault(prod.PNRSERINUM, documentData.attributes.strValue),\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: getValueOrDefault(\"PINAR IHRACAT SERI NUMARASI\", documentData.attributes.remoteName)\n        },\n        {\n            AttributeCode: getValueOrDefault(\"VARDIYA\", documentData.attributes.attributeCode),\n            StrValue: getValueOrDefault(prod.VARDIYA, documentData.attributes.strValue),\n            DateValue: null,\n            NumValue: null,\n            ListedValue: null,\n            BoolValue: null,\n            RemoteName: getValueOrDefault(\"VARDIYA\", documentData.attributes.remoteName)\n        }\n     ]\n}));\n\n\n\nconst result = {\n    requestId: \"\",\n    sender: \"node-red\",\n    data: productionDataPayload\n    \n};\nmsg.productionDataPayload=result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 90,
        "wires": [
            [
                "c6489662c8f86a78"
            ]
        ]
    },
    {
        "id": "43e53292a235d42b",
        "type": "subflow:d296b4008b6072d8",
        "z": "03cb704bd5b0b530",
        "name": "",
        "x": 610,
        "y": 90,
        "wires": [
            [
                "4ffb24ea616b56ed"
            ],
            []
        ]
    },
    {
        "id": "181071696f3f147c",
        "type": "function",
        "z": "03cb704bd5b0b530",
        "name": "GET PRODUCTIONDOC",
        "func": "// Environment variable'dan branchCode değerini al\nlet branchCode = env.get(\"BranchCode\");\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSPD000V1.0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \nISEMRINO,\nTARIH,\ndbo.trk(A.STOK_KODU) STOK_KODU,\nA.MIKTAR,\ndbo.TRK(ACIKLAMA)ACIKLAMA,\nTESLIM_TARIHI,\nA.DEPO_KODU,\nCIKIS_DEPO_KODU,\nSIPARIS_NO,\nSUBEKODU,\nB.KT_REPORT_ITEMS AS ReportItem,\nST.OLCU_BR1,\nB.KT_PINARIHRSIPNUM AS PNRSERINUM,\nB.KT_VARDIYA AS VARDIYA\n\n\nFROM  TBLISEMRI A\nJOIN TBLSTSABIT ST ON A.STOK_KODU=ST.STOK_KODU\nLEFT JOIN TBLISEMRIEK B ON A.ISEMRINO=B.ISEMRI WHERE \n   1=1  AND A.USK_STATUS !='T'\n \n`;\n\n \n\n\n// url'den gelen verilerde kısıt var ise sorguya ekleniyor\nlet paramsProductionDocNum = msg.isemri_DataKey;\n  \nif (paramsProductionDocNum !== undefined && paramsProductionDocNum !== null && paramsProductionDocNum !== '') {\n   \n  query += `AND ISEMRINO= '${paramsProductionDocNum}'`\n}\n\n// msg.payload'a sorguyu ekle\n\nmsg.query = query;\n \n\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "43e53292a235d42b",
                "f687bdb322850bbe"
            ]
        ]
    },
    {
        "id": "b78e1e5a32e427c0",
        "type": "subflow:e35d14410b661a09",
        "z": "03cb704bd5b0b530",
        "name": "ProductionDocSync",
        "env": [
            {
                "name": "Url",
                "value": "production/api/v1/Production/ProductionDoc/ProductionDocSync",
                "type": "str"
            }
        ],
        "x": 1250,
        "y": 80,
        "wires": [
            [],
            [
                "ec7e186eb684c097"
            ]
        ]
    },
    {
        "id": "c6489662c8f86a78",
        "type": "function",
        "z": "03cb704bd5b0b530",
        "name": "Check",
        "func": "\n\n// Assign msg.dataPayload to msg.sforinPartner\nmsg.dataPayload = msg.productionDataPayload;\nmsg.flowName = msg.inregrationFlowData.flowName || \"NTSPD000V1.0\";\n// Check if msg.payload is an array and if it's empty or has zero elements\nif (Array.isArray(msg.dataPayload) && msg.dataPayload.length === 0) {\n    // Send msg to the second output if the array is empty\n    return [null, msg];\n} else {\n    \n    return [msg, null];\n};\n\n\n\n\n\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 90,
        "wires": [
            [
                "b78e1e5a32e427c0"
            ],
            []
        ]
    },
    {
        "id": "f687bdb322850bbe",
        "type": "debug",
        "z": "03cb704bd5b0b530",
        "name": "debug 432",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 490,
        "wires": []
    },
    {
        "id": "0210b7973afea401",
        "type": "catch",
        "z": "03cb704bd5b0b530",
        "name": "",
        "scope": [
            "4ffb24ea616b56ed",
            "43e53292a235d42b",
            "181071696f3f147c",
            "b78e1e5a32e427c0",
            "c6489662c8f86a78"
        ],
        "uncaught": false,
        "x": 940,
        "y": 630,
        "wires": [
            []
        ]
    },
    {
        "id": "ec7e186eb684c097",
        "type": "debug",
        "z": "03cb704bd5b0b530",
        "name": "debug 460",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 120,
        "wires": []
    },
    {
        "id": "621ef3a4f60a0d1e",
        "type": "function",
        "z": "f56e4df3e14fab23",
        "name": "set index",
        "func": "msg.indexSyncTblisemri++\n\nmsg.errorMesaj= msg.errorMesaj || msg.payload?.detail || \"error\"\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.isemri_Id},'${msg.errorMesaj}'`;\nmsg.query = query;\nmsg.errorMesaj=null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 370,
        "wires": [
            [
                "e61cc966de89cdcc"
            ]
        ]
    },
    {
        "id": "773fc2d602181c03",
        "type": "subflow:03cb704bd5b0b530",
        "z": "f56e4df3e14fab23",
        "name": "",
        "x": 690,
        "y": 320,
        "wires": [
            [
                "333f69108596e3a5"
            ],
            [
                "621ef3a4f60a0d1e",
                "a29dd298e13b0142"
            ]
        ]
    },
    {
        "id": "e61cc966de89cdcc",
        "type": "subflow:d296b4008b6072d8",
        "z": "f56e4df3e14fab23",
        "name": "",
        "x": 1370,
        "y": 330,
        "wires": [
            [
                "5ee3829f60f5faaa"
            ],
            [
                "c94f2b4b0b42c4f8"
            ]
        ]
    },
    {
        "id": "8f1bc1012e9820b6",
        "type": "function",
        "z": "f56e4df3e14fab23",
        "name": "function 139",
        "func": "msg.indexSyncTblisemri = msg.indexSyncTblisemri ||0\nlet items = msg.dataPayloadSyncTblIsemri; \nlet index = msg.indexSyncTblisemri;\n\nif (!Array.isArray(items)) {\n   // node.error(\"items is not an array indexSyncTblSipmas\");\n    return [null, msg];\n}\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n    \n \n   \n    // Construct the URL dynamically using dataKey\n    msg.isemri_DataKey =items[index]?.DataKey;\n    msg.isemri_Id = items[index]?.ID;\n   \n    return [msg, null];\n\n}\n\n\n \n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 445,
        "y": 330,
        "wires": [
            [
                "773fc2d602181c03"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "333f69108596e3a5",
        "type": "function",
        "z": "f56e4df3e14fab23",
        "name": "set index",
        "func": "msg.indexSyncTblisemri++\n\n\nlet query = `exec UpdateS4IN_INTEGRATION_SYNC  ${msg.isemri_Id}`;\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "e61cc966de89cdcc"
            ]
        ]
    },
    {
        "id": "c94f2b4b0b42c4f8",
        "type": "function",
        "z": "f56e4df3e14fab23",
        "name": "function 138",
        "func": "msg.dataPayloadSyncTblIsemri = msg.dataPayloadSync; //// değişken olarak atmassam  TblIsemri Isemri içinde sürekli dataPayloadSync değişme ihtimali var  değişme ihtimali vardı\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 330,
        "wires": [
            [
                "8f1bc1012e9820b6"
            ]
        ],
        "l": false
    },
    {
        "id": "195d7159bb1b2e96",
        "type": "catch",
        "z": "f56e4df3e14fab23",
        "name": "",
        "scope": [
            "621ef3a4f60a0d1e",
            "773fc2d602181c03",
            "e61cc966de89cdcc",
            "8f1bc1012e9820b6",
            "333f69108596e3a5",
            "c94f2b4b0b42c4f8"
        ],
        "uncaught": false,
        "x": 650,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "2b5b3213a4e7d479",
        "type": "debug",
        "z": "f56e4df3e14fab23",
        "name": "debug 462",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 640,
        "wires": []
    },
    {
        "id": "a29dd298e13b0142",
        "type": "function",
        "z": "f56e4df3e14fab23",
        "name": "function 169",
        "func": "node.warn(\"!!!!!!!!!!!!!!!!!!!!\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 540,
        "wires": [
            [
                "2b5b3213a4e7d479"
            ]
        ]
    },
    {
        "id": "0dc5ba0548881405",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "e269717c57799658",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1290,
        "y": 440,
        "wires": [
            []
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "95810eda3d75023b",
        "type": "subflow:bb656f77f61addff",
        "z": "e269717c57799658",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "NOTRUNNING",
                "type": "str"
            }
        ],
        "x": 1260,
        "y": 380,
        "wires": [
            [
                "0dc5ba0548881405"
            ]
        ]
    },
    {
        "id": "1476501523c64e8c",
        "type": "subflow:0a4f4f9f59c2be20",
        "z": "e269717c57799658",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1250,
        "y": 240,
        "wires": [
            [
                "7510ef50f9f50c2f"
            ]
        ],
        "icon": "node-red/bridge.svg"
    },
    {
        "id": "4f31edba9bdfd7ce",
        "type": "subflow:bb656f77f61addff",
        "z": "e269717c57799658",
        "name": "",
        "env": [
            {
                "name": "status",
                "value": "RUNNING",
                "type": "str"
            }
        ],
        "x": 1180,
        "y": 180,
        "wires": [
            [
                "1476501523c64e8c"
            ]
        ]
    },
    {
        "id": "17c81f4c089ce04e",
        "type": "switch",
        "z": "e269717c57799658",
        "name": "",
        "property": "propIntegration.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 995,
        "y": 160,
        "wires": [
            [
                "4f31edba9bdfd7ce"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "389bb52865938176",
        "type": "function",
        "z": "e269717c57799658",
        "name": "function 141",
        "func": "let propIntegration = msg.payload;\n\n\n\nlet listAllIntegrationParameters = global.get('allIntegrationParameters');\n\n\nmsg.propIntegration = listAllIntegrationParameters.find(x => x.code === propIntegration.code);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 925,
        "y": 160,
        "wires": [
            [
                "17c81f4c089ce04e"
            ]
        ],
        "l": false
    },
    {
        "id": "23b8563b0233b2de",
        "type": "cronplus",
        "z": "e269717c57799658",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 750,
        "y": 160,
        "wires": [
            [
                "389bb52865938176"
            ]
        ]
    },
    {
        "id": "bd33003e80a09d8a",
        "type": "function",
        "z": "e269717c57799658",
        "name": "Set Cron",
        "func": "let cronProp = global.get('allIntegrationParameters').find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n \n \n\nmsg.payload =cronProp;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            [
                "389bb52865938176"
            ]
        ]
    },
    {
        "id": "1e28bbe5ba3661dc",
        "type": "function",
        "z": "e269717c57799658",
        "name": "Set Cron",
        "func": "let cronProp = msg.payload;\n\nmsg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": cronProp.cron,\n    \"payloadType\": \"json\",\n    \"payload\":cronProp \n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 200,
        "wires": [
            [
                "23b8563b0233b2de"
            ]
        ]
    },
    {
        "id": "6b923536dc1ff78d",
        "type": "switch",
        "z": "e269717c57799658",
        "name": "trigger_type_Manuel",
        "property": "manuel",
        "propertyType": "env",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 280,
        "wires": [
            [
                "1e28bbe5ba3661dc"
            ],
            [
                "bd33003e80a09d8a"
            ]
        ]
    },
    {
        "id": "ea3b9ea1851ccce5",
        "type": "switch",
        "z": "e269717c57799658",
        "name": "",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "RUNNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 380,
        "y": 220,
        "wires": [
            [
                "6b923536dc1ff78d"
            ]
        ]
    },
    {
        "id": "7510ef50f9f50c2f",
        "type": "subflow:19476c64dff52355",
        "z": "e269717c57799658",
        "name": "STNRI000V1.0",
        "x": 1240,
        "y": 310,
        "wires": [
            [
                "95810eda3d75023b"
            ],
            [
                "95810eda3d75023b"
            ]
        ]
    },
    {
        "id": "ff811ca4c29d6655",
        "type": "function",
        "z": "19476c64dff52355",
        "g": "a260dd7ead858d39",
        "name": "GetAllDocumentTypes",
        "func": "// @ALANADI ALANI NETSISTE NE DIYE ACIKDIYSA O ALAN O ISIM GELICEK\n\nmsg.getAllReportItemsrPayload = msg.payload.data.map(x =>{\n\n   return `\n    DECLARE @ALANADI NVARCHAR(255) = 'KT_REPORT_ITEMS' -- Eklenecek alan adı\n    DECLARE @DEGER NVARCHAR(255) = '${x.name}' -- Eklenecek değer\n \n\n    IF NOT EXISTS (SELECT 1 FROM TBLURTYENIALANDEGER WHERE DEGER = @DEGER AND ALANADI=@ALANADI)\n    BEGIN\n        DECLARE @MaxGOSTERSIRARSI INT\n        SELECT @MaxGOSTERSIRARSI = ISNULL(MAX(GOSTERSIRASI), 0) + 1 FROM TBLURTYENIALANDEGER\n\n        INSERT INTO TBLURTYENIALANDEGER (ALANADI, GOSTERSIRASI, DEGER, TIP)\n        VALUES (@ALANADI, @MaxGOSTERSIRARSI, @DEGER, '2')\n    END\n\n \n    `\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "81635a958b45d037"
            ]
        ]
    },
    {
        "id": "a1d34f3b1faac279",
        "type": "comment",
        "z": "19476c64dff52355",
        "g": "a260dd7ead858d39",
        "name": "GetAllSFORINGetAllDocumentTypes",
        "info": "",
        "x": 640,
        "y": 150,
        "wires": []
    },
    {
        "id": "6eee1db3b92634ae",
        "type": "subflow:e35d14410b661a09",
        "z": "19476c64dff52355",
        "g": "a260dd7ead858d39",
        "name": "",
        "env": [
            {
                "name": "Url",
                "value": "company/api/v1/company/ReportItem/GetAllReportItems",
                "type": "str"
            }
        ],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "ff811ca4c29d6655"
            ],
            []
        ]
    },
    {
        "id": "eb7d82aeea335f8a",
        "type": "function",
        "z": "19476c64dff52355",
        "g": "a260dd7ead858d39",
        "name": "function 143",
        "func": "msg.flowName = msg?.inregrationFlowData?.flowName || \"STNRI000V1.0\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 565,
        "y": 220,
        "wires": [
            [
                "6eee1db3b92634ae"
            ]
        ],
        "l": false
    },
    {
        "id": "81635a958b45d037",
        "type": "function",
        "z": "19476c64dff52355",
        "g": "a260dd7ead858d39",
        "name": "function 144",
        "func": "msg.getAllReportItemsrPayload.forEach(query => {\n    let newMsg = { ...msg };\n    newMsg.query = query;\n    node.send(newMsg);\n});\n\nreturn;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 220,
        "wires": [
            [
                "2d6789fff4bdf3f1"
            ]
        ]
    },
    {
        "id": "2d6789fff4bdf3f1",
        "type": "subflow:d296b4008b6072d8",
        "z": "19476c64dff52355",
        "g": "a260dd7ead858d39",
        "name": "",
        "x": 1400,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "67e2f88fa8d25a8f",
        "type": "function",
        "z": "23b1b01cc4ce5a0d",
        "name": "new v2",
        "func": "// MongoDB veri işleme ve bağlantı fonksiyonu\nlet mongoData = null;\nlet allIntegrationCode = global.get('allIntegrationCode');\nconst isDubug = msg?.propIntegration?.isDebugMode || false; // default false\nmsg.isDubug = isDubug;\n\n// MongoDB config kontrolü\nif (!allIntegrationCode) {\n    node.error(\"Integration codes not found\");\n    return null;\n}\nmongoData = allIntegrationCode.find(item => item.path === env.get('MongoDbNamePath'));\nif (!mongoData) {\n    node.error(\"MongoDB configuration not found for path: \" + env.get('MongoDbNamePath'));\n    return null;\n}\n\n// Koleksiyon kontrolü\nconst collectionName = env.get('collection');\nif (!collectionName) {\n    node.error(\"Collection name not specified\");\n    return null;\n}\n\n// MongoDB client kontrolü\nconst mongodb = global.get('mongodb');\nif (!mongodb) {\n    node.error(\"MongoDB client not found in global context\");\n    return null;\n}\n\n// Bağlantı bilgileri\nconst user = mongoData.user ? encodeURIComponent(mongoData.user) : '';\nconst password = mongoData.pass ? encodeURIComponent(mongoData.pass) : '';\nconst host = mongoData.server;\nconst database = mongoData.database;\n\nif (!host) {\n    node.error(\"Server information is missing. Available fields: \" + Object.keys(mongoData).join(\", \"));\n    return null;\n}\n\n// Kullanıcı/şifre yoksa URI'yi ona göre kur\nconst hasAuth = !!(user && password);\nconst creds = hasAuth ? `${user}:${password}@` : '';\nconst uri = `mongodb://${creds}${host}/${database}${hasAuth ? '?authSource=admin' : ''}`;\n\n// Parametreler\nconst IsUpdated = !!env.get('IsUpdated');         // updateMany modu\nconst IsDelete = !!env.get('IsDelete');          // delete modu\n\nconst rawQuery = (msg.query && msg.query !== \"\") ? msg.query : env.get('query');\n\nif (isDubug) {\n    msg.reqQuery = rawQuery;\n    msg.reqFlags = { IsUpdated, IsDelete };\n}\n\n// Yardımcı: güvenli JSON parse\nfunction parseJSONSafe(v) {\n    if (typeof v === \"string\") {\n        try { return JSON.parse(v); } catch (e) {\n            throw new Error(\"Query JSON parse failed: \" + e.message);\n        }\n    }\n    return v;\n}\n\n// Ana işlem\nlet client;\ntry {\n    mongodb.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })\n        .then(_client => {\n            client = _client;\n            const db = client.db(database);\n            const coll = db.collection(collectionName);\n\n            // 1) UPDATE\n            if (IsUpdated) {\n                // Beklenen format: { update: { filter: {...}, update: {...}, options?: {...} } }\n                const q = parseJSONSafe(rawQuery);\n                const upd = q?.update;\n                if (!upd || !upd.filter || !upd.update) {\n                    throw new Error(\"Update mode requires: { update: { filter: {...}, update: {...}, options?: {...} } }\");\n                }\n                const { filter, update, options } = upd;\n                return coll.updateMany(filter, update, options || {});\n            }\n\n            // 2) DELETE\n            if (IsDelete) {\n                // Desteklenen formatlar:\n                //  a) Basit filtre: { Location: \"...\" }\n                //  b) Ayrıntılı: { filter: {...}, options?: {...} }\n                const del = parseJSONSafe(rawQuery) || {};\n                const filter = del.filter ?? del; // filter alanı yoksa objenin kendisini filtre say\n                const options = del.options || {};               \n\n                if (!filter || typeof filter !== 'object' || Array.isArray(filter)) {\n                    throw new Error(\"Delete filter must be an object. Given: \" + JSON.stringify(filter));\n                }\n\n                \n                return coll.deleteMany(filter, options);\n            }\n\n            // 3) AGGREGATE (default)\n            // Beklenen: pipeline array (ör. [{ $match: {...} }, { $project: {...} }])\n            const pipeline = parseJSONSafe(rawQuery);\n            if (!Array.isArray(pipeline)) {\n                throw new Error(\"Aggregate mode requires an array pipeline. Given: \" + typeof pipeline);\n            }\n            return coll.aggregate(pipeline).toArray();\n        })\n        .then(result => {\n            // Başarılı sonuç\n            msg.payload = result;\n            node.send([msg, null]);\n        })\n        .catch(err => {\n            // Hata durumu\n            msg.error = 'MongoDB Error: ' + err.message;\n            msg.errorDescription = msg.error;\n            node.send([null, msg]);\n            node.error(err.message);\n        })\n        .finally(() => {\n            if (client) {\n                try { client.close(); } catch (e) { /* ignore */ }\n            }\n        });\n} catch (err) {\n    // Genel hata\n    msg.error = 'Connection Error: ' + err.message;\n    msg.errorDescription = msg.error;\n    node.send([null, msg]);\n    node.error(err.message);\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 150,
        "wires": [
            [
                "51911e9551844dcd"
            ],
            [
                "d4c86b9bd908c1f6"
            ]
        ]
    },
    {
        "id": "51911e9551844dcd",
        "type": "function",
        "z": "23b1b01cc4ce5a0d",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg || {}; // Ensure payload is an object\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"MongoDb request seccues\" || \"\",\n   // dataType: 2, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult:0 , // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: null, // Status code from msg\n    duration: null, // Duration object\n    flowName: msg.flowName || \"\",  \n    additionalData: \"\", // Extra info    \n    requestPayload: result.isDubug == true ? result.reqQuery:\"\",\n    responsePayload: result.isDubug == true ? JSON.stringify(msg.payload) :\"\"\n}];\n \n \n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 150,
        "wires": [
            [
                "132b39a2a08bc51a"
            ]
        ]
    },
    {
        "id": "d4c86b9bd908c1f6",
        "type": "function",
        "z": "23b1b01cc4ce5a0d",
        "name": "LogJson",
        "func": "// Access the incoming payload and status code\nlet result = msg || {}; // Ensure payload is an object\n\n// Populate the data object dynamically\nconst data = [{\n    dataKey: \"MongoDb request failed\" || \"\",\n   // dataType: 2, // Use payload dataType if available\n    date: new Date().toISOString(), // Current timestamp\n    message: result?.definitionLang || \"\", // Fallback message\n    jobResult:2 || 2, // Job result from payload or default\n    integrationName: \"\" || \"\", // Integration name\n    httpStatusCode: null, // Status code from msg\n    duration: null, // Duration object\n    additionalData: \"\", // Extra info   \n    flowName: msg.flowName || \"\",   \n    requestPayload: result.isDubug == true ? result.reqQuery:\"\",\n    responsePayload: result.isDubug == true ? `${result?.error} \\n ${result?.errorDescription }` :\"\"\n}];\n \n\n// Attach the data object to msg for further use\nmsg.logData = data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 200,
        "wires": [
            [
                "132b39a2a08bc51a"
            ]
        ]
    },
    {
        "id": "132b39a2a08bc51a",
        "type": "subflow:7cdf28f23984a61d",
        "z": "23b1b01cc4ce5a0d",
        "name": "",
        "env": [
            {
                "name": "sourceModule/Flow",
                "value": "MSSQL Connection",
                "type": "str"
            },
            {
                "name": "sourceSystem",
                "value": "Sql Connection",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            }
        ],
        "x": 930,
        "y": 170,
        "wires": [
            []
        ]
    },
    {
        "id": "88a8216ec9368435",
        "type": "function",
        "z": "23b1b01cc4ce5a0d",
        "d": true,
        "name": "old v1",
        "func": "// MongoDB veri işleme ve bağlantı fonksiyonu\nlet mongoData = null;\nlet allIntegrationCode = global.get('allIntegrationCode');\nconst isDubug = msg?.propIntegration?.isDebugMode || false; //default false\nmsg.isDubug = isDubug;\n// MongoDB config kontrolü\nif (!allIntegrationCode) {\n    node.error(\"Integration codes not found\");\n    return null;\n}\nmongoData = allIntegrationCode.find(item => item.path === env.get('MongoDbNamePath'));\n\nif (!mongoData) {\n    node.error(\"MongoDB configuration not found for path: \" + env.get('MongoDbNamePath'));\n    return null;\n}\n// Koleksiyon \nif (!env.get('collection')) {\n    node.error(\"Collection name not specified\");\n    return null;\n}\n// MongoDB bağlantı nesnesi kontrolü\nconst mongodb = global.get('mongodb');\nif (!mongodb) {\n    node.error(\"MongoDB client not found in global context\");\n    return null;\n}\n\n// Bağlantı bilgilerini hazırla - Server yerine server kontrolü ekledim\nconst user = mongoData.user ? encodeURIComponent(mongoData.user) : '';\nconst password = mongoData.pass ? encodeURIComponent(mongoData.pass) : '';\nconst host = mongoData.server;\nconst database = mongoData.database;\n\n\n// Bağlantı bilgilerinin kontrolü\nif (!host) {\n    node.error(\"Server information is missing. Available fields: \" + Object.keys(mongoData).join(\", \"));\n    return null;\n}\nconst uri = `mongodb://${user}:${password}@${host}/${database}?authSource=admin`;\n \nconst query = (msg.query && msg.query !== \"\") ? msg.query : env.get('query');\n\nif (isDubug) {\n    msg.reqQuery = query;\n}\n\n// Ana işlem\ntry {\n    // MongoDB'ye bağlan\n    mongodb.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })\n        .then(client => {\n            const db = client.db(database);\n            const coll = db.collection(env.get('collection'));\n            if (env.get('IsUpdated'))\n            {\n                // Gelen update objesi: { filter: {...}, update: {...}, options: {...} }\n                const updateData = typeof query === \"string\" ? JSON.parse(query) : query;\n                const { filter, update, options } = updateData.update;\n\n                return coll.updateMany(filter, update, options || {});\n            }\n            // aggregate çağrısını modern API'ye uygun hale getirelim\n            return coll.aggregate(JSON.parse(query)).toArray();\n        })\n        .then(result => {\n            // Başarılı sonuç\n            msg.payload = result;\n            node.send([msg, null]);\n        })\n        .catch(err => {\n            // Hata durumu\n            msg.error = 'MongoDB Error: ' + err.message;\n            msg.errorDescription = msg.error;\n            node.send([null, msg]);\n            node.error(err.message);\n        });\n} catch (err) {\n    // Genel hata durumu\n    msg.error = 'Connection Error: ' + err.message;\n    msg.errorDescription = msg.error;\n    node.send([null, msg]);\n    node.error(err.message);\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 90,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "21f11f421b21c5f2",
        "type": "subflow:9ef239d14888af27",
        "z": "1bd2a61f8400e469",
        "name": "STNBWAY000V1",
        "x": 830,
        "y": 110,
        "wires": [
            [
                "e70015ba24feb483"
            ],
            [
                "dc9bfe6f028800a7"
            ]
        ]
    },
    {
        "id": "c57f2343d8330588",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "1bd2a61f8400e469",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Movement",
                "type": "str"
            }
        ],
        "x": 445,
        "y": 130,
        "wires": [
            [
                "5fe17ef42c1afeb2"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "5df29750d100a86f",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "1bd2a61f8400e469",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Purchase_Waybill",
                "type": "str"
            }
        ],
        "x": 435,
        "y": 90,
        "wires": [
            [
                "c57f2343d8330588"
            ]
        ],
        "l": false
    },
    {
        "id": "8b82a634d1df4cf9",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "d": true,
        "name": "MongoQuery",
        "func": "const query = ` \n[\n  {\n    \"$unwind\": {\n      \"path\": \"$Items\",\n      \"preserveNullAndEmptyArrays\": true\n    }\n  },\n  {\n    \"$match\": {\n      \"$and\": [\n        { \"DocNum\": \"${msg.netsisDataPayload.FatNo}\" },\n        { \"Items.ProductCode\":\"${msg.netsisDataPayload.Material}\" },\n        {\"Items.ItemNo\":${msg.netsisDataPayload.OrderLineNo} }\n      ]\n    }\n  },\n   {\n    \"$lookup\": {\n      \"from\": \"DocumentQuantity\",\n      \"let\": { \"docNum\": \"$DocNum\", \"itemNo\": \"$Items.ItemNo\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$DocNum\", \"$$docNum\"] },\n                { \"$eq\": [\"$ItemNo\", \"$$itemNo\"] }\n              ]\n            }\n          }\n        }],\n      \"as\": \"quantityData\"\n    }\n  },\n  {\n      \"$unwind\":\"$quantityData\"\n  },\n  \n    {\n    \"$lookup\": {\n      \"from\": \"Partner\",\n      \"localField\": \"DocCompanies.BoughtFrom\",\n      \"foreignField\": \"Code\",\n      \"as\": \"PartnerDetails\"\n    }\n  },\n  {\n    \"$unwind\": {\n      \"path\": \"$PartnerDetails\",\n      \"preserveNullAndEmptyArrays\": true\n    }\n  },\n   {\n    \"$addFields\": {\n      \"TESLIM_TARIHI\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$Items.DocumentItemAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeCode\", \"TESLIM_TARIHI\"] }\n                }\n              },\n              0\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$unwind\": {\n      \"path\": \"$TESLIM_TARIHI\",\n      \"preserveNullAndEmptyArrays\": true  \n    }\n  },\n  \n   {\n    \"$lookup\": {\n      \"from\": \"Stock\",\n      \"let\": { \"docNum\": \"$DocNum\", \"itemNo\": \"$Items.ItemNo\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$DocumentNo\", \"$$docNum\"] },\n                { \"$eq\": [\"$DocumentItemNo\", \"$$itemNo\"] }\n              ]\n            }\n          }\n        }],\n      \"as\": \"StockData\"\n    }\n  },\n  {\n      \"$match\":{\"quantityData.UnloadingQuantity\":{\"$gt\":0}}\n  },\n  {\n  \"$addFields\": {\n    \"firstStockLocation\": {\n      \"$cond\": {\n        \"if\": { \"$isArray\": \"$StockData.Location\" },\n        \"then\": { \"$arrayElemAt\": [\"$StockData.Location\", 0] },\n        \"else\": \"$StockData.Location\"\n      }\n    }\n  }\n},\n    {\n    \"$lookup\": {\n      \"from\": \"Location\",\n      \"let\": { \"targetLocationId\": \"$firstStockLocation\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$eq\": [\n                \"$$targetLocationId\",\n                { \"$toString\": \"$_id\" }\n              ]\n            }\n          }\n        }\n      ],\n      \"as\": \"LocationInfo\"\n    }\n  },\n  {\n    \"$unwind\": {\n      \"path\": \"$LocationInfo\",\n      \"preserveNullAndEmptyArrays\": true\n    }\n  }, \n  {\n  \"$lookup\": {\n    \"from\": \"Movement\",\n    \"let\": { \"documentNo\": \"$DocNum\", \"documentItemNo\": \"$Items.ItemNo\" },\n    \"pipeline\": [\n      {\n        \"$match\": {\n          \"$expr\": {\n            \"$and\": [\n              { \"$eq\": [\"$DocumentNo\", \"$$documentNo\"] },\n              { \"$eq\": [\"$DocumentItemNo\", \"$$documentItemNo\"] },\n              { \"$ne\": [\"$TargetInventoryState\", \"SPC\"] }\n            ]\n          }\n        }\n      }\n    ],\n    \"as\": \"movementInfo\"\n  }\n},\n{\n  \"$addFields\": {\n    \"DispatchNoteNumber\": {\n      \"$let\": {\n        \"vars\": {\n          \"dispatchAttr\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": {\n                    \"$reduce\": {\n                      \"input\": \"$movementInfo\",\n                      \"initialValue\": [],\n                      \"in\": { \"$concatArrays\": [\"$$value\", \"$$this.TransactionAttributes\"] }\n                    }\n                  },\n                  \"as\": \"attr\",\n                  \"cond\": { \"$eq\": [\"$$attr.AttributeName\", \"DispatchNoteNumber\"] }\n                }\n              },\n              0\n            ]\n          }\n        },\n        \"in\": \"$$dispatchAttr.AttributeValue\"\n      }\n    },\n    \"DispatchNoteDate\": {\n      \"$let\": {\n        \"vars\": {\n          \"dispatchAttr\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": {\n                    \"$reduce\": {\n                      \"input\": \"$movementInfo\",\n                      \"initialValue\": [],\n                      \"in\": { \"$concatArrays\": [\"$$value\", \"$$this.TransactionAttributes\"] }\n                    }\n                  },\n                  \"as\": \"attr\",\n                  \"cond\": { \"$eq\": [\"$$attr.AttributeName\", \"DispatchNoteDate\"] }\n                }\n              },\n              0\n            ]\n          }\n        },\n        \"in\": \"$$dispatchAttr.AttributeValue\"\n      }\n    }\n  }\n},\n{\n  \"$addFields\": {\n    \"DispatchNoteDate\": {\n      \"$dateToString\": {\n        \"format\": \"%Y-%m-%d\",\n        \"date\": {\n          \"$dateFromString\": {\n            \"dateString\": \"$DispatchNoteDate\",\n            \"format\": \"%m/%d/%Y %H:%M:%S\"\n          }\n        }\n      }\n    }\n  }\n},\n\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"header\": {\n        \"OrderNo\": \"$DocNum\",\n        \"Date\":{\n        \"$dateToString\": {\n           \"format\": \"%Y-%m-%d\",\n          \"date\": \"$TESLIM_TARIHI.DateValue\"\n        }\n            },\n        \"PartnerCode\": \"$PartnerDetails.Code\",\n         \"DispatchNoteNumber\":\"$DispatchNoteNumber\",\n        \"DispatchNoteDate\":\"$DispatchNoteDate\"\n      },\n        \"Items\":[ {\n        \"ItemNo\": {\n          \"$toString\": {\n            \"$cond\": {\n              \"if\": { \"$isArray\": \"$Items.ItemNo\" },\n              \"then\": { \"$arrayElemAt\": [\"$Items.ItemNo\", 0] },\n              \"else\": \"$Items.ItemNo\"\n            }\n          }\n        },\n        \"Material\": {\n          \"$cond\": {\n            \"if\": { \"$isArray\": \"$Items.ProductCode\" },\n            \"then\": { \"$arrayElemAt\": [\"$Items.ProductCode\", 0] },\n            \"else\": \"$Items.ProductCode\"\n          }\n        },\n       \"Quantity\": {\n              \"$convert\": {\n                \"input\": {\n                  \"$cond\": {\n                    \"if\": { \"$isArray\": \"$quantityData.UnloadingQuantity\" },\n                    \"then\": { \"$arrayElemAt\": [\"$quantityData.UnloadingQuantity\", 0] },\n                    \"else\": \"$quantityData.UnloadingQuantity\"\n                  }\n                },\n                \"to\": \"double\"\n              }\n            },\n\n        \"Unit\": {\n          \"$cond\": {\n            \"if\": { \"$isArray\": \"$Items.BaseUnit\" },\n            \"then\": { \"$arrayElemAt\": [\"$Items.BaseUnit\", 0] },\n            \"else\": \"$Items.BaseUnit\"\n          }\n        },\n        \"OrderLineNo\": {\n          \"$cond\": {\n            \"if\": { \"$isArray\": \"$Items.ItemNo\" },\n            \"then\": { \"$arrayElemAt\": [\"$Items.ItemNo\", 0] },\n            \"else\": \"$Items.ItemNo\"\n          }\n        },\n        \"WarehouseCode\":\"$LocationInfo.Code\"\n      }]\n    }\n  } \n]\n\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 50,
        "wires": [
            []
        ],
        "info": "Document tablosu referans alarak tasarlandı okutulan mıktardan quantity celiliyordu \r\nparçalı irsaliye işlemi oldugundan revize edildi  pasife ceçildi"
    },
    {
        "id": "6ad4e63a61c9089b",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "Map",
        "func": "// Eşleştirme için kullanılan nesne\nconst netsisData = {\n    FatNo: \"documentNo\",\n    OrderLineNo: \"documentItemNo\",\n    Material: \"productCode\",\n};\n\n// Gelen veriyi kontrol et\nconst data = msg.req?.body?.Data;\nif (!Array.isArray(data)) {\n    node.error(\"Data dizisi bulunamadi veya geçersiz\", msg);\n    return null;\n}\n\n// Sonucu oluştur\nconst result = Object.keys(netsisData).reduce((acc, key) => {\n    const field = netsisData[key];\n    const foundItem = data.find(x => x.attributeSyncField === field);\n    if (foundItem) {\n        acc[key] = foundItem.attributeValue;\n    }\n    return acc;\n}, {});\n\n// Çıktıyı ayarla\nmsg.netsisDataPayload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "9fa0455c9c44b0dd"
            ]
        ]
    },
    {
        "id": "5a72081df7313a1a",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "re",
        "func": "global.set('STNBWAY000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 105,
        "y": 70,
        "wires": [
            [
                "6ad4e63a61c9089b"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "e70015ba24feb483",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "CloseOrderStatusUpdate",
        "func": " \n                                        // FISNO,STOKKODU,KALEMSIRA\n//  EXEC  S4INCloseOrderStatusUpdate 'TEST00000000004', '70049', 1\n \n msg.index = msg.index+1;\nlet query = ` EXEC  S4INCloseOrderStatusUpdate '${msg.netsisDataPayload.Kalems[0].STra_SIPNUM}','${msg.netsisDataPayload.Kalems[0].StokKodu}', ${msg.netsisDataPayload.Kalems[0].Sira }`;\n\nnode.warn(\"11111111111111\");\n\nnode.warn(query);\nmsg.query = query;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "7e9d458f7dfede83"
            ]
        ]
    },
    {
        "id": "7e9d458f7dfede83",
        "type": "subflow:d296b4008b6072d8",
        "z": "1bd2a61f8400e469",
        "name": "",
        "x": 1335,
        "y": 60,
        "wires": [
            [
                "8884be601ef59152",
                "88d50ae0020f16cd"
            ],
            []
        ],
        "l": false,
        "info": "CREATE PROCEDURE  S4INCloseOrderStatusUpdate\r\n    @FisNo NVARCHAR(50),\r\n    @StokKodu NVARCHAR(50),\r\n    @Sira INT\r\n    \r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\r\n    UPDATE TBLSIPATRA\r\n    SET STHAR_HTUR = 'K'\r\n    WHERE FISNO = @FisNo \r\n      AND STOK_KODU = @StokKodu \r\n      AND SIRA = @Sira;\r\n\r\n\r\n\t \r\nEND;\r\n"
    },
    {
        "id": "dc9bfe6f028800a7",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "function 153",
        "func": "msg.query = `[\n    {\n        \"$match\": {\n            \"DocNum\": \"${msg.netsisDataPayload.FatUst.FATIRS_NO}\"\n        }\n    },\n    {\n        \"$set\": {\n            \"State\": {\n                \"$mergeObjects\": [\n                    \"$State\",\n                    {\n                        \"ProcessingState\": {\n                            \"$cond\": {\n                                \"if\": { \"$eq\": [\"$State.ProcessingState\", \"ISS\"] },\n                                \"then\": \"PRC\",\n                                \"else\": \"$State.ProcessingState\"\n                            }\n                        }\n                    }\n                ]\n            },\n            \"Items\": {\n                \"$map\": {\n                    \"input\": \"$Items\",\n                    \"as\": \"item\",\n                    \"in\": {\n                        \"$mergeObjects\": [\n                            \"$$item\",\n                            {\n                                \"$cond\": {\n                                    \"if\": { \"$eq\": [\"$$item.ItemNo\", ${msg.netsisDataPayload.Kalems[0].Sira}] },\n                                    \"then\": { \"State\": { \"$mergeObjects\": [\"$$item.State\", { \"ProcessingState\": \"PRC\" }] } },\n                                    \"else\": \"$$item\"\n                                }\n                            }\n                        ]\n                    }\n                }\n            }\n        }\n    },\n    {\n        \"$merge\": {\n            \"into\": \"Document\",\n            \"on\": \"_id\",\n            \"whenMatched\": \"merge\",\n            \"whenNotMatched\": \"discard\"\n        }\n    }\n]\n\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 130,
        "wires": [
            [
                "01e5ad7224792174"
            ]
        ],
        "info": "hatali bir işlem ise kapalı olan kalemi acik duruma alıyoruz"
    },
    {
        "id": "01e5ad7224792174",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "1bd2a61f8400e469",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Document",
                "type": "str"
            }
        ],
        "x": 1295,
        "y": 120,
        "wires": [
            [
                "6f12fc909f7caff0"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "9fa0455c9c44b0dd",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "MongoQueryV2",
        "func": "const query = `[\n  {\n    \"$match\": {\n      \"DocumentNo\": \"${msg.netsisDataPayload.FatNo}\",\n      \"DocumentItemNo\": ${msg.netsisDataPayload.OrderLineNo},\n      \"ProductCode\": \"${msg.netsisDataPayload.Material}\",\n      \"SourceInventoryState\":\"SPC\",\n      \"TargetInventoryState\":\"UNL\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"DispatchNoteNumber\": {\n        \"$let\": {\n          \"vars\": {\n            \"attr\": {\n              \"$arrayElemAt\": [\n                {\n                  \"$filter\": {\n                    \"input\": \"$TransactionAttributes\",\n                    \"as\": \"a\",\n                    \"cond\": { \"$eq\": [\"$$a.AttributeName\", \"DispatchNoteNumber\"] }\n                  }\n                },\n                0\n              ]\n            }\n          },\n          \"in\": \"$$attr.AttributeValue\"\n        }\n      },\n      \"DispatchNoteDateRaw\": {\n        \"$let\": {\n          \"vars\": {\n            \"attr\": {\n              \"$arrayElemAt\": [\n                {\n                  \"$filter\": {\n                    \"input\": \"$TransactionAttributes\",\n                    \"as\": \"a\",\n                    \"cond\": { \"$eq\": [\"$$a.AttributeName\", \"DispatchNoteDate\"] }\n                  }\n                },\n                0\n              ]\n            }\n          },\n          \"in\": \"$$attr.AttributeValue\"\n        }\n      }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"DocNum\": \"$DocumentNo\",\n        \"ItemNo\": \"$DocumentItemNo\",\n        \"DispatchNoteNumber\": \"$DispatchNoteNumber\"\n      },\n      \"TotalQuantity\": { \"$sum\": \"$BaseQuantity\" },\n      \"DispatchNoteDateRaw\": { \"$first\": \"$DispatchNoteDateRaw\" },\n      \"ProductCode\": { \"$first\": \"$ProductCode\" },\n      \"BaseUnit\": { \"$first\": \"$BaseUnit\" },\n      \"TargetLocation\": { \"$first\": \"$TargetLocation\" }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"DocNum\": \"$_id.DocNum\",\n      \"ItemNo\": \"$_id.ItemNo\",\n      \"DispatchNoteNumber\": \"$_id.DispatchNoteNumber\"\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Document\",\n      \"let\": { \"docNum\": \"$DocNum\", \"itemNo\": \"$ItemNo\" },\n      \"pipeline\": [\n        { \"$unwind\": \"$Items\" },\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$DocNum\", \"$$docNum\"] },\n                { \"$eq\": [\"$Items.ItemNo\", \"$$itemNo\"] }\n              ]\n            }\n          }\n        },\n        {\n          \"$addFields\": {\n            \"TESLIM_TARIHI\": {\n              \"$let\": {\n                \"vars\": {\n                  \"attributes\": { \"$ifNull\": [\"$Items.DocumentItemAttributes\", []] }\n                },\n                \"in\": {\n                  \"$arrayElemAt\": [\n                    {\n                      \"$filter\": {\n                        \"input\": \"$$attributes\",\n                        \"as\": \"attr\",\n                        \"cond\": { \"$eq\": [\"$$attr.AttributeCode\", \"TESLIM_TARIHI\"] }\n                      }\n                    },\n                    0\n                  ]\n                }\n              }\n            },\n            \"PartnerCode\": \"$DocCompanies.BoughtFrom\",\n            \"ItemNo\": \"$Items.ItemNo\",\n            \"ProductCode\": \"$Items.ProductCode\",\n            \"BaseUnit\": \"$Items.BaseUnit\"\n          }\n        },\n        {\n          \"$project\": {\n            \"_id\": 0,\n            \"TESLIM_TARIHI\": \"$TESLIM_TARIHI.DateValue\",\n            \"PartnerCode\": 1,\n            \"ItemNo\": 1,\n            \"ProductCode\": 1,\n            \"BaseUnit\": 1\n          }\n        }\n      ],\n      \"as\": \"DocumentInfo\"\n    }\n  },\n  { \"$unwind\": { \"path\": \"$DocumentInfo\", \"preserveNullAndEmptyArrays\": true } },\n  {\n    \"$lookup\": {\n      \"from\": \"Partner\",\n      \"localField\": \"DocumentInfo.PartnerCode\",\n      \"foreignField\": \"Code\",\n      \"as\": \"PartnerDetails\"\n    }\n  },\n  { \"$unwind\": { \"path\": \"$PartnerDetails\", \"preserveNullAndEmptyArrays\": true } },\n {\n  \"$lookup\": {\n    \"from\": \"Location\",\n    \"let\": { \"locId\": \"$TargetLocation\" },\n    \"pipeline\": [\n      {\n        \"$match\": {\n          \"$expr\": {\n            \"$eq\": [\"$_id\", { \"$toObjectId\": \"$$locId\" }]\n          }\n        }\n      }\n    ],\n    \"as\": \"LocationInfo\"\n  }\n},\n\n  { \"$unwind\": { \"path\": \"$LocationInfo\", \"preserveNullAndEmptyArrays\": true } },\n  {\n    \"$addFields\": {\n      \"DispatchNoteDate\": {\n        \"$dateToString\": {\n          \"format\": \"%Y-%m-%d\",\n          \"date\": {\n            \"$dateFromString\": {\n              \"dateString\": \"$DispatchNoteDateRaw\",\n              \"format\": \"%m/%d/%Y %H:%M:%S\"\n            }\n          }\n        }\n      },\n      \"DeliveryDate\": {\n        \"$cond\": [\n          { \"$ifNull\": [\"$DocumentInfo.TESLIM_TARIHI\", false] },\n          {\n            \"$dateToString\": {\n              \"format\": \"%Y-%m-%d\",\n              \"date\": \"$DocumentInfo.TESLIM_TARIHI\"\n            }\n          },\n          null\n        ]\n      }\n    }\n  },\n  \n  {\n    \"$lookup\": {\n      \"from\": \"DocumentQuantity\",\n      \"let\": { \"docNum\": \"$DocNum\", \"itemNo\": \"$ItemNo\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$DocNum\", \"$$docNum\"] },\n                { \"$eq\": [\"$ItemNo\", \"$$itemNo\"] }\n              ]\n            }\n          }\n        }],\n      \"as\": \"quantityData\"\n    }\n  },\n  {\n      \"$unwind\":\"$quantityData\"\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"header\": {\n        \"OrderNo\": \"$DocNum\",\n        \"Date\": \"$DeliveryDate\",\n        \"PartnerCode\": \"$PartnerDetails.Code\",\n        \"DispatchNoteNumber\": \"$DispatchNoteNumber\",\n        \"DispatchNoteDate\": \"$DispatchNoteDate\"\n      },\n      \"Items\": [\n        {\n          \"ItemNo\": {\n            \"$toString\": \"$ItemNo\"\n          },\n          \"Material\": \"$ProductCode\",\n          \"Quantity\": {\n           \"$toDouble\": \"$TotalQuantity\"\n          },\n          \"Unit\": \"$BaseUnit\",\n          \"OrderLineNo\": \"$ItemNo\",\n          \"WarehouseCode\": \"$LocationInfo.Code\"\n        }\n      ]\n    }\n  }\n]\n\n\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "5df29750d100a86f"
            ]
        ]
    },
    {
        "id": "a93bfe04a399b238",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "Index",
        "func": "let items = msg.listPayload;  \nnode.warn(items);\nnode.warn(msg.index);\nnode.warn(items.length);\nlet index = msg.index||0;\nif (index >= items.length || items.length===0) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\n\nmsg.payload = item;\n\n\n//msg.flowName = msg.propIntegration?.code ||\"NTSP000V1_0\";\n \n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 90,
        "wires": [
            [
                "21f11f421b21c5f2"
            ],
            [
                "dc38e29dc1eec979"
            ]
        ]
    },
    {
        "id": "5fe17ef42c1afeb2",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "function 151",
        "func": "if (msg.payload[0]) {\n    msg.listPayload=msg.payload;\n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 525,
        "y": 120,
        "wires": [
            [
                "a93bfe04a399b238"
            ],
            [
                "6537aa691dab6c8b",
                "1d4256e779847862"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "6f12fc909f7caff0",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "Response Message",
        "func": "msg.payload = {\n    type: 2,\n    Sender: \"Node-Red-STNBWAY000V1.0\", //  \n    Detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"Siparis Kapatılamadi Hata Meydana Geldi \",\n    DefinitionLang: `${msg.netsisTokenErrorMessage}  ${msg.netsisDataPayload.FatUst.FATIRS_NO}`,\n    Data: [msg.netsisTokenErrorMessage],\n    Module: \"Node-Red-STNBWAY000V1.0\",\n};\nmsg.res = global.get('STNBWAY000V1_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 230,
        "wires": [
            [
                "a566ae05f813c64e",
                "fb78f79b0ec9ba28"
            ]
        ]
    },
    {
        "id": "a566ae05f813c64e",
        "type": "http response",
        "z": "1bd2a61f8400e469",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 240,
        "wires": []
    },
    {
        "id": "88d50ae0020f16cd",
        "type": "debug",
        "z": "1bd2a61f8400e469",
        "name": "debug 430",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 60,
        "wires": []
    },
    {
        "id": "6cb72e6aa08ecc21",
        "type": "http response",
        "z": "1bd2a61f8400e469",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 890,
        "y": 290,
        "wires": []
    },
    {
        "id": "dc38e29dc1eec979",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "Res",
        "func": " msg.res=global.get('STNBWAY000V1_res')\n\nmsg.payload = {\n    Type: 0,\n    Sender: \"Node-Red-STNBWAY000V1.0\", //  \n    Detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"BASARILI \",\n    DefinitionLang: `${JSON.stringify(msg.netsisTokenErrorMessage) } ${msg.netsisDataPayload.FatUst.FATIRS_NO}`,\n    Data: [msg.netsisTokenErrorMessage || \"BASARILI\"],\n    Module: \"Node-Red-STNBWAY000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 290,
        "wires": [
            [
                "6cb72e6aa08ecc21"
            ]
        ]
    },
    {
        "id": "b97541742603d7a3",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "d": true,
        "name": "MongoQueryV1",
        "func": "const query = `[\n  {\n    \"$match\": {\n      \"DocumentNo\": \"${msg.netsisDataPayload.FatNo}\",\n      \"DocumentItemNo\": ${msg.netsisDataPayload.OrderLineNo},\n      \"ProductCode\": \"${msg.netsisDataPayload.Material}\",\n      \"TargetInventoryState\": { \"$ne\": \"SPC\" }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"DispatchNoteNumber\": {\n        \"$let\": {\n          \"vars\": {\n            \"attr\": {\n              \"$arrayElemAt\": [\n                {\n                  \"$filter\": {\n                    \"input\": \"$TransactionAttributes\",\n                    \"as\": \"a\",\n                    \"cond\": { \"$eq\": [\"$$a.AttributeName\", \"DispatchNoteNumber\"] }\n                  }\n                },\n                0\n              ]\n            }\n          },\n          \"in\": \"$$attr.AttributeValue\"\n        }\n      },\n      \"DispatchNoteDateRaw\": {\n        \"$let\": {\n          \"vars\": {\n            \"attr\": {\n              \"$arrayElemAt\": [\n                {\n                  \"$filter\": {\n                    \"input\": \"$TransactionAttributes\",\n                    \"as\": \"a\",\n                    \"cond\": { \"$eq\": [\"$$a.AttributeName\", \"DispatchNoteDate\"] }\n                  }\n                },\n                0\n              ]\n            }\n          },\n          \"in\": \"$$attr.AttributeValue\"\n        }\n      }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"DocNum\": \"$DocumentNo\",\n        \"ItemNo\": \"$DocumentItemNo\",\n        \"DispatchNoteNumber\": \"$DispatchNoteNumber\"\n      },\n      \"TotalQuantity\": { \"$sum\": \"$BaseQuantity\" },\n      \"DispatchNoteDateRaw\": { \"$first\": \"$DispatchNoteDateRaw\" },\n      \"ProductCode\": { \"$first\": \"$ProductCode\" },\n      \"BaseUnit\": { \"$first\": \"$BaseUnit\" },\n      \"TargetLocation\": { \"$first\": \"$TargetLocation\" }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"DocNum\": \"$_id.DocNum\",\n      \"ItemNo\": \"$_id.ItemNo\",\n      \"DispatchNoteNumber\": \"$_id.DispatchNoteNumber\"\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Document\",\n      \"let\": { \"docNum\": \"$DocNum\", \"itemNo\": \"$ItemNo\" },\n      \"pipeline\": [\n        { \"$unwind\": \"$Items\" },\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$DocNum\", \"$$docNum\"] },\n                { \"$eq\": [\"$Items.ItemNo\", \"$$itemNo\"] }\n              ]\n            }\n          }\n        },\n        {\n          \"$addFields\": {\n            \"TESLIM_TARIHI\": {\n              \"$let\": {\n                \"vars\": {\n                  \"attributes\": { \"$ifNull\": [\"$Items.DocumentItemAttributes\", []] }\n                },\n                \"in\": {\n                  \"$arrayElemAt\": [\n                    {\n                      \"$filter\": {\n                        \"input\": \"$$attributes\",\n                        \"as\": \"attr\",\n                        \"cond\": { \"$eq\": [\"$$attr.AttributeCode\", \"TESLIM_TARIHI\"] }\n                      }\n                    },\n                    0\n                  ]\n                }\n              }\n            },\n            \"PartnerCode\": \"$DocCompanies.BoughtFrom\",\n            \"ItemNo\": \"$Items.ItemNo\",\n            \"ProductCode\": \"$Items.ProductCode\",\n            \"BaseUnit\": \"$Items.BaseUnit\"\n          }\n        },\n        {\n          \"$project\": {\n            \"_id\": 0,\n            \"TESLIM_TARIHI\": \"$TESLIM_TARIHI.DateValue\",\n            \"PartnerCode\": 1,\n            \"ItemNo\": 1,\n            \"ProductCode\": 1,\n            \"BaseUnit\": 1\n          }\n        }\n      ],\n      \"as\": \"DocumentInfo\"\n    }\n  },\n  { \"$unwind\": { \"path\": \"$DocumentInfo\", \"preserveNullAndEmptyArrays\": true } },\n  {\n    \"$lookup\": {\n      \"from\": \"Partner\",\n      \"localField\": \"DocumentInfo.PartnerCode\",\n      \"foreignField\": \"Code\",\n      \"as\": \"PartnerDetails\"\n    }\n  },\n  { \"$unwind\": { \"path\": \"$PartnerDetails\", \"preserveNullAndEmptyArrays\": true } },\n {\n  \"$lookup\": {\n    \"from\": \"Location\",\n    \"let\": { \"locId\": \"$TargetLocation\" },\n    \"pipeline\": [\n      {\n        \"$match\": {\n          \"$expr\": {\n            \"$eq\": [\"$_id\", { \"$toObjectId\": \"$$locId\" }]\n          }\n        }\n      }\n    ],\n    \"as\": \"LocationInfo\"\n  }\n},\n\n  { \"$unwind\": { \"path\": \"$LocationInfo\", \"preserveNullAndEmptyArrays\": true } },\n  {\n    \"$addFields\": {\n      \"DispatchNoteDate\": {\n        \"$dateToString\": {\n          \"format\": \"%Y-%m-%d\",\n          \"date\": {\n            \"$dateFromString\": {\n              \"dateString\": \"$DispatchNoteDateRaw\",\n              \"format\": \"%m/%d/%Y %H:%M:%S\"\n            }\n          }\n        }\n      },\n      \"DeliveryDate\": {\n        \"$cond\": [\n          { \"$ifNull\": [\"$DocumentInfo.TESLIM_TARIHI\", false] },\n          {\n            \"$dateToString\": {\n              \"format\": \"%Y-%m-%d\",\n              \"date\": \"$DocumentInfo.TESLIM_TARIHI\"\n            }\n          },\n          null\n        ]\n      }\n    }\n  },\n  \n  {\n    \"$lookup\": {\n      \"from\": \"DocumentQuantity\",\n      \"let\": { \"docNum\": \"$DocNum\", \"itemNo\": \"$ItemNo\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$DocNum\", \"$$docNum\"] },\n                { \"$eq\": [\"$ItemNo\", \"$$itemNo\"] }\n              ]\n            }\n          }\n        }],\n      \"as\": \"quantityData\"\n    }\n  },\n  {\n      \"$unwind\":\"$quantityData\"\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"header\": {\n        \"OrderNo\": \"$DocNum\",\n        \"Date\": \"$DeliveryDate\",\n        \"PartnerCode\": \"$PartnerDetails.Code\",\n        \"DispatchNoteNumber\": \"$DispatchNoteNumber\",\n        \"DispatchNoteDate\": \"$DispatchNoteDate\"\n      },\n      \"Items\": [\n        {\n          \"ItemNo\": {\n            \"$toString\": \"$ItemNo\"\n          },\n          \"Material\": \"$ProductCode\",\n          \"Quantity\": {\n            \"$toDouble\": \"$quantityData.UnloadingQuantity\"\n          },\n          \"Unit\": \"$BaseUnit\",\n          \"OrderLineNo\": \"$ItemNo\",\n          \"WarehouseCode\": \"$LocationInfo.Code\"\n        }\n      ]\n    }\n  }\n]\n\n\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 30,
        "wires": [
            []
        ]
    },
    {
        "id": "fb78f79b0ec9ba28",
        "type": "debug",
        "z": "1bd2a61f8400e469",
        "name": "debug 467",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 380,
        "wires": []
    },
    {
        "id": "6537aa691dab6c8b",
        "type": "debug",
        "z": "1bd2a61f8400e469",
        "name": "debug 479",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 350,
        "wires": []
    },
    {
        "id": "1d4256e779847862",
        "type": "function",
        "z": "1bd2a61f8400e469",
        "name": "Res",
        "func": " msg.res=global.get('STNBWAY000V1_res')\n\nmsg.payload = {\n    type: 0,\n    sender: \"Node-Red-STNBWAY000V1.0\", //  \n    detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"BASARILI \",\n    definitionLang: `LİSTELENİCEK VERİ BULUNAMADI`,\n    data: [msg.netsisTokenErrorMessage || \"BASARILI\"],\n    module: \"Node-Red-STNBWAY000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 340,
        "wires": [
            [
                "26ea873451ef04d5"
            ]
        ]
    },
    {
        "id": "26ea873451ef04d5",
        "type": "http response",
        "z": "1bd2a61f8400e469",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 920,
        "y": 350,
        "wires": []
    },
    {
        "id": "bfdf8f915f026d47",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "ParamsCheck",
        "func": "let orderNumber = msg.payload.DocNum;\n \nmsg.orderCustomerCode = msg.payload.CustomerCode;\nmsg.orderNumber = msg.payload.DocNum;\nif (!orderNumber) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid OrderNo\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 170,
        "wires": [
            [
                "842e15337c9e6e7b"
            ],
            [
                "b3c654be09303b9e"
            ]
        ]
    },
    {
        "id": "d6ddde0b93070b47",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "Get FatUst",
        "func": " \nmsg.flowName =  \"S2NSWAY000V1_0\";\n \n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT\n\nA.CARI_KODU,\n A.CARI_KOD2,\nA.KOD1,\nA.KOD2,\nTARIH,\nA.ODEMETARIHI,\nA.SIPARIS_TEST,\nA.D_YEDEK10,\nA.DOVBAZTAR,\nFEK.ACIK1,\nFEK.ACIK2,\nFEK.ACIK3,\nFEK.acik4,\nFEK.acik5,\nFEK.acik6,\nFEK.acik7,\nFEK.acik8,\nFEK.acik9,\nFEK.acik10,\nFEK.acik11,\nFEK.acik12,\nFEK.acik13,\nFEK.acik14,\nFEK.acik15,\nFEK.acik16,\nA.PROJE_KODU,\nA.GEN_ISK1T,\nA.GEN_ISK2T,\nA.GEN_ISK3T,\nA.GEN_ISK1O,\nA.GEN_ISK2O,\nA.GEN_ISK3O,\nDOVIZ_TIPI,\nCASE WHEN A.CARI_KODU='3635' THEN 0 ELSE KDV END KDV,\nFAT_ALTM2,\nFAT_ALTM1,\nODEMEGUNU,\nCASE\n    WHEN PLA_KODU IS NULL THEN CS.PLASIYER_KODU\n    ELSE PLA_KODU\nEND AS PLASIYER_KODU,\nCS.ISKONTO_ORANI\n\nFROM TBLSIPAMAS A\nJOIN TBLCASABIT CS ON A.CARI_KODU=CS.CARI_KOD\nJOIN TBLFATUEK FEK ON FEK.FATIRSNO=A.FATIRS_NO AND FEK.CKOD=A.CARI_KODU AND FEK.FKOD=6\nWHERE FATIRS_NO='${msg.orderNumber}' AND  FTIRSIP=6 and CARI_KOD='${msg.orderCustomerCode}'\n \n`;\n\n \nmsg.query=query;\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 110,
        "wires": [
            [
                "3c31cc01726692c3"
            ]
        ]
    },
    {
        "id": "b3c654be09303b9e",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "Res",
        "func": "msg.res = global.get('STNSWAY000V1_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 120,
        "wires": [
            [
                "a4711bab3ea1879d"
            ]
        ]
    },
    {
        "id": "3c31cc01726692c3",
        "type": "subflow:d296b4008b6072d8",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "MssqlFatUst",
        "x": 660,
        "y": 150,
        "wires": [
            [
                "0ac2fe8fcf829a7a"
            ],
            [
                "8265d91efa1a2756"
            ]
        ]
    },
    {
        "id": "5f2cc383fa444deb",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n   // { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n    { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n  //  { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sira No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n    msg.payload = {\n        Type: 2, //\"ERROR\",    \n        Sender: \"Node-Red-STNSINV000V1\",\n        Detail: \"Zorunlu Alan Kontrolü\",\n        DefinitionLang: \"Sorgu sirasinda hata\",\n        Data: errors,\n        Module: \"Node-Red-STNSINV000V1\"\n    };\n    msg.statusCode = 400;\n    return [null,msg];\n}\n\n\n\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload_netsis = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 430,
        "wires": [
            [
                "1eec4bda321f76c4"
            ],
            [
                "b3c654be09303b9e"
            ]
        ]
    },
    {
        "id": "0ac2fe8fcf829a7a",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "SetFatUst",
        "func": "\n\n\nlet data = msg.payload[0];\n\n// Gelen data'nın array olup olmadığını kontrol et\nif (!data ) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Data is either empty or not an array\",\n            query: msg.query\n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\n\nmsg.netsisDataPayload.FatUst={}\nmsg.netsisDataPayload.FatUst.CariKod = data.CARI_KODU;\nmsg.netsisDataPayload.FatUst.CARI_KOD2 = data.CARI_KOD2;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLA_KODU;\nmsg.netsisDataPayload.FatUst.SIPARIS_TEST = data.SIPARIS_TEST; \nmsg.netsisDataPayload.FatUst.FIYATTARIHI = data.SIPARIS_TEST;\nmsg.netsisDataPayload.FatUst.ODEMETARIHI = data.ODEMETARIHI;\nmsg.netsisDataPayload.FatUst.KOD1 = data.KOD1;\nmsg.netsisDataPayload.FatUst.KOD2 = data.KOD2;\nmsg.netsisDataPayload.FatUst.KDV = data.KDV;\nmsg.netsisDataPayload.FatUst.FAT_ALTM1 = data.FAT_ALTM1;\nmsg.netsisDataPayload.FatUst.FAT_ALTM2 = data.FAT_ALTM2;\nmsg.netsisDataPayload.FatUst.ODEMEGUNU = data.ODEMEGUNU;\nmsg.netsisDataPayload.FatUst.EKACK1 = data.ACIK1;\nmsg.netsisDataPayload.FatUst.EKACK2 = data.ACIK2;\nmsg.netsisDataPayload.FatUst.EKACK3 = data.ACIK3;\nmsg.netsisDataPayload.FatUst.EKACK4 = data.acik4;\nmsg.netsisDataPayload.FatUst.EKACK5 = data.acik5;\nmsg.netsisDataPayload.FatUst.EKACK6 = data.acik6;\nmsg.netsisDataPayload.FatUst.EKACK7 = data.acik7;\nmsg.netsisDataPayload.FatUst.EKACK8 = data.acik8;\nmsg.netsisDataPayload.FatUst.EKACK9 = data.acik9;\nmsg.netsisDataPayload.FatUst.EKACK10 = data.acik10;\nmsg.netsisDataPayload.FatUst.EKACK11 = data.acik11;\nmsg.netsisDataPayload.FatUst.EKACK12 = data.acik12;\nmsg.netsisDataPayload.FatUst.EKACK13 = data.acik13;\nmsg.netsisDataPayload.FatUst.EKACK14 = data.acik14;\nmsg.netsisDataPayload.FatUst.EKACK15 = data.acik15;\nmsg.netsisDataPayload.FatUst.EKACK16 = data.acik16;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLASIYER_KODU;\nmsg.netsisDataPayload.FatUst.Proje_Kodu = data.PROJE_KODU;\n// msg.netsisDataPayload.FatUst.GEN_ISK1T = data.GEN_ISK1T;\n// msg.netsisDataPayload.FatUst.GEN_ISK2T = data.GEN_ISK2T;\n// msg.netsisDataPayload.FatUst.GEN_ISK3T = data.GEN_ISK3T;\nmsg.netsisDataPayload.FatUst.GEN_ISK1O =  data.ISKONTO_ORANI|| data.GEN_ISK1o;\n// msg.netsisDataPayload.FatUst.GEN_ISK2O = data.GEN_ISK2o;\n// msg.netsisDataPayload.FatUst.GEN_ISK3O = data.GEN_ISK3o;\nreturn [msg,null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "20bcba265930f94d"
            ],
            [
                "b3c654be09303b9e",
                "5589b04f38728c49"
            ]
        ]
    },
    {
        "id": "2103dec4beb68d4d",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "SetFatKalem",
        "func": "let data = msg.payload;\nlet netsisDataInvoice = msg.netsisDataPayload?.FatUst;\n\nmsg.netsisDataPayload.Kalems =[]\nlet errorDec=[];\n// Veri kontrolü\nif (Array.isArray(data) && data.length > 0 ) {\n    //bize gelen post isteğinden alıacak veri netsisDataItemList alınacak \n    data.forEach(netsisData => {\n        //gelen veri kısıtı ile alıacak  netsis sipariş datası netsisData\n       \n       \n        if (netsisData)\n         {\n            let itemData = {\n                StokKodu: netsisData.STOK_KODU,\n                Sira: netsisData.SIRA,\n                STra_GCMIK: netsisData.STHAR_GCMIK,\n                STra_TAR: netsisDataInvoice.Tarih,\n                ...(netsisData.kur >0 ? {\n                    STra_NF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    STra_BF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    DOVIZ_TURU: netsisData.STHAR_DOVTIP,\n                    DOVTIP: netsisData.STHAR_DOVTIP,\n                    STra_DOVTIP: netsisData.STHAR_DOVTIP\n                }:{\n                    STra_NF: netsisData.STHAR_NF,\n                    STra_BF: netsisData.STHAR_BF\n                }),\n                STra_KDV: netsisData.STHAR_KDV,\n                STra_SIPNUM: netsisData.FISNO,\n                ProjeKodu: netsisData.PROJE_KODU,\n                STra_SIPKONT:netsisData.STRA_SIPKONT,\n                Stra_IrsKont: netsisData.STRA_SIPKONT,\n                STra_HTUR: \"H\",\n                DEPO_KODU: netsisData.DEPO_KODU,\n                Firmadovtut: netsisData.STra_GCMIK,\n                STra_SatIsk: netsisData.STHAR_SATISK,\n                STra_SatIsk2: netsisData.STHAR_SATISK2,\n                STra_SatIsk3: netsisData.STRA_SATISK3,\n                STra_SatIsk4: netsisData.STRA_SATISK4,\n                STra_SatIsk5: netsisData.STRA_SATISK5,\n                STra_SatIsk6: netsisData.STRA_SATISK6,\n                STra_ODEGUN: netsisDataInvoice.ODEMEGUNU,\n                //SatirBaziAciks: Array.from({ length: 10 }, (_, i) => netsisData[`ACIKLAMA1${i+1}`]) ,\n                Plasiyer_Kodu: netsisData.PLASIYER_KODU,\n                Ekalanneden: netsisData.EKALAN_NEDEN,\n                Ekalan: netsisData.EKALAN,\n                Ekalan1: netsisData.EKALAN1,\n                STra_testar: netsisData.STHAR_TESTAR,\n                Olcubr: 1,\n                STra_CARI_KOD: netsisData.STHAR_CARIKOD,\n                STra_GC: \"C\",\n                Stra_FiiliTar: netsisDataInvoice.SIPARIS_TEST,\n                D_YEDEK10: netsisDataInvoice.SIPARIS_TEST\n\n            }        \n           \n            msg.netsisDataPayload.Kalems.push(itemData)\n\n         }\n         else {\n            errorDec.push(`No record was found in Netsis for this order (${netsisDataInvoice.FATIRS_NO}).Stock Code: ${netsisData?.STOK_KODU }`)\n            \n         }\n          \n\n          \n    });\n    if (errorDec.length > 0){\n        msg.payload = {\n            success: false,\n             errors: {\n                message: errorDec\n\n            }\n        };\n        msg.statusCode = 400;\n\n        return [null, msg]; // Hata durumu\n    }\n    msg.payload = msg.netsisDataPayload;\n    return [msg,null ]\n}  \n   \n  else {\n    // Hata mesajını düzenle\n    msg.payload = { success: false, errors: {\n        message: \"Data is either empty or not an array\" \n      \n    }};\n    msg.statusCode = 400;\n\n    return [null, msg]; // Hata durumu\n}\n\n\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 190,
        "wires": [
            [
                "5f2cc383fa444deb",
                "87264891355ecce4"
            ],
            [
                "b3c654be09303b9e",
                "a12fbeca8d48c4fd"
            ]
        ]
    },
    {
        "id": "8265d91efa1a2756",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "ErrorMssqlRes",
        "func": "// msg.payload = {\n//     success: false, errors: {\n//         message: \"Error\",\n//         query: msg.query\n//     }\n// };\nmsg.statusCode = 400;\n\n\n\nmsg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-STNSINV000V1.0-ErrorMssqlRes\", // C# kodundaki varsayılan değeri koruduk\n    Detail: \"query error\",\n    DefinitionLang: null,\n    Data: [{\n        message: \"Error\",\n        query: msg.query\n    }],\n    Module: \"Node-Red-STNSINV000V1.0-ErrorMssqlRes\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 240,
        "wires": [
            [
                "b3c654be09303b9e"
            ]
        ]
    },
    {
        "id": "ddce7cc3bca0ba25",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "ErrorMssqlRes",
        "func": "// msg.payload = {\n//     success: false, errors: {\n//         message: \"Error\",\n//         query: msg.query\n//     }\n// };\n\n\nmsg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-STNSINV000V1.0-ErrorMssqlRes\", // C# kodundaki varsayılan değeri koruduk\n    Detail: \"query error\",\n    DefinitionLang: null,\n    Data: [{\n        message: \"Error\",\n        query: msg.query\n    }],\n    Module: \"Node-Red-STNSINV000V1.0-ErrorMssqlRes\"\n};\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 230,
        "wires": [
            [
                "b3c654be09303b9e"
            ]
        ]
    },
    {
        "id": "03567b0df0d469f1",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "SEND NETSIS",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\n \n\nconst year = utcNow.getFullYear();\n\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\n\nvar formattedDate = year + '-' + month + '-' + day;\nmsg.FatNo = msg.payload.Data;\nlet isEInvoiceCustomer= msg.isEInvoiceCustomer;\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        FATIRS_NO: msg.payload.Data,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 0,\n        KOD1: null,\n        KOD2: null,\n        TIPI: 2,\n        Aciklama: \"SFORIN\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: formattedDate,\n        KDV_DAHILMI: false,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        EfaturaCarisiMi: isEInvoiceCustomer,      \n        FIYATTARIHI: formattedDate,\n        ODEMETARIHI: formattedDate,\n        KOSULTARIHI: formattedDate,\n        FAT_ALTM1:null,\n        FAT_ALTM2:null,\n        ODEMEGUNU:null,\n        GEN_ISK1T:null,\n        GEN_ISK2T:null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null\n    },\n    Kalems: [\n        {\n            StokKodu: null,\n            Sira: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            DOVIZ_TURU:null,\n            DOVTIP:null,\n            STra_DOVTIP:0,\n            STra_HTUR: \"H\",\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: null,\n            Ekalanneden: null,\n            Ekalan: null,\n            Ekalan1: null,\n            STra_testar: formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            STra_FTIRSIP: null,\n            STra_CARI_KOD: null,\n            STra_GC: \"C\",\n            DEPO_KODU: 0,\n            STra_ACIK: null,\n            TesMik: 0,\n            Stra_FiiliTar: formattedDate,\n            D_YEDEK10: formattedDate,\n            STra_SIPKONT:null,\n            Stra_IrsKont:null,\n            Firmadovtut:0,\n            STra_SatIsk:null,\n            STra_SatIsk2:null,\n            STra_SatIsk3:null,\n            STra_SatIsk4:null,\n            STra_SatIsk5:null,\n            STra_SatIsk6:null,\n            STra_ODEGUN:null,\n            SatirBaziAciks:null,\n            S_Yedek2:'SFORIN'\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload_netsis.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n     // gelen post isteğin itemlerin sayısı\n    KalemAdedi:msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 0,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FiyatSistemineGoreHesapla: false,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n    \n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems[0];\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\n \nmsg.dataPayload = result;\n\nmsg.flowName=\"S2N_RECEVING_URL\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 430,
        "wires": [
            [
                "16406d8afb15ea70"
            ]
        ]
    },
    {
        "id": "20bcba265930f94d",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "GetFatKalem",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT STOK_KODU,\n\t   EKALAN,\n       EKALAN1,\n        EKALAN_NEDEN,\n       MUH_KODU,\n       STHAR_DOVTIP,\n       STHAR_DOVFIAT,\n       STHAR_NF,\n       STHAR_BF,\n       CASE WHEN A.STHAR_ACIKLAMA='3635' THEN 0 ELSE STHAR_KDV END STHAR_KDV,\n       STHAR_GCMIK,\n       CASE\n           WHEN STHAR_DOVFIAT=0 THEN 0\n           ELSE STHAR_BF/STHAR_DOVFIAT\n       END AS kur,\n       STHAR_KOD1,\n       STHAR_SATISK*100000 AS STHAR_SATISK,\n       STHAR_MALFISK,\n       STHAR_SATISK2,\n       STRA_SATISK3,\n       STRA_SATISK4,\n       STRA_SATISK5,\n       STRA_SATISK6,\n       PROJE_KODU,\n\t   SIRA,\n\t   OLCUBR,\n\t   FISNO ,\n\t   STRA_SIPKONT,\n\t   ACIKLAMA1,\n\t   ACIKLAMA2,\n\t   ACIKLAMA3,\n\t   ACIKLAMA4,\n\t   ACIKLAMA5,\n\t   ACIKLAMA6,\n\t   ACIKLAMA7,\n\t   ACIKLAMA8,\n\t   ACIKLAMA9,\n\t   ACIKLAMA10,\n     PLASIYER_KODU,\n      A.STHAR_TESTAR,\n     A.STHAR_CARIKOD,\n     A.DEPO_KODU\n\t   \nFROM TBLSIPATRA A\nLEFT JOIN  TBLSSATIRAC SAC ON SAC.INCKEYNO= A.INCKEYNO\nWHERE STHAR_FTIRSIP=6 \n  AND FISNO='${msg.orderNumber}'\n  AND A.STHAR_ACIKLAMA='${msg.orderCustomerCode}'\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 100,
        "wires": [
            [
                "07716291db05c331"
            ]
        ]
    },
    {
        "id": "07716291db05c331",
        "type": "subflow:d296b4008b6072d8",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "MssqlFatKalem",
        "x": 900,
        "y": 150,
        "wires": [
            [
                "2103dec4beb68d4d"
            ],
            [
                "ddce7cc3bca0ba25"
            ]
        ]
    },
    {
        "id": "16406d8afb15ea70",
        "type": "subflow:fc936f675a46124b",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 770,
        "y": 470,
        "wires": [
            [
                "596a2a2f7ed22c37"
            ],
            [
                "fb613f7945c328e1"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "fb613f7945c328e1",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "Response Message",
        "func": " \n// msg.payload = {\n//     status: \"Error\",\n//     message: msg.netsisTokenErrorMessage ||\"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\",\n//     programName: \"STNSREC0001.0\",   \n//     timestamp: new Date().toISOString() // Yerel tarih ve saat\n// };\n\n\nmsg.payload = {\n    Type: 2, //\"ERROR\",    \n    Sender: \"Node-Red-STNSINV000V1\",\n    Detail: \"Netsis Response Message\",\n    DefinitionLang: msg.netsisTokenErrorMessage || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n    Data: [],\n    Module: \"Node-Red-STNSINV000V1\"\n};\n\nmsg.res = global.get('STNSWAY000V1_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 510,
        "wires": [
            [
                "dbc2a2cbedbb530d"
            ]
        ]
    },
    {
        "id": "dbc2a2cbedbb530d",
        "type": "http response",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1190,
        "y": 550,
        "wires": []
    },
    {
        "id": "1eec4bda321f76c4",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "IS EINVOICE CUSTOMER",
        "func": "msg.query=`\n\n\nSELECT dbo.IS_EINVOICE_CUSTOMER('${msg.payload_netsis.data.FatUst.CariKod}') AS IS_EINVOICE_CUSTOMER;\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 470,
        "wires": [
            [
                "4f3e3fca3f7026f9"
            ]
        ],
        "info": "CREATE  FUNCTION IS_EINVOICE_CUSTOMER (@CARI_KOD NVARCHAR(50))      \r\nRETURNS BIT      \r\nAS      \r\nBEGIN      \r\n    DECLARE @Result BIT;      \r\n      \r\n    IF EXISTS (  \r\n        SELECT 1  \r\n        FROM NETSIS..TBLEFATCARI A WITH (NOLOCK)  \r\n        WHERE A.AKTIF = 'E'  \r\n          AND (  \r\n                EXISTS (  \r\n                    SELECT 1  \r\n                    FROM TBLCASABIT B WITH (NOLOCK)  \r\n                    WHERE A.IDENTIFIER = B.VERGI_NUMARASI  \r\n                      AND B.CARI_KOD = @CARI_KOD  \r\n                )  \r\n             OR EXISTS (  \r\n                    SELECT 1  \r\n                    FROM TBLCASABITEK C WITH (NOLOCK)  \r\n                    WHERE A.IDENTIFIER = C.TCKIMLIKNO  \r\n                      AND C.CARI_KOD = @CARI_KOD  \r\n                )  \r\n            )  \r\n    )  \r\n        SET @Result = 1;  \r\n    ELSE  \r\n        SET @Result = 0;  \r\n  \r\n    RETURN @Result;  \r\nEND;  "
    },
    {
        "id": "4f3e3fca3f7026f9",
        "type": "subflow:d296b4008b6072d8",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "MssqlFatUst",
        "x": 320,
        "y": 510,
        "wires": [
            [
                "d74c29549fb8ac47"
            ],
            []
        ],
        "info": "CREATE FUNCTION IS_EINVOICE_CUSTOMER (@CARI_KOD NVARCHAR(50))\r\nRETURNS BIT\r\nAS\r\nBEGIN\r\n    DECLARE @Result BIT;\r\n\r\n    IF EXISTS (\r\n        SELECT 1 \r\n        FROM NETSIS..TBLEFATCARI A    WITH (NOLOCK) \r\n        LEFT JOIN TBLCASABIT B WITH (NOLOCK) \r\n            ON A.IDENTIFIER = B.VERGI_NUMARASI \r\n        WHERE B.CARI_KOD = @CARI_KOD \r\n          AND A.AKTIF = 'E'\r\n    )\r\n    BEGIN\r\n        SET @Result = 1; -- Kayıt varsa TRUE (1)\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        SET @Result = 0; -- Kayıt yoksa FALSE (0)\r\n    END\r\n\r\n    RETURN @Result;\r\nEND\r\n\r\n\r\nSELECT dbo.IS_EINVOICE_CUSTOMER('644') AS KAYIT_VAR_MI;"
    },
    {
        "id": "104d78fa434adde3",
        "type": "subflow:fc936f675a46124b",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument",
                "type": "str"
            }
        ],
        "x": 1040,
        "y": 420,
        "wires": [
            [
                "f627ce5dc4312efe"
            ],
            [
                "fb613f7945c328e1"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "596a2a2f7ed22c37",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "Taslak Oluştur",
        "func": "msg.gibFatNo=msg.payload.Data.FatUst.GIB_FATIRS_NO;\n\nmsg.dataPayload=\n{\n    \"BelgeNo\": msg.FatNo,\n    \"Tip\": msg.isEInvoiceCustomer== true? 1:0,\n    \"DizaynNo\": msg.netsisDataPayload.FatUst.CariKod==\"3635\"? 29 : msg.isEInvoiceCustomer== true? 18:17,\n    \"DizaynKontrol\": true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 390,
        "wires": [
            [
                "104d78fa434adde3"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "43b2a3c1ac8177cc",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "Taslak Sil",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\n\nif (msg.isEInvoiceCustomer == true) {\n   \n    msg.query = ` \n                 DELETE   FROM TBLEFATMAS WHERE EFATINCKEYNO IN (SELECT INCKEYNO FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}');\n                 DELETE   FROM TBLEFATMAS WHERE FATIRS_NO IN (SELECT GIB_FATIRS_NO FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}'); \n                 DELETE   FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}';\n                `;\n} else {    \n    msg.query = `DELETE FROM TBLEARSIV WHERE FATIRS_NO='${msg.FatNo}'`;\n}\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 390,
        "wires": [
            [
                "e53607234fb31c5a"
            ]
        ]
    },
    {
        "id": "e53607234fb31c5a",
        "type": "subflow:d296b4008b6072d8",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "MssqlTaslakSil",
        "x": 1500,
        "y": 450,
        "wires": [
            [],
            [
                "dbc2a2cbedbb530d"
            ]
        ]
    },
    {
        "id": "a4711bab3ea1879d",
        "type": "http response",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1390,
        "y": 170,
        "wires": []
    },
    {
        "id": "f627ce5dc4312efe",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "Dizayn Kaydet",
        "func": "msg.dataPayload=\n{\n    \"GIBDocumentNumber\": msg.gibFatNo,\n    \"HtmlPath\": env.get('InvoiceHtmlPath_MELIH'), //\n    \"DocumentBoxType\": 2, \n    \"EDocumentType\": msg.isEInvoiceCustomer== true? 1:0\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 370,
        "wires": [
            [
                "707bdeac3499fbdb"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "707bdeac3499fbdb",
        "type": "subflow:fc936f675a46124b",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument/ShowEDocument",
                "type": "str"
            }
        ],
        "x": 1270,
        "y": 420,
        "wires": [
            [
                "43b2a3c1ac8177cc"
            ],
            [
                "fb613f7945c328e1"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "d74c29549fb8ac47",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "boolEINVOICE CUSTOMER",
        "func": "\nmsg.isEInvoiceCustomer=msg.payload[0].IS_EINVOICE_CUSTOMER || false;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 550,
        "wires": [
            [
                "4d96959c13e58a44"
            ]
        ]
    },
    {
        "id": "4d96959c13e58a44",
        "type": "switch",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "property": "isEInvoiceCustomer",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 590,
        "wires": [
            [
                "ce3a6305846b1400"
            ],
            [
                "7b114eb4805baccf"
            ]
        ]
    },
    {
        "id": "ce3a6305846b1400",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "GetInvoiceNumber",
        "func": "\nmsg.dataPayload=\n{\n  Code: \"X40\",\n  DocumentType: 0,\n  Use64BitService: true\n}\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 700,
        "wires": [
            [
                "63ad62e1bd71e6b9"
            ]
        ]
    },
    {
        "id": "7b114eb4805baccf",
        "type": "subflow:fc936f675a46124b",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips/NewEArchiveNumber/W40",
                "type": "str"
            },
            {
                "name": "ChooseRequestMethod",
                "value": "GET",
                "type": "str"
            }
        ],
        "x": 630,
        "y": 580,
        "wires": [
            [
                "03567b0df0d469f1"
            ],
            [
                "fb613f7945c328e1"
            ]
        ]
    },
    {
        "id": "5589b04f38728c49",
        "type": "debug",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "debug 464",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 190,
        "wires": []
    },
    {
        "id": "a12fbeca8d48c4fd",
        "type": "debug",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "debug 465",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 230,
        "wires": []
    },
    {
        "id": "87264891355ecce4",
        "type": "debug",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "debug 466",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 160,
        "wires": []
    },
    {
        "id": "63ad62e1bd71e6b9",
        "type": "subflow:fc936f675a46124b",
        "z": "22db7f4bcd69fa91",
        "g": "d10910f84c58e11b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips/NewEItemSlipsNumber",
                "type": "str"
            }
        ],
        "x": 480,
        "y": 750,
        "wires": [
            [
                "03567b0df0d469f1"
            ],
            [
                "fb613f7945c328e1"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "842e15337c9e6e7b",
        "type": "function",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "Sipariş aktarıldımı kontrol",
        "func": "\nmsg.flowName = \"STNSINV000V1\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM TBLSTHAR \n            WHERE STHAR_SIPNUM = '${msg.orderNumber}'\n        )\n        THEN 1 \n        ELSE 0 \n    END AS KayitVarMi;\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 30,
        "wires": [
            [
                "2ff4a82706066c13"
            ]
        ]
    },
    {
        "id": "2ff4a82706066c13",
        "type": "subflow:d296b4008b6072d8",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "MssqlFatUst",
        "x": 310,
        "y": 60,
        "wires": [
            [
                "a69839ab8ac45c50"
            ],
            []
        ]
    },
    {
        "id": "a69839ab8ac45c50",
        "type": "switch",
        "z": "22db7f4bcd69fa91",
        "g": "16904a16559010b8",
        "name": "",
        "property": "payload[0].KayitVarMi",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 100,
        "wires": [
            [],
            [
                "d6ddde0b93070b47"
            ]
        ]
    },
    {
        "id": "b81ca77b6c47979b",
        "type": "function",
        "z": "f353afe31d73612e",
        "name": "Map",
        "func": "// Eşleştirme için kullanılan nesne\nconst netsisData = env.get(\"SourceJson\");\n\n// Gelen veriyi kontrol et\nconst data = msg.req?.body?.Data || msg.payload?.Data || msg.payload;\n\nif (!Array.isArray(data)) {\n    node.error(\"Data dizisi bulunamadi veya geçersiz\", msg);\n    return null;\n}\n\n// Sonucu oluştur\nconst result = Object.keys(netsisData).reduce((acc, key) => {\n    const field = netsisData[key];\n    ;\n\n    const foundItem = data.find(x => {\n\n        if ((\"attributeSyncField\" in x || \"attributeName\" in x)) {\n\n            const matchValue = x.attributeSyncField !== \"MatchValue\" ? x.attributeSyncField : x.attributeName;\n            return matchValue === field;\n        } else {\n\n            return x.hasOwnProperty(field);\n        }\n    });\n\n    if (foundItem) {\n\n        acc[key] = (foundItem.attributeValue || foundItem[field]);\n    }\n\n    return acc;\n}, {});\n\n\n// Çıktıyı ayarla\nmsg.netsisDataPayload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d9f9de9987684428",
        "type": "subflow:5d0772e7b4d40c7d",
        "z": "95c542b74b7a0db4",
        "name": "STNWTRF001V1.0",
        "x": 790,
        "y": 120,
        "wires": []
    },
    {
        "id": "506a537b649a15bb",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "95c542b74b7a0db4",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Location",
                "type": "str"
            }
        ],
        "x": 575,
        "y": 130,
        "wires": [
            [
                "d9f9de9987684428"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "ce739282482899e4",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "95c542b74b7a0db4",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Warehouse_Trf",
                "type": "str"
            }
        ],
        "x": 565,
        "y": 60,
        "wires": [
            [
                "506a537b649a15bb"
            ]
        ],
        "l": false
    },
    {
        "id": "071779b682e08cc5",
        "type": "function",
        "z": "95c542b74b7a0db4",
        "name": "MongoQuery",
        "func": "const query = ` \n[\n  {\n    \"$addFields\": {\n      \"WarehouseObjectId\": { \"$toObjectId\": \"${msg.netsisDataPayload.WarehouseCode}\" },\n      \"TargetWarehouseObjectId\": { \"$toObjectId\": \"${msg.netsisDataPayload.TargetWarehouseCode}\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Location\",\n      \"localField\": \"WarehouseObjectId\",\n      \"foreignField\": \"_id\",\n      \"as\": \"WarehouseInfo\"\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Location\",\n      \"localField\": \"TargetWarehouseObjectId\",\n      \"foreignField\": \"_id\",\n      \"as\": \"TargetWarehouseInfo\"\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"header\": {\n        \"OrderNo\": null,\n        \"Date\": null\n      },\n      \"Items\": [\n        {\n        \"ItemNo\": \"1\",\n        \"Material\": \"${msg.netsisDataPayload.Material}\",\n        \"Quantity\":${msg.netsisDataPayload.operationQuantity},        \n        \"OrderLineNo\": \"1\",\n        \"WarehouseCode\": {\n          \"$arrayElemAt\": [\"$WarehouseInfo.Code\", 0]\n        },\n        \"TargetWarehouseCode\": {\n          \"$arrayElemAt\": [\"$TargetWarehouseInfo.Code\", 0]\n        }\n      }\n      ]\n    }\n  },\n  {\n    \"$limit\": 1\n  }\n]\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 150,
        "wires": [
            [
                "ce739282482899e4"
            ]
        ]
    },
    {
        "id": "e4df88220622105d",
        "type": "subflow:f353afe31d73612e",
        "z": "95c542b74b7a0db4",
        "name": "",
        "env": [
            {
                "name": "SourceJson",
                "value": "{\"FatNo\":\"documentNo\",\"Material\":\"productCode\",\"WarehouseCode\":\"sourceLocation\",\"TargetWarehouseCode\":\"targetLocation\",\"operationQuantity\":\"operationQuantity\",\"serialNo\":\"serialNo\"}",
                "type": "json"
            }
        ],
        "x": 320,
        "y": 100,
        "wires": [
            [
                "071779b682e08cc5",
                "1ca99a04613ebe19"
            ]
        ]
    },
    {
        "id": "8ac1b8b61ff4cb1b",
        "type": "function",
        "z": "95c542b74b7a0db4",
        "name": "re",
        "func": "global.set('STNWTRF000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 155,
        "y": 110,
        "wires": [
            [
                "e4df88220622105d"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "1ca99a04613ebe19",
        "type": "debug",
        "z": "95c542b74b7a0db4",
        "name": "debug 416",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 260,
        "wires": []
    },
    {
        "id": "5dda567ba258037d",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "re",
        "func": "global.set('STNSINV000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 165,
        "y": 170,
        "wires": [
            [
                "974235a583ec5c3a"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "453e9db4754ea5a4",
        "type": "subflow:22db7f4bcd69fa91",
        "z": "a7ee580a04fce715",
        "name": "S2N SALES INVOICE",
        "x": 740,
        "y": 200,
        "wires": [
            [
                "6759b21ca829f00a"
            ]
        ]
    },
    {
        "id": "32a58e04ef68ef74",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "function 159",
        "func": "if (msg.payload[0]) {\n   \n    msg.listPayload = msg.payload  \n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 285,
        "y": 280,
        "wires": [
            [
                "e194f5d5179a5d1a",
                "5e51caa44032bb62"
            ],
            [
                "523e432be6e87245"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "d0688f7d59c11407",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "a7ee580a04fce715",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Document",
                "type": "str"
            }
        ],
        "x": 235,
        "y": 280,
        "wires": [
            [
                "32a58e04ef68ef74"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "0bbdcace95a115dc",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "a7ee580a04fce715",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Seller_Invoice",
                "type": "str"
            }
        ],
        "x": 185,
        "y": 280,
        "wires": [
            [
                "d0688f7d59c11407"
            ]
        ],
        "l": false
    },
    {
        "id": "f09ab5cd9f569a2e",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "MongoQuery",
        "func": "const query = ` [\n {\n   \"$match\": {\n     \"DocumentType.Code\": \"MS\",\n     \"State.ProcessingState\": {\"$in\": [\"ISS\",\"PRC\"]}\n   }\n },\n {\n   \"$addFields\": {\n     \"RootAdi\": {\n       \"$arrayElemAt\": [\n         {\n           \"$filter\": {\n             \"input\": {\"$ifNull\": [\"$DocumentAttributes\", []]},\n             \"as\": \"attribute\",\n             \"cond\": {\"$eq\": [\"$$attribute.AttributeCode\", \"ROOTADI\"]}\n           }\n         },\n         0\n       ]\n     },\n     \"Sevk_Tarihi\": {\n       \"$arrayElemAt\": [\n         {\n           \"$filter\": {\n             \"input\": {\"$ifNull\": [\"$DocumentAttributes\", []]},\n             \"as\": \"attribute\",\n             \"cond\": {\"$eq\": [\"$$attribute.AttributeCode\", \"SEVK_TARIHI\"]}\n           }\n         },\n         0\n       ]\n     }\n   }\n },\n {\n   \"$addFields\": {\n     \"Sevk_Tarihi\": {\n       \"$dateToString\": {\n         \"format\": \"%d-%m-%Y\",\n         \"date\": \"$Sevk_Tarihi.DateValue\",\n         \"timezone\": \"Europe/Istanbul\"\n       }\n     }\n   }\n },\n {\n   \"$match\": {\n     \"RootAdi.StrValue\": {\n       \"$exists\": true,\n       \"$ne\": null,\n       \"$ne\": \"\"\n     }\n   }\n },\n {\n   \"$lookup\": {\n     \"from\": \"Partner\",\n     \"localField\": \"DocCompanies.SoldTo\",\n     \"foreignField\": \"Code\",\n     \"as\": \"PartnerInfo\"\n   }\n },\n {\n   \"$unwind\": \"$PartnerInfo\"\n },\n {\n   \"$match\": {\n     \"Sevk_Tarihi\": \"${msg.netsisDataPayload.Sevk_Tarihi}\",\n     \"RootAdi.StrValue\": \"${msg.netsisDataPayload.RootAdi}\"\n   }\n },\n \n {\n   \"$project\": {\n     \"_id\": 0,\n     \"DocNum\": 1,\n     \"CustomerCode\": \"$PartnerInfo.Code\"   \n   }\n },\n {\n   \"$limit\": 1048575\n }\n]\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 250,
        "wires": [
            [
                "0bbdcace95a115dc"
            ]
        ]
    },
    {
        "id": "974235a583ec5c3a",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "Map",
        "func": "// Eşleştirme için kullanılan nesne\nconst netsisData = {\n    RootAdi: \"RootAdi\",\n    Sevk_Tarihi: \"Sevk_Tarihi\"\n    \n};\n\n// Gelen veriyi kontrol et\nconst data = msg.req?.body?.Data || msg.payload;\nif (!Array.isArray(data)) {\n    node.error(\"Data dizisi bulunamadi veya geçersiz\", msg);\n    return null;\n}\n\n// Sonucu oluştur\nconst result = Object.keys(netsisData).reduce((acc, key) => {\n    const field = netsisData[key];\n    const foundItem = data.find(x => x.attributeName === field);\n    if (foundItem) {\n        acc[key] = foundItem.attributeValue;\n    }\n    return acc;\n}, {});\n\n// Çıktıyı ayarla\nmsg.netsisDataPayload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 210,
        "wires": [
            [
                "b497f89d456d6f8c",
                "f09ab5cd9f569a2e"
            ]
        ]
    },
    {
        "id": "b497f89d456d6f8c",
        "type": "http response",
        "z": "a7ee580a04fce715",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 370,
        "y": 70,
        "wires": []
    },
    {
        "id": "523e432be6e87245",
        "type": "debug",
        "z": "a7ee580a04fce715",
        "name": "OUT1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 360,
        "wires": []
    },
    {
        "id": "9745125644406b0b",
        "type": "debug",
        "z": "a7ee580a04fce715",
        "name": "debug 347",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 130,
        "wires": []
    },
    {
        "id": "e194f5d5179a5d1a",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "Index",
        "func": "let items = msg.listPayload;\n  \n\nlet index = msg.index||0;\nif (index >= items.length || items.length===0) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\n\nmsg.payload = item;\n\n\n//msg.flowName = msg.propIntegration?.code ||\"NTSP000V1_0\";\n \n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 250,
        "wires": [
            [
                "9745125644406b0b",
                "453e9db4754ea5a4"
            ],
            []
        ]
    },
    {
        "id": "6759b21ca829f00a",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "Response",
        "func": "let items = msg.listPayload;\nmsg.index++;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n   \n    return [msg,null ];\n}\n\n    \n    \n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 250,
        "wires": [
            [
                "cf31d964faabdff3"
            ],
            [
                "fc8dc4079898bebd",
                "2e0a421badf6cabe"
            ]
        ]
    },
    {
        "id": "cf31d964faabdff3",
        "type": "link out",
        "z": "a7ee580a04fce715",
        "name": "STNSINV000V1Order(MMSQL)ResponseOut",
        "mode": "link",
        "links": [
            "6a611acbadda7e8a"
        ],
        "x": 885,
        "y": 240,
        "wires": []
    },
    {
        "id": "6a611acbadda7e8a",
        "type": "link in",
        "z": "a7ee580a04fce715",
        "name": "STNSINV000V1Order(MMSQL)ResponseIn",
        "links": [
            "cf31d964faabdff3"
        ],
        "x": 455,
        "y": 180,
        "wires": [
            [
                "e194f5d5179a5d1a"
            ]
        ]
    },
    {
        "id": "fea05456e81ce21c",
        "type": "http response",
        "z": "a7ee580a04fce715",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1060,
        "y": 530,
        "wires": []
    },
    {
        "id": "fc8dc4079898bebd",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "Response Message",
        "func": "msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.customerCode\nconst returnMessage={\n    customerCode: msg?.customerCode,\n    receivingNumber: msg.receivingNumber\n    \n};\nmsg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-STNSINV000V1.0\", // C# kodundaki varsayılan değeri koruduk\n    Detail: JSON.stringify(returnMessage) || \"Transfer Error\",\n    DefinitionLang: JSON.stringify(returnMessage) || \"Transfer Error\",\n    Data: [returnMessage],\n    Module: \"Node-Red-STNSINV000V1.0\"\n};\n\n\n\nmsg.res = global.get('STNSINV000V1_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 480,
        "wires": [
            [
                "fea05456e81ce21c"
            ]
        ]
    },
    {
        "id": "5e51caa44032bb62",
        "type": "debug",
        "z": "a7ee580a04fce715",
        "name": "debug 461",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "listPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 320,
        "wires": []
    },
    {
        "id": "3b4ca15731eb4acf",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "a7ee580a04fce715",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Seller_Invoice",
                "type": "str"
            }
        ],
        "x": 1155,
        "y": 330,
        "wires": [
            [
                "4b4529910ea5b826"
            ]
        ],
        "l": false
    },
    {
        "id": "4b4529910ea5b826",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "a7ee580a04fce715",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Stock",
                "type": "str"
            },
            {
                "name": "IsDelete",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1205,
        "y": 330,
        "wires": [
            []
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "2e0a421badf6cabe",
        "type": "function",
        "z": "a7ee580a04fce715",
        "name": "MongoQuery",
        "func": "msg.query = '{\"Location\":\"68998f1c0e54867d4b908ebc\"}';\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 280,
        "wires": [
            [
                "3b4ca15731eb4acf"
            ]
        ]
    },
    {
        "id": "36fb8f3d03f5079e",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "re",
        "func": "global.set('STNSWAY000V2_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 385,
        "y": 190,
        "wires": [
            [
                "fec22d81dda4c5c4"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "5cae34a1ec866405",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "function 160",
        "func": "if (msg.payload[0]) {\n    msg.listPayload=msg.payload;\n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 350,
        "wires": [
            [
                "faed198381b04e69",
                "378e598205491a97"
            ],
            [
                "03ac914f28423176"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "6cc2db9ac0463b5b",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "b9b9f807cf3a5e6a",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Document",
                "type": "str"
            }
        ],
        "x": 465,
        "y": 350,
        "wires": [
            [
                "5cae34a1ec866405",
                "d4e5b7e68bcb4855"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "1ca9e3981a7fb27f",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "b9b9f807cf3a5e6a",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Sales_Waybill",
                "type": "str"
            }
        ],
        "x": 395,
        "y": 350,
        "wires": [
            [
                "6cc2db9ac0463b5b"
            ]
        ],
        "l": false
    },
    {
        "id": "1260c4f0c3a650f3",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "MongoQueryV4",
        "func": "const query = `  \n\n[\n  {\n    \"$match\": {\n      \"DocumentType.Code\": \"MS\",\n      \"State.ProcessingState\": { \"$in\": [\"CNF\", \"ISS\"] }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"RootAdi\": {\n        \"$arrayElemAt\": [\n          {\n            \"$filter\": {\n              \"input\": { \"$ifNull\": [\"$DocumentAttributes\", []] },\n              \"as\": \"attribute\",\n              \"cond\": { \"$eq\": [\"$$attribute.AttributeCode\", \"ROOTADI\"] }\n            }\n          },\n          0\n        ]\n      },\n      \"Sevk_Tarihi_Raw\": {\n        \"$arrayElemAt\": [\n          {\n            \"$filter\": {\n              \"input\": { \"$ifNull\": [\"$DocumentAttributes\", []] },\n              \"as\": \"attribute\",\n              \"cond\": { \"$eq\": [\"$$attribute.AttributeCode\", \"SEVK_TARIHI\"] }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"Sevk_Tarihi\": {\n        \"$dateToString\": {\n          \"format\": \"%d-%m-%Y\",\n          \"date\": \"$Sevk_Tarihi_Raw.DateValue\",\n          \"timezone\": \"Europe/Istanbul\"\n        }\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"RootAdi.StrValue\": {\n        \"$exists\": true,\n        \"$ne\": null,\n        \"$ne\": \"\"\n      }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Partner\",\n      \"localField\": \"DocCompanies.SoldTo\",\n      \"foreignField\": \"Code\",\n      \"as\": \"PartnerInfo\"\n    }\n  },\n  {\n    \"$unwind\": \"$PartnerInfo\"\n  },\n  {\n    \"$match\": {\n      \"Sevk_Tarihi\": \"${msg.netsisDataPayload.Sevk_Tarihi}\",\n      \"RootAdi.StrValue\": \"${msg.netsisDataPayload.RootAdi}\"\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"DocNum\": 1,\n      \"CustomerCode\": \"$PartnerInfo.Code\"\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Stock\",\n      \"localField\": \"DocNum\",\n      \"foreignField\": \"DocumentNo\",\n      \"as\": \"StockInfo\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"BatchDetails\": {\n        \"$reduce\": {\n          \"input\": \"$StockInfo\",\n          \"initialValue\": [],\n          \"in\": {\n            \"$concatArrays\": [\n              \"$$value\",\n              {\n                \"$cond\": {\n                  \"if\": { \"$ifNull\": [\"$$this.BatchNo\", false] },\n                  \"then\": [\n                    {\n                      \"BatchNo\": \"$$this.BatchNo\",\n                      \"ProductCode\": \"$$this.ProductCode\",\n                      \"BaseQuantity\": { \"$toDouble\": \"$$this.BaseQuantity\" }\n                    }\n                  ],\n                  \"else\": []\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$unwind\": \"$BatchDetails\"\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"DocNum\": \"$DocNum\",\n        \"CustomerCode\": \"$CustomerCode\",\n        \"BatchNo\": \"$BatchDetails.BatchNo\",\n        \"ProductCode\": \"$BatchDetails.ProductCode\"\n      },\n      \"TotalBaseQuantityForBatchProduct\": { \"$sum\": \"$BatchDetails.BaseQuantity\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Product\",\n      \"localField\": \"_id.ProductCode\",\n      \"foreignField\": \"Code\",\n      \"as\": \"ProductInfo\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"ProductName\": {\n        \"$let\": {\n          \"vars\": {\n            \"product\": { \"$arrayElemAt\": [\"$ProductInfo\", 0] }\n          },\n          \"in\": {\n            \"$cond\": [\n              {\n                \"$and\": [\n                  { \"$ne\": [\"$$product\", null] },\n                  { \"$isArray\": \"$$product.Descriptions.DefaultDefinition\" },\n                  { \"$gt\": [{ \"$size\": \"$$product.Descriptions.DefaultDefinition\" }, 0] }\n                ]\n              },\n              { \"$arrayElemAt\": [\"$$product.Descriptions.DefaultDefinition\", 0] },\n              \"TANIMSIZ\"\n            ]\n          }\n        }\n      },\n      \"KLUnit\": {\n        \"$arrayElemAt\": [\n          {\n            \"$filter\": {\n              \"input\": { \"$ifNull\": [{ \"$arrayElemAt\": [\"$ProductInfo.Units\", 0] }, []] },\n              \"as\": \"unit\",\n              \"cond\": { \"$eq\": [\"$$unit.UnitCode\", \"KL\"] }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"QuantityInKL\": {\n        \"$cond\": {\n          \"if\": {\n            \"$and\": [\n              { \"$ne\": [\"$KLUnit\", null] },\n              { \"$gt\": [{ \"$toDouble\": \"$KLUnit.Divisor\" }, 0] },\n              { \"$gt\": [\"$TotalBaseQuantityForBatchProduct\", 0] }\n            ]\n          },\n          \"then\": {\n            \"$round\": [\n              {\n                \"$divide\": [\n                  \"$TotalBaseQuantityForBatchProduct\",\n                  { \"$toDouble\": \"$KLUnit.Divisor\" }\n                ]\n              },\n              2\n            ]\n          },\n          \"else\": 0\n        }\n      }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"DocNum\": \"$_id.DocNum\",\n        \"CustomerCode\": \"$_id.CustomerCode\"\n      },\n      \"BatchItems\": {\n        \"$push\": {\n          \"$concat\": [\n            \"$_id.ProductCode\",\",\", \"$_id.BatchNo\", \",KL: \", { \"$toString\": \"$QuantityInKL\" }\n          ]\n        }\n      }\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"DocNum\": \"$_id.DocNum\",\n      \"CustomerCode\": \"$_id.CustomerCode\",\n      \"BatchDetailsCombined\": \"$BatchItems\"\n    }\n  },\n  {\n    \"$sort\": {\n      \"DocNum\": 1\n    }\n  }\n]\n\n`;\n\nmsg.query = query;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 300,
        "wires": [
            [
                "1ca9e3981a7fb27f"
            ]
        ]
    },
    {
        "id": "fec22d81dda4c5c4",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "Map",
        "func": "// Eşleştirme için kullanılan nesne\nconst netsisData = {\n    RootAdi: \"RootAdi\",\n    Sevk_Tarihi: \"Sevk_Tarihi\",\n    PINAR_PL_ADET:\"PL_ADET\",\n    Lot_Basilsin:\"Lot_Basilsin\"\n\n    \n};\n\n// Gelen veriyi kontrol et\nconst data = msg.req?.body?.Data || msg.payload;\nif (!Array.isArray(data)) {\n    node.error(\"Data dizisi bulunamadi veya geçersiz\", msg);\n    return null;\n}\n\n// Sonucu oluştur\nconst result = Object.keys(netsisData).reduce((acc, key) => {\n    const field = netsisData[key];\n    const foundItem = data.find(x => x.attributeName === field);\n    if (foundItem) {\n        acc[key] = foundItem.attributeValue;\n    }\n    return acc;\n}, {});\n\n// Çıktıyı ayarla\nmsg.netsisDataPayload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 220,
        "wires": [
            [
                "1260c4f0c3a650f3"
            ]
        ]
    },
    {
        "id": "faed198381b04e69",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "Index",
        "func": "\n// let items = msg.listPayload;\n// msg.index= msg.index||0;\n\n\n// // Eğer msg.processedIndexes yoksa oluştur\n// msg.processedIndexes = msg.processedIndexes || [];\n// msg.processedOrderNum = msg.processedOrderNum || [];\n\n\n// if (msg.index >= items.length || items.length===0) {\n//     return [null, msg]; \n// }\n// if (msg.processedIndexes.includes(msg.index)) {\n//     node.warn(`Index ${msg.index} zaten işlendi. +1 ...`);\n//     msg.index = msg.index + 1;\n//     let item = items[msg.index];\n//     msg.payload = item;\n//     msg.processedOrderNum.push(items[msg.index].DocNum)\n\n//     return [msg, null]; \n// }\n// if (msg.processedOrderNum.includes(items[msg.index].DocNum)) {\n//     msg.index = msg.index+1;\n//     msg.payload = items[msg.index];\n//     return [msg, null];\n// }\n\n// msg.index = msg.index; \n// let item = items[msg.index];\n// msg.payload = item;\n// msg.processedIndexes.push(msg.index);\n// msg.processedOrderNum.push(items[msg.index].DocNum)\n\n// //msg.flowName = msg.propIntegration?.code ||\"NTSP000V1_0\";\n \n\n// return [msg, null];\n\nlet items = msg.listPayload || [];\nmsg.index = msg.index || 0;\nmsg.processedIndexes = msg.processedIndexes || [];\nmsg.processedOrderNum = msg.processedOrderNum || [];\n\n// Liste boşsa veya index sona geldiyse, çıkışı durdur\nif (items.length === 0 || msg.index >= items.length) {\n    return [null, msg];\n}\n\n\nwhile (\n    msg.index < items.length && \n    (msg.processedIndexes.includes(msg.index) || \n     msg.processedOrderNum.includes(items[msg.index].DocNum))\n)\n {\n     \n    msg.index += 1;\n}\n\n \nif (msg.index >= items.length) {\n    return [null, msg];\n}\n\n \nlet item = items[msg.index];\nmsg.payload = item;\n\n \nmsg.processedIndexes.push(msg.index);\nmsg.processedOrderNum.push(item.DocNum);\n\n \nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            [
                "fa57934125b2f401",
                "53be90dcf68af321"
            ],
            []
        ]
    },
    {
        "id": "4fa51f250e5cd2d4",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "Response",
        "func": "let items = msg.listPayload;\nmsg.index++;\nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg];\n}\nelse {\n   \n    return [msg,null ];\n}\n\n    \n    \n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 320,
        "wires": [
            [
                "e1f78cd6eff2f003"
            ],
            [
                "a078af6eb18db823"
            ]
        ]
    },
    {
        "id": "e1f78cd6eff2f003",
        "type": "link out",
        "z": "b9b9f807cf3a5e6a",
        "name": "STNSINV000V1Order(MMSQL)ResponseOut",
        "mode": "link",
        "links": [
            "17366f10c40e0d11"
        ],
        "x": 1285,
        "y": 300,
        "wires": []
    },
    {
        "id": "17366f10c40e0d11",
        "type": "link in",
        "z": "b9b9f807cf3a5e6a",
        "name": "STNSINV000V1Order(MMSQL)ResponseIn",
        "links": [
            "e1f78cd6eff2f003"
        ],
        "x": 725,
        "y": 250,
        "wires": [
            [
                "faed198381b04e69"
            ]
        ]
    },
    {
        "id": "d56746e06db542ba",
        "type": "http response",
        "z": "b9b9f807cf3a5e6a",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1170,
        "y": 430,
        "wires": []
    },
    {
        "id": "a078af6eb18db823",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "name": "Response Message",
        "func": "// msg.receivingNumber = msg.payload.Data.FatUst.FATIRS_NO;\n// msg.customerCode\n// const returnMessage={\n//     customerCode: msg?.customerCode,\n//     receivingNumber: msg.receivingNumber\n    \n// };\nmsg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-STNSWAY000V2.0\", // C# kodundaki varsayılan değeri koruduk\n    Detail: \"İSLEM BASARILI\",\n    DefinitionLang: \"İSLEM BASARILI\",\n    Data: \"İSLEM BASARILI\",\n    Module: \"Node-Red-STNSWAY000V2.0\"\n};\nmsg.res = global.get('STNSWAY000V2_res')\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 380,
        "wires": [
            [
                "d56746e06db542ba"
            ]
        ]
    },
    {
        "id": "fa57934125b2f401",
        "type": "subflow:9a81aa788c97846f",
        "z": "b9b9f807cf3a5e6a",
        "name": "",
        "x": 1000,
        "y": 270,
        "wires": [
            [
                "4fa51f250e5cd2d4",
                "b7b9d547dc30545d"
            ]
        ]
    },
    {
        "id": "b7b9d547dc30545d",
        "type": "debug",
        "z": "b9b9f807cf3a5e6a",
        "name": "debug 454",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 210,
        "wires": []
    },
    {
        "id": "53be90dcf68af321",
        "type": "debug",
        "z": "b9b9f807cf3a5e6a",
        "name": "debug 455",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 120,
        "wires": []
    },
    {
        "id": "5627eb3ea8441454",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "d": true,
        "name": "MongoQuery",
        "func": "const query = ` [\n {\n   \"$match\": {\n     \"DocumentType.Code\": \"MS\",\n     \"State.ProcessingState\": {\"$in\": [\"CNF\",\"ISS\"]}\n   }\n },\n {\n   \"$addFields\": {\n     \"RootAdi\": {\n       \"$arrayElemAt\": [\n         {\n           \"$filter\": {\n             \"input\": {\"$ifNull\": [\"$DocumentAttributes\", []]},\n             \"as\": \"attribute\",\n             \"cond\": {\"$eq\": [\"$$attribute.AttributeCode\", \"ROOTADI\"]}\n           }\n         },\n         0\n       ]\n     },\n     \"Sevk_Tarihi\": {\n       \"$arrayElemAt\": [\n         {\n           \"$filter\": {\n             \"input\": {\"$ifNull\": [\"$DocumentAttributes\", []]},\n             \"as\": \"attribute\",\n             \"cond\": {\"$eq\": [\"$$attribute.AttributeCode\", \"SEVK_TARIHI\"]}\n           }\n         },\n         0\n       ]\n     }\n   }\n },\n {\n   \"$addFields\": {\n     \"Sevk_Tarihi\": {\n       \"$dateToString\": {\n         \"format\": \"%d-%m-%Y\",\n         \"date\": \"$Sevk_Tarihi.DateValue\",\n         \"timezone\": \"Europe/Istanbul\"\n       }\n     }\n   }\n },\n {\n   \"$match\": {\n     \"RootAdi.StrValue\": {\n       \"$exists\": true,\n       \"$ne\": null,\n       \"$ne\": \"\"\n     }\n   }\n },\n {\n   \"$lookup\": {\n     \"from\": \"Partner\",\n     \"localField\": \"DocCompanies.SoldTo\",\n     \"foreignField\": \"Code\",\n     \"as\": \"PartnerInfo\"\n   }\n },\n {\n   \"$unwind\": \"$PartnerInfo\"\n },\n {\n   \"$match\": {\n     \"Sevk_Tarihi\": \"${msg.netsisDataPayload.Sevk_Tarihi}\",\n     \"RootAdi.StrValue\": \"${msg.netsisDataPayload.RootAdi}\"\n   }\n },\n \n {\n   \"$project\": {\n     \"_id\": 0,\n     \"DocNum\": 1,\n     \"CustomerCode\": \"$PartnerInfo.Code\"   \n   }\n },\n {\n   \"$limit\": 1048575\n }\n]\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 90,
        "wires": [
            []
        ],
        "info": "Batch nuamralı istendiğinde sorguda duzenleme yapıldı "
    },
    {
        "id": "49a4e98814ab8716",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "d": true,
        "name": "MongoQueryV2",
        "func": "const query = ` \n\n[\n {\n   \"$match\": {\n     \"DocumentType.Code\": \"MS\",\n     \"State.ProcessingState\": {\"$in\": [\"CNF\",\"ISS\"]}\n   }\n },\n {\n   \"$addFields\": {\n     \"RootAdi\": {\n       \"$arrayElemAt\": [\n         {\n           \"$filter\": {\n             \"input\": {\"$ifNull\": [\"$DocumentAttributes\", []]},\n             \"as\": \"attribute\",\n             \"cond\": {\"$eq\": [\"$$attribute.AttributeCode\", \"ROOTADI\"]}\n           }\n         },\n         0\n       ]\n     },\n     \"Sevk_Tarihi\": {\n       \"$arrayElemAt\": [\n         {\n           \"$filter\": {\n             \"input\": {\"$ifNull\": [\"$DocumentAttributes\", []]},\n             \"as\": \"attribute\",\n             \"cond\": {\"$eq\": [\"$$attribute.AttributeCode\", \"SEVK_TARIHI\"]}\n           }\n         },\n         0\n       ]\n     }\n   }\n },\n {\n   \"$addFields\": {\n     \"Sevk_Tarihi\": {\n       \"$dateToString\": {\n         \"format\": \"%d-%m-%Y\",\n         \"date\": \"$Sevk_Tarihi.DateValue\",\n         \"timezone\": \"Europe/Istanbul\"\n       }\n     }\n   }\n },\n {\n   \"$match\": {\n     \"RootAdi.StrValue\": {\n       \"$exists\": true,\n       \"$ne\": null,\n       \"$ne\": \"\"\n     }\n   }\n },\n {\n   \"$lookup\": {\n     \"from\": \"Partner\",\n     \"localField\": \"DocCompanies.SoldTo\",\n     \"foreignField\": \"Code\",\n     \"as\": \"PartnerInfo\"\n   }\n },\n {\n   \"$unwind\": \"$PartnerInfo\"\n },\n {\n   \"$match\": {\n     \"Sevk_Tarihi\": \"${msg.netsisDataPayload.Sevk_Tarihi}\",\n     \"RootAdi.StrValue\": \"${msg.netsisDataPayload.RootAdi}\"\n   }\n },\n \n \n \n {\n   \"$project\": {\n     \"_id\": 0,\n     \"DocNum\": 1,\n     \"CustomerCode\": \"$PartnerInfo.Code\"   \n   }\n },\n \n   {\n   \"$lookup\": {\n     \"from\": \"Stock\",\n     \"localField\": \"DocNum\",\n     \"foreignField\": \"DocumentNo\",\n     \"as\": \"StockInfo\"\n   }\n },\n{\n  \"$addFields\": {\n    \"BatchNumbers\": {\n      \"$setUnion\": [\n        {\n          \"$reduce\": {\n            \"input\": \"$StockInfo\",\n            \"initialValue\": [],\n            \"in\": {\n              \"$concatArrays\": [\n                \"$$value\",\n                {\n                  \"$cond\": {\n                    \"if\": {\"$ifNull\": [\"$$this.BatchNo\", false]},\n                    \"then\": [\"$$this.BatchNo\"],\n                    \"else\": []\n                  }\n                }\n              ]\n            }\n          }\n        },\n        []\n      ]\n    }\n  }\n},\n {\n   \"$project\": {\n     \"_id\": 0,\n     \n     \"BatchNumbers\": 1,\n     \"DocNum\": 1,\n     \"CustomerCode\": 1   \n   }\n },\n \n \n {\n   \"$limit\": 1048575\n }\n]\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 130,
        "wires": [
            []
        ],
        "info": "BARCH NUMARALARI  TEK OLARKA VERIR"
    },
    {
        "id": "378e598205491a97",
        "type": "debug",
        "z": "b9b9f807cf3a5e6a",
        "name": "debug 473",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 610,
        "wires": []
    },
    {
        "id": "03ac914f28423176",
        "type": "debug",
        "z": "b9b9f807cf3a5e6a",
        "name": "debug 474",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 620,
        "wires": []
    },
    {
        "id": "d4e5b7e68bcb4855",
        "type": "debug",
        "z": "b9b9f807cf3a5e6a",
        "name": "debug 475",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 510,
        "wires": []
    },
    {
        "id": "6e6f053a202ad609",
        "type": "function",
        "z": "b9b9f807cf3a5e6a",
        "d": true,
        "name": "MongoQueryV3",
        "func": "const query = `  \n\n[\n  {\n    \"$match\": {\n      \"DocumentType.Code\": \"MS\",\n      \"State.ProcessingState\": { \"$in\": [\"CNF\", \"ISS\"] }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"RootAdi\": {\n        \"$arrayElemAt\": [\n          {\n            \"$filter\": {\n              \"input\": { \"$ifNull\": [\"$DocumentAttributes\", []] },\n              \"as\": \"attribute\",\n              \"cond\": { \"$eq\": [\"$$attribute.AttributeCode\", \"ROOTADI\"] }\n            }\n          },\n          0\n        ]\n      },\n      \"Sevk_Tarihi_Raw\": {\n        \"$arrayElemAt\": [\n          {\n            \"$filter\": {\n              \"input\": { \"$ifNull\": [\"$DocumentAttributes\", []] },\n              \"as\": \"attribute\",\n              \"cond\": { \"$eq\": [\"$$attribute.AttributeCode\", \"SEVK_TARIHI\"] }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"Sevk_Tarihi\": {\n        \"$dateToString\": {\n          \"format\": \"%d-%m-%Y\",\n          \"date\": \"$Sevk_Tarihi_Raw.DateValue\",\n          \"timezone\": \"Europe/Istanbul\"\n        }\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"RootAdi.StrValue\": {\n        \"$exists\": true,\n        \"$ne\": null,\n        \"$ne\": \"\"\n      }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Partner\",\n      \"localField\": \"DocCompanies.SoldTo\",\n      \"foreignField\": \"Code\",\n      \"as\": \"PartnerInfo\"\n    }\n  },\n  {\n    \"$unwind\": \"$PartnerInfo\"\n  },\n  {\n    \"$match\": {\n      \"Sevk_Tarihi\": \"${msg.netsisDataPayload.Sevk_Tarihi}\",\n      \"RootAdi.StrValue\": \"${msg.netsisDataPayload.RootAdi}\"\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"DocNum\": 1,\n      \"CustomerCode\": \"$PartnerInfo.Code\"\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Stock\",\n      \"localField\": \"DocNum\",\n      \"foreignField\": \"DocumentNo\",\n      \"as\": \"StockInfo\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"BatchDetails\": {\n        \"$reduce\": {\n          \"input\": \"$StockInfo\",\n          \"initialValue\": [],\n          \"in\": {\n            \"$concatArrays\": [\n              \"$$value\",\n              {\n                \"$cond\": {\n                  \"if\": { \"$ifNull\": [\"$$this.BatchNo\", false] },\n                  \"then\": [\n                    {\n                      \"BatchNo\": \"$$this.BatchNo\",\n                      \"ProductCode\": \"$$this.ProductCode\",\n                      \"BaseQuantity\": { \"$toDouble\": \"$$this.BaseQuantity\" }\n                    }\n                  ],\n                  \"else\": []\n                }\n              }\n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$unwind\": \"$BatchDetails\"\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"DocNum\": \"$DocNum\",\n        \"CustomerCode\": \"$CustomerCode\",\n        \"BatchNo\": \"$BatchDetails.BatchNo\",\n        \"ProductCode\": \"$BatchDetails.ProductCode\"\n      },\n      \"TotalBaseQuantityForBatchProduct\": { \"$sum\": \"$BatchDetails.BaseQuantity\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Product\",\n      \"localField\": \"_id.ProductCode\",\n      \"foreignField\": \"Code\",\n      \"as\": \"ProductInfo\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"ProductName\": {\n        \"$let\": {\n          \"vars\": {\n            \"product\": { \"$arrayElemAt\": [\"$ProductInfo\", 0] }\n          },\n          \"in\": {\n            \"$cond\": [\n              {\n                \"$and\": [\n                  { \"$ne\": [\"$$product\", null] },\n                  { \"$isArray\": \"$$product.Descriptions.DefaultDefinition\" },\n                  { \"$gt\": [{ \"$size\": \"$$product.Descriptions.DefaultDefinition\" }, 0] }\n                ]\n              },\n              { \"$arrayElemAt\": [\"$$product.Descriptions.DefaultDefinition\", 0] },\n              \"TANIMSIZ\"\n            ]\n          }\n        }\n      },\n      \"KLUnit\": {\n        \"$arrayElemAt\": [\n          {\n            \"$filter\": {\n              \"input\": { \"$ifNull\": [{ \"$arrayElemAt\": [\"$ProductInfo.Units\", 0] }, []] },\n              \"as\": \"unit\",\n              \"cond\": { \"$eq\": [\"$$unit.UnitCode\", \"KL\"] }\n            }\n          },\n          0\n        ]\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"QuantityInKL\": {\n        \"$cond\": {\n          \"if\": {\n            \"$and\": [\n              { \"$ne\": [\"$KLUnit\", null] },\n              { \"$gt\": [{ \"$toDouble\": \"$KLUnit.Divisor\" }, 0] },\n              { \"$gt\": [\"$TotalBaseQuantityForBatchProduct\", 0] }\n            ]\n          },\n          \"then\": {\n            \"$round\": [\n              {\n                \"$divide\": [\n                  \"$TotalBaseQuantityForBatchProduct\",\n                  { \"$toDouble\": \"$KLUnit.Divisor\" }\n                ]\n              },\n              2\n            ]\n          },\n          \"else\": 0\n        }\n      }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"DocNum\": \"$_id.DocNum\",\n        \"CustomerCode\": \"$_id.CustomerCode\"\n      },\n      \"BatchItems\": {\n        \"$push\": {\n          \"$concat\": [\n            \"URUN ADI \", \"$ProductName\", \": BATCHNO \", \"$_id.BatchNo\", \": KL ADET \", { \"$toString\": \"$QuantityInKL\" }\n          ]\n        }\n      }\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"DocNum\": \"$_id.DocNum\",\n      \"CustomerCode\": \"$_id.CustomerCode\",\n      \"BatchDetailsCombined\": \"$BatchItems\"\n    }\n  },\n  {\n    \"$sort\": {\n      \"DocNum\": 1\n    }\n  }\n]\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3386111447866c45",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "ParamsCheck",
        "func": "let orderNumber = msg.payload.DocNum;\n \nmsg.orderCustomerCode = msg.payload.CustomerCode;\nmsg.orderNumber = msg.payload.DocNum;\nmsg.batchNumbers = msg.payload.BatchDetailsCombined;\nmsg.lot_Basilsin= msg.netsisDataPayload.Lot_Basilsin;\nif (!orderNumber) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Invalid OrderNo\"\n          \n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 170,
        "wires": [
            [
                "1e9abc41fc7c6d3d"
            ],
            [
                "cfc270f826c8b3d1"
            ]
        ]
    },
    {
        "id": "3005911c94bfd092",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "Get FatUst",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `SELECT\n    A.CARI_KODU,\n    A.KOD1,\n    A.KOD2,\n    A.TARIH,\n    A.ODEMETARIHI,\n    A.SIPARIS_TEST,\n    A.D_YEDEK10,\n    A.DOVBAZTAR,\n    fek.ACIK1, fek.ACIK2, fek.ACIK3, fek.ACIK4, fek.ACIK5,\n    fek.ACIK6, fek.ACIK7, fek.ACIK8, fek.ACIK9, fek.ACIK10,\n    fek.ACIK11, fek.ACIK12, fek.ACIK13, fek.ACIK14, fek.ACIK15, fek.ACIK16,\n    A.PROJE_KODU,\n    A.GEN_ISK1T, a.GEN_ISK2T, a.GEN_ISK3T,\n    A.GEN_ISK1O, a.GEN_ISK2O, a.GEN_ISK3O,\n    DOVIZ_TIPI,\n    A.KDV,\n    A.FAT_ALTM2,\n    A.FAT_ALTM1,\n    A.ODEMEGUNU,\n    ISNULL(a.PLA_KODU, cs.PLASIYER_KODU) AS PLASIYER_KODU,\n    ek.KT_PLAKA_6 AS TASIYICI_PLAKA,    \n    A.CARI_KOD2,  \n    ISNULL(ek.KT_SOFOR_6,NULL) AS TASIYICI_SOFORADI,\n    ISNULL(ek.KT_SOFOR2_6,NULL) AS TASIYICI2_SOFORADI,\n\tISNULL(ek.KT_SOFOR3_6,NULL) AS TASIYIC3I_SOFORADI,\n    ek.KT_TASIYICI_ADI_6 AS TASICI_ADI,\n\tISNULL(ek.KT_TASIYICIVKN_6,NULL) TASIYICI_VKN,\n    ek.KT_TC_SOFOR_6 AS TCSOFOR,\n    ek.KT_TC_SOFOR_2_6 AS TCSOFOR2,\n\tek.KT_TC_SOFOR_3_6 AS TCSOFOR3,\n   ISNULL(ek.KT_PALET_6, FLOOR(  (\n SELECT SUM(\n SP.STHAR_GCMIK * \n    CASE \n        WHEN S.OLCU_BR1 = 'PL' THEN 1.0\n        WHEN S.OLCU_BR2 = 'PL' THEN CAST(S.PAY_1 AS FLOAT) / NULLIF(CAST(S.PAYDA_1 AS FLOAT), 0)\n        WHEN S.OLCU_BR3 = 'PL' THEN CAST(S.PAY2 AS FLOAT) / NULLIF(CAST(S.PAYDA2 AS FLOAT), 0)\n        WHEN B.OLCUBIRIMI='PL' THEN  CAST(B.PAY AS FLOAT) / NULLIF(CAST(B.PAYDA AS FLOAT), 0)     \n\t\tELSE 0\n    END) AS CarpanliMiktar\nFROM TBLSIPATRA SP \nLEFT JOIN TBLSTBIRIM B ON B.KOD =SP.STOK_KODU\nLEFT JOIN TBLSTSABIT S  ON S.STOK_KODU=SP.STOK_KODU\n WHERE SP.FISNO=A.FATIRS_NO))) AS PL_ADET\n  ,CS.ISKONTO_ORANI\n  ,cs.GRUP_KODU\n  ,A.EXPORTTYPE   \nFROM TBLSIPAMAS A\nJOIN TBLCASABIT cs ON a.CARI_KODU = cs.CARI_KOD\nJOIN TBLFATUEK fek ON fek.FATIRSNO = a.FATIRS_NO AND fek.CKOD = a.CARI_KODU AND fek.FKOD = 6\nJOIN TBLSIPAMASSAHAEK ek ON ek.FATIRS_NO = a.FATIRS_NO AND ek.CARI_KODU = a.CARI_KODU \nWHERE A.FATIRS_NO='${msg.orderNumber}' AND  A.FTIRSIP=6 and A.CARI_KODU='${msg.orderCustomerCode}'\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 120,
        "wires": [
            [
                "8b454a70eb94f7bc"
            ]
        ]
    },
    {
        "id": "28fb3eda907bf994",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "Res",
        "func": "msg.res = global.get('STNSWAY000V2_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 70,
        "wires": [
            [
                "b2eb188d27c2a8a8"
            ]
        ]
    },
    {
        "id": "8b454a70eb94f7bc",
        "type": "subflow:d296b4008b6072d8",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "MssqlFatUst",
        "x": 690,
        "y": 170,
        "wires": [
            [
                "0dc9b34aee71e639"
            ],
            [
                "cfc270f826c8b3d1"
            ]
        ]
    },
    {
        "id": "684dc9db1dd3463a",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\nconst requiredFieldsFatUst = [\n   // { path: \"FatUst.Sube_Kodu\", message: \"Sube_Kodu zorunlu.\" },\n    { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" },\n  //  { path: \"FatUst.FATIRS_NO\", message: \"FATIRS_NO zorunlu.\" },\n  //  { path: \"KalemAdedi\", message: \"KalemAdedi zorunlu.\" }\n];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },\n    { path: \"Sira\", message: \"Kalems içindeki (value)  Sira zorunlu.\" },\n    { path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\nrequiredFieldsFatUst.forEach(field => {\n    const value = getValue(msg.payload, field.path);\n\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(field.message);\n    }\n});\n\n\n\nmsg.payload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {\n   \n    msg.statusCode = 400;\n    msg.payload = {\n    Type: 2, //\"ERROR\",    \n    Sender: \"Node-Red-S2NSALESWAYBILLV2\",\n    Detail:\"Zorunlu Alan Kontrolü\",\n    DefinitionLang: \"Sorgu sirasinda hata\",\n    Data: errors,\n    Module: \"Node-Red-S2NSALESWAYBILLV2\"\n};\nmsg.statusCode = 400;\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload_netsis = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 470,
        "wires": [
            [
                "75345cb3b7d99b7a"
            ],
            [
                "28fb3eda907bf994"
            ]
        ]
    },
    {
        "id": "0dc9b34aee71e639",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "SetFatUst",
        "func": "\n\n\nlet data = msg.payload[0];\n\n// Gelen data'nın array olup olmadığını kontrol et\nif (!data) {\n    msg.payload = {\n        success: false, errors: {\n            message: \"Data is either empty or not an array\",\n            query: msg.query\n        }\n    };\n    msg.statusCode = 400;\n\n    return [null, msg];\n}\nmsg.netsisDataPayload = msg.netsisDataPayload || {}\nmsg.netsisDataPayload.FatUst = {};\nmsg.netsisDataPayload.EIrsEkBilgi = {};\n\nmsg.netsisDataPayload.FatUst.CariKod = data.CARI_KODU;\nmsg.netsisDataPayload.FatUst.CARI_KOD2 = data.CARI_KOD2;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLA_KODU;\nmsg.netsisDataPayload.FatUst.SIPARIS_TEST = data.SIPARIS_TEST;\nmsg.netsisDataPayload.FatUst.FIYATTARIHI = data.SIPARIS_TEST;\nmsg.netsisDataPayload.FatUst.ODEMETARIHI = data.ODEMETARIHI;\nmsg.netsisDataPayload.FatUst.KOD1 = data.KOD1;\nmsg.netsisDataPayload.FatUst.KOD2 = data.KOD2;\nmsg.netsisDataPayload.FatUst.KDV = data.KDV;\nmsg.netsisDataPayload.FatUst.FAT_ALTM1 = data.FAT_ALTM1;\nmsg.netsisDataPayload.FatUst.FAT_ALTM2 = data.FAT_ALTM2;\nmsg.netsisDataPayload.FatUst.ODEMEGUNU = data.ODEMEGUNU;\nmsg.netsisDataPayload.FatUst.EKACK1 = data.ACIK1;\nmsg.netsisDataPayload.FatUst.EKACK2 = data.ACIK2;\nmsg.netsisDataPayload.FatUst.EKACK3 = data.ACIK3;\nmsg.netsisDataPayload.FatUst.EKACK4 = data.acik4;\nmsg.netsisDataPayload.FatUst.EKACK5 = data.acik5;\nmsg.netsisDataPayload.FatUst.EKACK6 = data.acik6;\nmsg.netsisDataPayload.FatUst.EKACK7 = data.acik7;\nmsg.netsisDataPayload.FatUst.EKACK8 = data.acik8;\nmsg.netsisDataPayload.FatUst.EKACK9 = data.acik9;\nmsg.netsisDataPayload.FatUst.EKACK10 = data.acik10;\nmsg.netsisDataPayload.FatUst.EKACK11 = data.acik11;\nmsg.netsisDataPayload.FatUst.EKACK12 = data.acik12;\nmsg.netsisDataPayload.FatUst.EKACK13 = data.acik13;\nmsg.netsisDataPayload.FatUst.EKACK14 = data.acik14;\nmsg.netsisDataPayload.FatUst.EKACK15 = data.acik15;\nmsg.netsisDataPayload.FatUst.EKACK16 = data.acik16;\nmsg.netsisDataPayload.FatUst.PLA_KODU = data.PLASIYER_KODU;\nmsg.netsisDataPayload.FatUst.EXPORTTYPE = data.EXPORTTYPE;\nmsg.netsisDataPayload.FatUst.Proje_Kodu = data.PROJE_KODU;\n// msg.netsisDataPayload.FatUst.GEN_ISK1T = data.GEN_ISK1T;\n// msg.netsisDataPayload.FatUst.GEN_ISK2T = data.GEN_ISK2T;\n// msg.netsisDataPayload.FatUst.GEN_ISK3T = data.GEN_ISK3T;\nmsg.netsisDataPayload.FatUst.GEN_ISK1O = data.ISKONTO_ORANI || data.GEN_ISK1o;\n// msg.netsisDataPayload.FatUst.GEN_ISK2O = data.GEN_ISK2o;\n// msg.netsisDataPayload.FatUst.GEN_ISK3O = data.GEN_ISK3o;\n\n\n\n// TASITICI BILGILERI\n\nmsg.RootInfo = {};\nmsg.RootInfo.TASIYICI_PLAKA = data.TASIYICI_PLAKA;\nmsg.RootInfo.TASIYICI_SOFORADI = data.TASIYICI_SOFORADI;\nmsg.RootInfo.TASIYICI2_SOFORADI = data.TASIYICI2_SOFORADI;\nmsg.RootInfo.TASIYICI3_SOFORADI = data.TASIYICI3_SOFORADI;\n\nmsg.RootInfo.TASIYICI_TASICI_ADI = data.TASICI_ADI;\n\nmsg.RootInfo.TCSOFOR = data.TCSOFOR;\nmsg.RootInfo.TCSOFOR2 = data.TCSOFOR2;\nmsg.RootInfo.TCSOFOR3 = data.TCSOFOR3;\n\nmsg.RootInfo.TASIYICI_VKN = data.TASIYICI_VKN;\n\n \n \n\nmsg.RootInfo.PL_ADET =   data.PL_ADET;\n\n \nmsg.RootInfo.CARIGRUP_KODU = data.GRUP_KODU;\n\n\n\n\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 220,
        "wires": [
            [
                "4692d5c85e8e0950"
            ],
            [
                "28fb3eda907bf994"
            ]
        ]
    },
    {
        "id": "906aefec5b39222b",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "SetFatKalem",
        "func": "let data = msg.payload;\nlet netsisDataInvoice = msg.netsisDataPayload?.FatUst;\n\nmsg.netsisDataPayload.Kalems =[]\nlet errorDec=[];\n// Veri kontrolü\nif (Array.isArray(data) && data.length > 0 ) {\n    //bize gelen post isteğinden alıacak veri netsisDataItemList alınacak \n    data.forEach(netsisData => {\n        //gelen veri kısıtı ile alıacak  netsis sipariş datası netsisData\n       \n       \n        if (netsisData)\n         {\n            let itemData = {\n                StokKodu: netsisData.STOK_KODU,\n                Sira: netsisData.SIRA,\n                STra_GCMIK: netsisData.PL_ADET,\n                STra_TAR: netsisDataInvoice.Tarih,\n                ...(netsisData.kur >0 ? {\n                    STra_NF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    STra_BF: netsisData.STHAR_DOVFIAT * netsisData.kur,\n                    DOVIZ_TURU: netsisData.STHAR_DOVTIP,\n                    DOVTIP: netsisData.STHAR_DOVTIP,\n                    STra_DOVTIP: netsisData.STHAR_DOVTIP\n                }:{\n                    STra_NF: netsisData.STHAR_NF,\n                    STra_BF: netsisData.STHAR_BF\n                }),\n               STra_KDV:netsisData.STHAR_KDV,\n                STra_SIPNUM: netsisData.FISNO,\n                ProjeKodu: netsisData.PROJE_KODU,\n                STra_SIPKONT:netsisData.STRA_SIPKONT,\n                Stra_IrsKont: netsisData.STRA_SIPKONT,\n                STra_HTUR: \"H\",\n                DEPO_KODU: netsisData.DEPO_KODU,\n                Firmadovtut: netsisData.STra_GCMIK,\n                STra_SatIsk: netsisData.STHAR_SATISK,\n                STra_SatIsk2: netsisData.STHAR_SATISK2,\n                STra_SatIsk3: netsisData.STRA_SATISK3,\n                STra_SatIsk4: netsisData.STRA_SATISK4,\n                STra_SatIsk5: netsisData.STRA_SATISK5,\n                STra_SatIsk6: netsisData.STRA_SATISK6,\n                STra_ODEGUN: netsisDataInvoice.ODEMEGUNU,\n                //SatirBaziAciks: Array.from({ length: 10 }, (_, i) => netsisData[`ACIKLAMA1${i+1}`]) ,\n                Plasiyer_Kodu: netsisData.PLASIYER_KODU,\n                Ekalanneden: netsisData.EKALAN_NEDEN,\n                Ekalan: netsisData.EKALAN,\n                Ekalan1: netsisData.EKALAN1,\n                STra_testar: netsisData.STHAR_TESTAR,\n                Olcubr: netsisData.OLCUBR,\n                STra_CARI_KOD: netsisData.STHAR_CARIKOD,\n                STra_GC: \"C\",\n                Stra_FiiliTar: netsisDataInvoice.Tarih,\n                D_YEDEK10: netsisDataInvoice.Tarih,\n                Stra_Exporttype: msg.netsisDataPayload.FatUst.EXPORTTYPE\n\n            }        \n           \n            msg.netsisDataPayload.Kalems.push(itemData)\n\n         }\n         else {\n            errorDec.push(`No record was found in Netsis for this order (${netsisDataInvoice.FATIRS_NO}).Stock Code: ${netsisData?.STOK_KODU }`)\n            \n         }\n          \n\n          \n    });\n    if (errorDec.length > 0){\n        msg.payload = {\n            success: false,\n             errors: {\n                message: errorDec\n\n            }\n        };\n        msg.statusCode = 400;\n\n        return [null, msg]; // Hata durumu\n    }\n    msg.payload = msg.netsisDataPayload;\n    return [msg,null ]\n}  \n   \n  else {\n    // Hata mesajını düzenle\n    msg.payload = { success: false, errors: {\n        message: \"Data is either empty or not an array\" \n      \n    }};\n    msg.statusCode = 400;\n\n    return [null, msg]; // Hata durumu\n}\n\n\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 210,
        "wires": [
            [
                "55619b73c7a1b9f0",
                "684dc9db1dd3463a"
            ],
            [
                "28fb3eda907bf994"
            ]
        ]
    },
    {
        "id": "cfc270f826c8b3d1",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    Type: 2, //\"ERROR\",    \n    Sender: \"Node-Red-S2NSALESWAYBILLV2\",\n    Detail: msg.query,\n    DefinitionLang: \"Sorgu sirasinda hata UST BILGILER\",\n    Data: [],\n    Module: \"Node-Red-S2NSALESWAYBILLV2\"\n};\n\n\n\n\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 300,
        "wires": [
            [
                "28fb3eda907bf994"
            ]
        ]
    },
    {
        "id": "fecffdc39a544257",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "ErrorMssqlRes",
        "func": "msg.payload = {\n    Type: 2, //\"ERROR\",    \n    Sender: \"Node-Red-S2NSALESWAYBILLV2\",\n    Detail: msg.query,\n    DefinitionLang: \"Sorgu sirasinda hata Kalem Bilgileri\",\n    Data: [],\n    Module: \"Node-Red-S2NSALESWAYBILLV2\"\n};\n\n\n\n\nmsg.statusCode = 400;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "28fb3eda907bf994"
            ]
        ]
    },
    {
        "id": "b2eb188d27c2a8a8",
        "type": "http response",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "",
        "statusCode": "404",
        "headers": {},
        "x": 1560,
        "y": 50,
        "wires": []
    },
    {
        "id": "36f4ad3b8d30e7d9",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "SEND NETSIS",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000)); // UTC+3\n\nconst year = utcNow.getFullYear();\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0');\nconst day = String(utcNow.getDate()).padStart(2, '0');\nconst hours = String(utcNow.getHours()).padStart(2, '0');\nconst minutes = String(utcNow.getMinutes()).padStart(2, '0');\n\nconst formattedDate = `${year}-${month}-${day} ${hours}:${minutes}`;\n\n\nlet fullName = msg.RootInfo.TASIYICI_SOFORADI || \"\";\n\n// İsmi boşluklara göre parçala\nlet nameParts = fullName.trim().split(\" \");\n\n// İlk kelimeyi ad olarak al\nlet firstName = nameParts[0] || \"\";\n\n// Geri kalan her şeyi soyad olarak birleştir\nlet lastName = nameParts.slice(1).join(\" \") || \"Bilinmiyor\";\n\nmsg.FatNo = msg.payload.Data;\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        CARI_KOD2: null,\n        FATIRS_NO: msg.payload.Data,\n        Tarih: formattedDate,\n        SIPARIS_TEST: formattedDate,\n        Tip: 2,\n        KOD1: null,\n        KOD2: null,\n        TIPI: msg?.netsisDataPayload?.FatUst?.EXPORTTYPE ? 6:2,\n        Aciklama: \"SFORIN\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: formattedDate,\n        KDV_DAHILMI: false,\n        PLA_KODU: null,\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: formattedDate,\n        EfaturaCarisiMi: true,\n        EIrsaliye: true,\n        FIYATTARIHI: formattedDate,\n        ODEMETARIHI: formattedDate,\n        KOSULTARIHI: formattedDate,\n        FAT_ALTM1: null,\n        FAT_ALTM2: null,\n        ODEMEGUNU: null,\n        GEN_ISK1T: null,\n        GEN_ISK2T: null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null,\n        EXPORTTYPE:null\n    },\n    EIrsEkBilgi: {\n        PLAKA: msg.RootInfo.TASIYICI_PLAKA || null,\n        TASIYICIVKN: msg.RootInfo.TASIYICI_VKN,\n        TASIYICIADI: msg.RootInfo.TASIYICI_TASICI_ADI,\n        TASIYICIILCE: msg.RootInfo.TASIYICI_CARI_ILCE || \"IZMIR\",\n        TASIYICIIL: msg.RootInfo.TASIYICI_CARI_IL || \"IZMIR\",\n        TASIYICIULKE: msg.RootInfo.TASIYICI_ULKEADI || \"TR\",\n        TASIYICIPOSTAKODU: msg.RootInfo.TASIYICI_POSTAKODU || \"35000\",\n        SOFOR1ADI: msg.RootInfo.TASIYICI_SOFORADI?.trim()?.split(' ')[0],\n        SOFOR1SOYADI: msg.RootInfo.TASIYICI_SOFORADI?.trim()?.split(' ')[1],\n        SOFOR1ACIKLAMA: \"\",\n        SOFOR1TCKN: msg.RootInfo.TCSOFOR,\n        SOFOR2ADI: msg.RootInfo.TASIYICI2_SOFORADI?.trim()?.split(' ')[0],\n        SOFOR2SOYADI: msg.RootInfo.TASIYICI2_SOFORADI?.trim()?.split(' ')[1],\n        SOFOR2ACIKLAMA: null,\n        SOFOR2TCKN: msg.RootInfo?.TCSOFOR2,\n        SOFOR3ADI: msg.RootInfo.TASIYICI3_SOFORADI?.trim()?.split(' ')[0],\n        SOFOR3SOYADI: msg.RootInfo.TASIYICI3_SOFORADI?.trim()?.split(' ')[1],\n        SOFOR3ACIKLAMA: null,\n        SOFOR3TCKN: msg.RootInfo?.TCSOFOR3,\n        SEVKTAR: formattedDate,\n        DORSEPLAKA1: null,\n        DORSEPLAKA2: null,\n        DORSEPLAKA3: null,\n        MATBUKULLANILSIN: false,\n    },\n\n    Kalems:\n    {\n        StokKodu: null,\n        Sira: 1,\n        STra_FATIRSNO: null,\n        STra_GCMIK: 0,\n        STra_TAR: formattedDate,\n        STra_NF: 0,\n        STra_BF: 0,\n        STra_KDV: 0,\n        DOVIZ_TURU: null,\n        DOVTIP: null,\n        STra_DOVTIP: 0,\n        STra_HTUR: \"H\",\n        STra_SIPNUM: null,\n        Plasiyer_Kodu: null,\n        Ekalanneden: null,\n        Ekalan: null,\n        Ekalan1: null,\n        STra_testar: formattedDate,\n        Olcubr: 1,\n        ProjeKodu: null,\n        STra_FTIRSIP: null,\n        STra_CARI_KOD: null,\n        STra_GC: \"C\",\n        DEPO_KODU: 0,\n        STra_ACIK: null,\n        TesMik: 0,\n        Stra_FiiliTar: formattedDate,\n        D_YEDEK10: formattedDate,\n        STra_SIPKONT: null,\n        Stra_IrsKont: null,\n        Firmadovtut: 0,\n        STra_SatIsk: null,\n        STra_SatIsk2: null,\n        STra_SatIsk3: null,\n        STra_SatIsk4: null,\n        STra_SatIsk5: null,\n        STra_SatIsk6: null,\n        STra_ODEGUN: null,\n        S_Yedek2: 'SFORIN',\n        SatirBaziAciks: [],\n        Stra_Exporttype:null\n\n    },\n\n};\n\nfunction splitByLength(str, length) {\n    const result = [];\n    for (let i = 0; i < str.length; i += length) {\n        result.push(str.substring(i, i + length));\n    }\n    return result;\n}\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.payload_netsis.data || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n    // gelen post isteğin itemlerin sayısı\n    KalemAdedi: msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 2,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FiyatSistemineGoreHesapla: false,\n    FatUst: {},\n    EIrsEkBilgi: {},\n    Kalems: []\n\n};\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nresult.Kalems = kalemlerData.map((kalem) => {\n    const defaultKalem = defaultValue.Kalems;\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nresult.EIrsEkBilgi = defaultValue.EIrsEkBilgi;\n\n\n//kalemlere PL kadar cıkış yap\n\nconst PLItem = defaultValue.Kalems;\nconst maxSira = Math.max(\n    ...result.Kalems\n        .map(obj => obj.Sira)  // Sira değerlerini al\n        .filter(sira => sira !== null && sira !== undefined) // null ve undefined olanları çıkar\n);\nconst refOrderItem = result.Kalems?.[0];\n//100106-7\n\n\nif (msg.RootInfo.CARIGRUP_KODU == 'PINAR') {\n\n\n    const hedefStokKodlari = [\"50033\", \"50008\", \"50007\", \"50067\"];  // İÇ PİYASA İÇİN PALET SECIMI\n    let eslesmeVar = false;\n    eslesmeVar = result.Kalems.some(kalem => hedefStokKodlari.includes(kalem.StokKodu));\n    if (eslesmeVar)\n        PLItem.StokKodu = \"100006\";\n    else\n        PLItem.StokKodu = \"100004\";\n\n}\n\nelse\n    PLItem.StokKodu = \"100110\";\n\n\n\n\n\n  const batchNumbers = {};\n\n    msg.batchNumbers?.forEach(item => {\n        const [stokKodu, batchNo, klPart] = item.split(',');\n        const kl = parseInt(klPart.split(':')[1].trim(), 10);\n\n        if (!batchNumbers[stokKodu]) {\n            batchNumbers[stokKodu] = {\n                details: []\n            };\n        }\n\n        batchNumbers[stokKodu].details.push({\n            batchNo: batchNo.trim(),\n            kl\n        });\n    });\n    result.Kalems.filter(f => f.STra_SIPNUM !== null).forEach(x => {\n        x.SatirBaziAciks = [];\n\n        if (batchNumbers[x.StokKodu]) {\n            batchNumbers[x.StokKodu].details?.forEach(batch => {\n                const batchStr = `${batch.batchNo} KL: ${batch.kl},`;\n                x.SatirBaziAciks.push(batchStr);\n            });\n        }\n    });\n\n\nPLItem.Sira = maxSira + 1;\n//PLItem.STra_FATIRSNO = msg.payload.Data;\nPLItem.STra_GCMIK = msg.RootInfo.PL_ADET == 0 ? 1 : Math.ceil(msg.RootInfo.PL_ADET);\n\nPLItem.Plasiyer_Kodu = refOrderItem.Plasiyer_Kodu;\nPLItem.ProjeKodu = refOrderItem.ProjeKodu;\nPLItem.STra_FTIRSIP = refOrderItem.STra_FTIRSIP;\nPLItem.DEPO_KODU = \"1\";\nPLItem.STra_SIPNUM = null;\n\n\nresult.Kalems.push(PLItem)\nmsg.dataPayload = result;\n\nmsg.flowName = \"S2N_RECEVING_URL\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "85729c6b5003de2d",
                "f14f4cf4c8fa0da2"
            ]
        ]
    },
    {
        "id": "4692d5c85e8e0950",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "GetFatKalem",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT STOK_KODU,\n\t   EKALAN,\n       EKALAN1,\n        EKALAN_NEDEN,\n       MUH_KODU,\n       STHAR_DOVTIP,\n       STHAR_DOVFIAT,\n       STHAR_NF,\n       STHAR_BF,\n       STHAR_KDV,\n       STHAR_GCMIK,\n       CASE\n           WHEN STHAR_DOVFIAT=0 THEN 0\n           ELSE STHAR_BF/STHAR_DOVFIAT\n       END AS kur,\n       STHAR_KOD1,\n       STHAR_SATISK*100000 AS STHAR_SATISK,\n       STHAR_MALFISK,\n       STHAR_SATISK2,\n       STRA_SATISK3,\n       STRA_SATISK4,\n       STRA_SATISK5,\n       STRA_SATISK6,\n       PROJE_KODU,\n\t   SIRA,\n\t   OLCUBR,\n\t   FISNO ,\n\t   STRA_SIPKONT,\n\t   ACIKLAMA1,\n\t   ACIKLAMA2,\n\t   ACIKLAMA3,\n\t   ACIKLAMA4,\n\t   ACIKLAMA5,\n\t   ACIKLAMA6,\n\t   ACIKLAMA7,\n\t   ACIKLAMA8,\n\t   ACIKLAMA9,\n\t   ACIKLAMA10,\n     PLASIYER_KODU,\n      A.STHAR_TESTAR,\n     A.STHAR_CARIKOD,\n     A.DEPO_KODU,\n\t A.STHAR_GCMIK * CASE WHEN CEVRIM = 0 THEN 1 ELSE CEVRIM END AS PL_ADET\n\n\t   \nFROM TBLSIPATRA A\nLEFT JOIN  TBLSSATIRAC SAC ON SAC.INCKEYNO= A.INCKEYNO\nWHERE STHAR_FTIRSIP=6 \n  AND FISNO='${msg.orderNumber}'\n  AND A.STHAR_ACIKLAMA='${msg.orderCustomerCode}'\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 110,
        "wires": [
            [
                "af023af94181b884"
            ]
        ]
    },
    {
        "id": "af023af94181b884",
        "type": "subflow:d296b4008b6072d8",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "MssqlFatKalem",
        "x": 930,
        "y": 160,
        "wires": [
            [
                "906aefec5b39222b",
                "d96c6fc73b0fab89"
            ],
            [
                "fecffdc39a544257"
            ]
        ]
    },
    {
        "id": "85729c6b5003de2d",
        "type": "subflow:fc936f675a46124b",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 640,
        "y": 520,
        "wires": [
            [
                "eb4c99d365e1a4ff"
            ],
            [
                "2958c6d8acacb567"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "2958c6d8acacb567",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "Error Response Message",
        "func": " \n \n\nmsg.payload = {\n    Type: 2, //\"ERROR\",    \n    Sender: \"Node-Red-STNSWAY000V2_res\",\n    Detail: msg.netsisTokenErrorMessage || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n    DefinitionLang: msg.netsisTokenErrorMessage || \"Sorgu sirasinda hata\",\n    Data: [],\n    Module: \"Node-Red-STNSWAY000V2_res\"\n};\n\nmsg.res = global.get('STNSWAY000V2_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 600,
        "wires": [
            [
                "40c425937dc52dc6",
                "593718fd5412c8f3"
            ]
        ]
    },
    {
        "id": "40c425937dc52dc6",
        "type": "http response",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 790,
        "y": 650,
        "wires": []
    },
    {
        "id": "75345cb3b7d99b7a",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "GetSalesWaybillNumber",
        "func": " \n\nmsg.dataPayload=\n{\n    Code: msg?.netsisDataPayload?.FatUst?.EXPORTTYPE ? \"IHR\" : \"Z40\",\n  DocumentType: 2,\n  Use64BitService: true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 510,
        "wires": [
            [
                "7dd8c854a74e3b3e"
            ]
        ]
    },
    {
        "id": "7dd8c854a74e3b3e",
        "type": "subflow:fc936f675a46124b",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips/NewEItemSlipsNumber",
                "type": "str"
            }
        ],
        "x": 390,
        "y": 590,
        "wires": [
            [
                "36f4ad3b8d30e7d9"
            ],
            [
                "2958c6d8acacb567"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "eb4c99d365e1a4ff",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "Taslak Oluştur",
        "func": "msg.gibFatNo = msg.payload.Data.FatUst.GIB_FATIRS_NO;\nmsg.dataPayload=\n{\n    \"BelgeNo\": msg.FatNo,\n    \"Tip\": 2,\n    \"DizaynNo\": msg.RootInfo.CARIGRUP_KODU=='PINAR' ?  14: msg.lot_Basilsin == \"true\" ? 31:19,\n    \"DizaynKontrol\": true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 450,
        "wires": [
            [
                "df76bf9bd31a8555"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "df76bf9bd31a8555",
        "type": "subflow:fc936f675a46124b",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument",
                "type": "str"
            }
        ],
        "x": 910,
        "y": 520,
        "wires": [
            [
                "f7e622e545fa9b76"
            ],
            [
                "2958c6d8acacb567"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "4fc18c5de7776a03",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "Taslak Sil",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\n\n\nlet query = `\n DELETE   FROM TBLEIRSMAS WHERE EFATINCKEYNO IN (SELECT INCKEYNO FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}');\n DELETE   FROM TBLEIRSMAS WHERE FATIRS_NO IN (SELECT GIB_FATIRS_NO FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}');\n DELETE  FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}'\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 440,
        "wires": [
            [
                "af1e1d2d7e89fa74"
            ]
        ]
    },
    {
        "id": "af1e1d2d7e89fa74",
        "type": "subflow:d296b4008b6072d8",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "MssqlFatKalem",
        "x": 1340,
        "y": 490,
        "wires": [
            [],
            [
                "55fbd934494ddc31"
            ]
        ]
    },
    {
        "id": "dc9dd4f28bcfe149",
        "type": "subflow:fc936f675a46124b",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument/ShowEDocument",
                "type": "str"
            }
        ],
        "x": 1140,
        "y": 500,
        "wires": [
            [
                "4fc18c5de7776a03",
                "d4200f42526d143e"
            ],
            [
                "2958c6d8acacb567"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "f7e622e545fa9b76",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "Dizayn Kaydet",
        "func": "msg.dataPayload=\n{\n    \"GIBDocumentNumber\": msg.gibFatNo,\n    \"HtmlPath\": env.get('InvoiceHtmlPath_GUVENLIK'),  \n    \"DocumentBoxType\": 2, \n    \"EDocumentType\": 1\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 450,
        "wires": [
            [
                "dc9dd4f28bcfe149"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "55fbd934494ddc31",
        "type": "debug",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "debug 411",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 610,
        "wires": []
    },
    {
        "id": "d4200f42526d143e",
        "type": "debug",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "debug 413",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 600,
        "wires": []
    },
    {
        "id": "55619b73c7a1b9f0",
        "type": "debug",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "debug 420",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 240,
        "wires": []
    },
    {
        "id": "593718fd5412c8f3",
        "type": "debug",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "debug 444",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 590,
        "wires": []
    },
    {
        "id": "1e9abc41fc7c6d3d",
        "type": "function",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "Sipariş aktarıldımı kontrol",
        "func": "\nmsg.flowName = \"STNSINV000V1\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM TBLSTHAR \n            WHERE STHAR_SIPNUM = '${msg.orderNumber}'\n        )\n        THEN 1 \n        ELSE 0 \n    END AS KayitVarMi;\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 30,
        "wires": [
            [
                "ed885f427ff9e190"
            ]
        ]
    },
    {
        "id": "ed885f427ff9e190",
        "type": "subflow:d296b4008b6072d8",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "MssqlFatUst",
        "x": 360,
        "y": 70,
        "wires": [
            [
                "e37265fa75804079"
            ],
            []
        ]
    },
    {
        "id": "e37265fa75804079",
        "type": "switch",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "",
        "property": "payload[0].KayitVarMi",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 110,
        "wires": [
            [],
            [
                "3005911c94bfd092"
            ]
        ]
    },
    {
        "id": "f14f4cf4c8fa0da2",
        "type": "debug",
        "z": "9a81aa788c97846f",
        "g": "a4c5260a2239eb4a",
        "name": "debug 476",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 710,
        "wires": []
    },
    {
        "id": "d96c6fc73b0fab89",
        "type": "debug",
        "z": "9a81aa788c97846f",
        "g": "7f0d10fd6c405ddc",
        "name": "debug 482",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 190,
        "wires": []
    },
    {
        "id": "ebd0afbed1c80e10",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "re",
        "func": "global.set('IsShipmentMatchingOrderV001_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 185,
        "y": 70,
        "wires": [
            [
                "8b5c44bf3405be44"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "8b5c44bf3405be44",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "Map",
        "func": "// Eşleştirme için kullanılan nesne\nconst validateData = {\n    DocNum: \"DocNum\"\n};\n\n// Gelen veriyi kontrol et\nconst data = msg.req?.body?.Data;\nif (!Array.isArray(data)) {\n    node.error(\"Data dizisi bulunamadi veya geçersiz\", msg);\n    return null;\n}\n\n// Sonucu oluştur\nconst result = Object.keys(validateData).reduce((acc, key) => {\n    const field = validateData[key];\n    const foundItem = data.find(x => x.attributeName === field);\n    if (foundItem) {\n        acc[key] = foundItem.attributeValue;\n    }\n    return acc;\n}, {});\n\n// Çıktıyı ayarla\nmsg.validateDataPayload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 110,
        "wires": [
            [
                "536d793e39dfd529"
            ]
        ]
    },
    {
        "id": "536d793e39dfd529",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "MongoQuery",
        "func": "const query = `[\n  {\n    \"$match\": {\n      \"DocNum\":  \"${msg.validateDataPayload.DocNum}\" ,\n      \"DocumentType.Code\": \"MS\"\n    }\n  },\n  {\n    \"$unwind\": \"$Items\"\n  },\n   {\n    \"$match\": {\n      \"Items.ProductCode\": {\"$ne\": \"290003\"}\n    }\n  },\n  {\n    \"$addFields\": {\n      \"BaseQuantityDouble\": {\n        \"$convert\": {\n          \"input\": \"$Items.BaseQuantity\",\n          \"to\": \"double\",\n          \"onError\": 0,\n          \"onNull\": 0\n        }\n      }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": \"$Items.ProductCode\",\n      \"SiparisMiktari\": { \"$sum\": \"$BaseQuantityDouble\" },\n      \"DocNum\": { \"$first\": \"$DocNum\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Stock\",\n      \"let\": {\n        \"urun\": \"$_id\",\n        \"belge\": \"$DocNum\"\n      },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$ProductCode\", \"$$urun\"] },\n                { \"$eq\": [\"$DocumentNo\", \"$$belge\"] },\n                { \"$eq\": [\"$Location\", \"67dc0925581631b9ec845c39\"] }\n              ]\n            }\n          }\n        },\n        {\n          \"$addFields\": {\n            \"StockQty\": {\n              \"$convert\": {\n                \"input\": \"$BaseQuantity\",\n                \"to\": \"double\",\n                \"onError\": 0,\n                \"onNull\": 0\n              }\n            }\n          }\n        },\n        {\n          \"$group\": {\n            \"_id\": null,\n            \"StokMiktari\": { \"$sum\": \"$StockQty\" }\n          }\n        }\n      ],\n      \"as\": \"StokBilgi\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"StokMiktari\": {\n        \"$ifNull\": [{ \"$first\": \"$StokBilgi.StokMiktari\" }, 0]\n      }\n    }\n  },\n {\n  \"$addFields\": {\n    \"Fark\": {\n      \"$round\": [\n        { \"$subtract\": [{ \"$toDouble\": \"$SiparisMiktari\" }, { \"$toDouble\": \"$StokMiktari\" }] },\n        2  \n      ]\n    },\n    \"EsitMi\": {\n      \"$eq\": [\n        { \"$round\": [{ \"$toDouble\": \"$SiparisMiktari\" }, 2] },\n        { \"$round\": [{ \"$toDouble\": \"$StokMiktari\" }, 2] }\n      ]\n    }\n  }\n},\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"DocNum\": 1,\n      \"ProductCode\": \"$_id\",\n      \"SiparisMiktari\": 1,\n      \"StokMiktari\": 1,\n      \"Fark\": 1,\n      \"EsitMi\": 1\n    }\n  }\n]`;\n\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 150,
        "wires": [
            [
                "cd88fa94079794a5"
            ]
        ]
    },
    {
        "id": "cd88fa94079794a5",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "994d236e9dad90dc",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "IsShipmentMatchingOrder",
                "type": "str"
            }
        ],
        "x": 215,
        "y": 200,
        "wires": [
            [
                "8b2ee275c7264646"
            ]
        ],
        "l": false
    },
    {
        "id": "8b2ee275c7264646",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "994d236e9dad90dc",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Document",
                "type": "str"
            }
        ],
        "x": 265,
        "y": 200,
        "wires": [
            [
                "d0ed67c45609b7a0"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "d0ed67c45609b7a0",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "function 161",
        "func": "if (msg.payload[0]) {\n    msg.listPayload=msg.payload;\n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 235,
        "y": 240,
        "wires": [
            [
                "a283738be192ac31"
            ],
            [
                "798316f4a9a7b3d9"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "798316f4a9a7b3d9",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "Error Response Message",
        "func": " \nconst returnMessage={\n    SiparisNumaras: msg.validateDataPayload.DocNum\n    \n    \n};\n// BaseResponse formatına uygun hale getirelim\nmsg.payload = {\n    Type:2, //\"ERROR\",    \n    Sender: \"Node-Red-IsShipmentMatchingOrderV001\", // C# kodundaki varsayılan değeri koruduk\n    Detail: JSON.stringify(returnMessage) + \" Sevkiyat Kapatma Hata Veri Bulunamadi\",\n    DefinitionLang: JSON.stringify(returnMessage) + \" Sevkiyat Kapatma Hata Veri Bulunamadi\",\n    Data: [returnMessage],        \n    Module: \"Node-Red-IsShipmentMatchingOrderV001\"  \n};\n\nmsg.res = global.get('IsShipmentMatchingOrderV001_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 310,
        "wires": [
            [
                "b504bbe5a1f8f9ba"
            ]
        ]
    },
    {
        "id": "b504bbe5a1f8f9ba",
        "type": "http response",
        "z": "994d236e9dad90dc",
        "name": "",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 320,
        "y": 340,
        "wires": []
    },
    {
        "id": "a283738be192ac31",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "CheckShipmentMatchOrder",
        "func": "// Gelen JSON verisini al\nlet data = msg.listPayload;\n\n// İlk \"EsitMi: false\" olan kaydı bul\nlet firstMismatch = data.find(item => item.EsitMi === false);\n\nif (firstMismatch) {\n        msg.payload = {\n        Type: 2,\n        Sender: \"Node-Red-IsShipmentMatchingOrderV001\", // C# kodundaki varsayılan değeri koruduk\n        Detail: `Hata: ilgili Siparis Icin Miktar Uyumsuzlugu ${firstMismatch.DocNum} - Stok Kodu: ${firstMismatch.ProductCode}, Fark: ${firstMismatch.Fark}` || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n        DefinitionLang: `Hata: ilgili Siparis Icin Miktar Uyumsuzlugu ${firstMismatch.DocNum} - Stok Kodu: ${firstMismatch.ProductCode}, Fark: ${firstMismatch.Fark}` || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n        Data: [firstMismatch],\n        Module: \"Node-Red-IsShipmentMatchingOrderV001\"\n    };\n    msg.res = global.get('IsShipmentMatchingOrderV001_res') \n    return [null,msg];\n}\n\n// Eğer tüm veriler eşitse, mesajı devam ettirme\nreturn [msg, null];\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 290,
        "wires": [
            [
                "381cb072e5ae2c84"
            ],
            [
                "b354f980ad91e322"
            ]
        ]
    },
    {
        "id": "b354f980ad91e322",
        "type": "http response",
        "z": "994d236e9dad90dc",
        "name": "",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 780,
        "y": 330,
        "wires": []
    },
    {
        "id": "381cb072e5ae2c84",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "MongoQuery",
        "func": "const query = `{\n  \"update\": {\n    \"filter\": { \"DocNum\": \"${msg.validateDataPayload.DocNum}\" },\n     \"update\": {\n      \"$set\": {\n        \"State.ProcessingState\": \"CNF\",\n          \"Items.$[].State.ProcessingState\": \"CNF\"\n      }\n    }\n  }\n}\n\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 250,
        "wires": [
            [
                "713ddff4e8a44959"
            ]
        ]
    },
    {
        "id": "713ddff4e8a44959",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "994d236e9dad90dc",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Document",
                "type": "str"
            },
            {
                "name": "IsUpdated",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 915,
        "y": 280,
        "wires": [
            [
                "a5f1514d1be22a86"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "a5f1514d1be22a86",
        "type": "function",
        "z": "994d236e9dad90dc",
        "name": "Error Response Message",
        "func": " \nconst returnMessage={\n    SiparisNumaras: msg.validateDataPayload.DocNum\n    \n    \n};\nmsg.payload = {\n    Type: 0,\n    Sender: \"Node-Red-IsShipmentMatchingOrderV001\",  \n    Detail: JSON.stringify(returnMessage) + \"Sevkiyat Kapatma Islemi Basaridir\" || \"Sevkiyat Kapatma Islemi Basaridir\",\n    DefinitionLang: JSON.stringify(returnMessage) + \"Sevkiyat Kapatma Islemi Basaridir\" || \"Sevkiyat Kapatma Islemi Basaridir\",\n    Data: [returnMessage],\n    Module: \"Node-Red\"\n};\n\n \nmsg.res = global.get('IsShipmentMatchingOrderV001_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 300,
        "wires": [
            [
                "8e2c573127e8d015"
            ]
        ]
    },
    {
        "id": "8e2c573127e8d015",
        "type": "http response",
        "z": "994d236e9dad90dc",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 330,
        "wires": []
    },
    {
        "id": "47c0794ac7e1b93d",
        "type": "function",
        "z": "2ad6940233ab0133",
        "name": "re",
        "func": "global.set('UpdateShipmentNum_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 70,
        "wires": [
            [
                "6705288fd4ddbfa6"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "6705288fd4ddbfa6",
        "type": "function",
        "z": "2ad6940233ab0133",
        "name": "MongoQueryV2",
        "func": "const documentNo = msg.payload.Data[0]?.documentNo||null;\nconst documentItemNo = msg.payload.Data[0]?.documentItemNo || null;\nconst newShipNum = msg.payload.Data[0].NewShipNum;\nconst irsaliyeNum = msg.payload.Data[0].irsaliyeNum;\nconst query =   {\n  update: {\n    filter: {\n      DocumentNo: documentNo,\n      DocumentItemNo: documentItemNo,\n      SourceInventoryState: \"SPC\",\n      TargetInventoryState: \"UNL\"\n    },\n    update: {\n      $set: {\n        \"TransactionAttributes.$[elem].AttributeValue\": newShipNum\n      }\n    },\n    options: {\n      arrayFilters: [\n        {\n          \"elem.AttributeName\": \"DispatchNoteNumber\",\n          \"elem.AttributeValue\": irsaliyeNum\n        }\n      ]\n    }\n  }\n};\n;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 110,
        "wires": [
            [
                "3fc8ff0644c76df6"
            ]
        ]
    },
    {
        "id": "3fc8ff0644c76df6",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "2ad6940233ab0133",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Sales_Waybill",
                "type": "str"
            }
        ],
        "x": 195,
        "y": 150,
        "wires": [
            [
                "d697d7d950fc3262"
            ]
        ],
        "l": false
    },
    {
        "id": "d697d7d950fc3262",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "2ad6940233ab0133",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Movement",
                "type": "str"
            },
            {
                "name": "IsUpdated",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 245,
        "y": 150,
        "wires": [
            [
                "e02c0e0cf17a7542"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "e02c0e0cf17a7542",
        "type": "function",
        "z": "2ad6940233ab0133",
        "name": "Response Message",
        "func": " \nmsg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-UpdateShipmentNum\", // C# kodundaki varsayılan değeri koruduk\n    Detail: JSON.stringify(msg.payload) || \"Transfer Error\",\n    DefinitionLang: ` IRSALIYE NUMARASI BASARILI BIR SEKILDE DUZENLENDI ` ,\n    Data: [msg.payload],\n    Module: \"Node-Red-UpdateShipmentNum\"\n};\n\n\n\nmsg.res = global.get('UpdateShipmentNum_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "56e2763f85d5d32f"
            ]
        ]
    },
    {
        "id": "56e2763f85d5d32f",
        "type": "http response",
        "z": "2ad6940233ab0133",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 730,
        "y": 120,
        "wires": []
    },
    {
        "id": "ed4202e0db5f2ef0",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "re",
        "func": "global.set('IsShipmentMatchingOrderItemV001_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 295,
        "y": 70,
        "wires": [
            [
                "e57cb90cd300e48a"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "e57cb90cd300e48a",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "Map",
        "func": "// Eşleştirme için kullanılan nesne\nconst validateData = {\n    DocNum: \"DocNum\",\n    ItemNo:\"ItemNo\"\n};\n\n// Gelen veriyi kontrol et\nconst data = msg.req?.body?.Data;\nif (!Array.isArray(data)) {\n    node.error(\"Data dizisi bulunamadi veya geçersiz\", msg);\n    return null;\n}\n\n// Sonucu oluştur\nconst result = Object.keys(validateData).reduce((acc, key) => {\n    const field = validateData[key];\n    const foundItem = data.find(x => x.attributeName === field);\n    if (foundItem) {\n        acc[key] = foundItem.attributeValue;\n    }\n    return acc;\n}, {});\n\n// Çıktıyı ayarla\nmsg.validateDataPayload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 160,
        "wires": [
            [
                "21ddfbd5dd38a650"
            ]
        ]
    },
    {
        "id": "21ddfbd5dd38a650",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "MongoQuery",
        "func": "const query = ` \n\n[\n  {\n    \"$match\": {\n      \"DocNum\":  \"${msg.validateDataPayload.DocNum}\" ,\n      \"DocumentType.Code\": \"MS\"\n    }\n  },\n  {\n    \"$unwind\": \"$Items\"\n  },\n  \n  {\n      \"$match\":{\n          \"Items.ItemNo\":${msg.validateDataPayload.ItemNo}\n      }\n  },\n  {\n    \"$addFields\": {\n      \"BaseQuantityDouble\": {\n        \"$convert\": {\n          \"input\": \"$Items.BaseQuantity\",\n          \"to\": \"double\",\n          \"onError\": 0,\n          \"onNull\": 0\n        }\n      }\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": \"$Items.ProductCode\",\n      \"SiparisMiktari\": { \"$sum\": \"$BaseQuantityDouble\" },\n      \"DocNum\": { \"$first\": \"$DocNum\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Stock\",\n      \"let\": {\n        \"urun\": \"$_id\",\n        \"belge\": \"$DocNum\"\n      },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$and\": [\n                { \"$eq\": [\"$ProductCode\", \"$$urun\"] },\n                { \"$eq\": [\"$DocumentNo\", \"$$belge\"] },\n                { \"$eq\": [\"$Location\", \"67dc0925581631b9ec845c39\"] }\n              ]\n            }\n          }\n        },\n        {\n          \"$addFields\": {\n            \"StockQty\": {\n              \"$convert\": {\n                \"input\": \"$BaseQuantity\",\n                \"to\": \"double\",\n                \"onError\": 0,\n                \"onNull\": 0\n              }\n            }\n          }\n        },\n        {\n          \"$group\": {\n            \"_id\": null,\n            \"StokMiktari\": { \"$sum\": \"$StockQty\" }\n          }\n        }\n      ],\n      \"as\": \"StokBilgi\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"StokMiktari\": {\n        \"$ifNull\": [{ \"$first\": \"$StokBilgi.StokMiktari\" }, 0]\n      }\n    }\n  },\n {\n  \"$addFields\": {\n    \"Fark\": {\n      \"$round\": [\n        { \"$subtract\": [{ \"$toDouble\": \"$SiparisMiktari\" }, { \"$toDouble\": \"$StokMiktari\" }] },\n        2  \n      ]\n    },\n    \"EsitMi\": {\n      \"$eq\": [\n        { \"$round\": [{ \"$toDouble\": \"$SiparisMiktari\" }, 2] },\n        { \"$round\": [{ \"$toDouble\": \"$StokMiktari\" }, 2] }\n      ]\n    }\n  }\n},\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"DocNum\": 1,\n      \"ProductCode\": \"$_id\",\n      \"SiparisMiktari\": 1,\n      \"StokMiktari\": 1,\n      \"Fark\": 1,\n      \"EsitMi\": 1\n    }\n  }\n]\n\n\n\n\n`;\n\nmsg.query = query;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 210,
        "wires": [
            [
                "7acb1b0d5c19c21e"
            ]
        ]
    },
    {
        "id": "49d9ef0a3a5f8d62",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "function 1",
        "func": "if (msg.payload[0]) {\n    msg.listPayload=msg.payload;\n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 635,
        "y": 220,
        "wires": [
            [
                "22d40d33a6e8e618"
            ],
            [
                "34a2a1068403e6cd"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "34a2a1068403e6cd",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "Error Response Message",
        "func": " \nconst returnMessage={\n    SiparisNumaras: msg.validateDataPayload.DocNum\n    \n    \n};\n// BaseResponse formatına uygun hale getirelim\nmsg.payload = {\n    type:2, //\"ERROR\",    \n    Sender: \"Node-Red-IsShipmentMatchingOrderItemV001\", // C# kodundaki varsayılan değeri koruduk\n    Detail: JSON.stringify(returnMessage) + \" Sevkiyat Item Kontrol Hata  Veri Bulunamadi\",\n    DefinitionLang: JSON.stringify(returnMessage) + \" Sevkiyat Item Kontrol Hata Veri Bulunamadi\",\n    Data: [returnMessage],        \n    Module: \"Node-Red-IsShipmentMatchingOrderItemV001\"  \n};\n\nmsg.res = global.get('IsShipmentMatchingOrderItemV001_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 270,
        "wires": [
            [
                "c54e7e27ca045c32"
            ]
        ]
    },
    {
        "id": "22d40d33a6e8e618",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "CheckShipmentMatchOrder",
        "func": "// Gelen JSON verisini al\nlet data = msg.listPayload;\n\n// İlk \"EsitMi: false\" olan kaydı bul\nlet firstMismatch = data.find(item => item.EsitMi === true);\n msg.res = global.get('IsShipmentMatchingOrderItemV001_res') \nif (firstMismatch) {\n        msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-IsShipmentMatchingOrderItemV001\", // C# kodundaki varsayılan değeri koruduk\n        Detail: `UYARI: İlgili sipariş için girilen miktar, siparişte belirtilen miktarin üzerindedir. ${firstMismatch.DocNum} - Stok Kodu: ${firstMismatch.ProductCode} Lütfen siparişi kontrol edin ve fazladan işlem yapilmadiğindan emin olun` || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n        DefinitionLang: `UYARI: İlgili sipariş için girilen miktar, siparişte belirtilen miktarin üzerindedir. ${firstMismatch.DocNum} - Stok Kodu: ${firstMismatch.ProductCode} Lütfen siparişi kontrol edin ve fazladan işlem yapilmadiğindan emin olun` || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n        Data: [firstMismatch],\n        Module: \"Node-Red-IsShipmentMatchingOrderItemV001\"\n    };\n   \n    return [null,msg];\n}\n\n \nreturn [msg, null];\n ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 150,
        "wires": [
            [
                "187918b56eb20cc1"
            ],
            [
                "5f5d101c5a60b6e7"
            ]
        ]
    },
    {
        "id": "187918b56eb20cc1",
        "type": "function",
        "z": "d2197442821c3f1f",
        "name": "function 2",
        "func": "msg.payload = {\n    type: 0,     \n    Sender: \"Node-Red-IsShipmentMatchingOrderItemV001\",\n    Detail: \"11111111111111111111111\",\n    DefinitionLang:\"122222222222222222\",  \n    Data: [],\n    Module: \"Node-Red-IsShipmentMatchingOrderItemV001\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 80,
        "wires": [
            [
                "132fa1f5503413eb"
            ]
        ]
    },
    {
        "id": "132fa1f5503413eb",
        "type": "http response",
        "z": "d2197442821c3f1f",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1340,
        "y": 220,
        "wires": []
    },
    {
        "id": "5f5d101c5a60b6e7",
        "type": "http response",
        "z": "d2197442821c3f1f",
        "name": "",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1000,
        "y": 190,
        "wires": []
    },
    {
        "id": "c54e7e27ca045c32",
        "type": "http response",
        "z": "d2197442821c3f1f",
        "name": "",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 870,
        "y": 300,
        "wires": []
    },
    {
        "id": "e493b9da939ae78c",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "d2197442821c3f1f",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Document",
                "type": "str"
            }
        ],
        "x": 505,
        "y": 190,
        "wires": [
            [
                "49d9ef0a3a5f8d62"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "7acb1b0d5c19c21e",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "d2197442821c3f1f",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "IsShipmentMatchingOrder",
                "type": "str"
            }
        ],
        "x": 455,
        "y": 190,
        "wires": [
            [
                "e493b9da939ae78c"
            ]
        ],
        "l": false
    },
    {
        "id": "c1d40b0f288918f2",
        "type": "json",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 180,
        "wires": [
            [
                "a9279d25dd0a8024"
            ]
        ]
    },
    {
        "id": "a9279d25dd0a8024",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"DispatchNoteDate\",\"target\":\"Tarih\"},{\"source\":\"PartnerCode\",\"target\":\"CariKod\"},{\"source\":\"DispatchNoteNumber\",\"target\":\"FATIRS_NO\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 660,
        "y": 270,
        "wires": [
            [
                "ee92fcd4f3c9ef3c"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "ee92fcd4f3c9ef3c",
        "type": "function",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "ParamsCheck",
        "func": "let invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\nlet invoiceCustomerCode = msg.netsisDataPayload.FatUst.CariKod;\n\nif (!invoiceNumber) {\n    msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: \"BELGE NUMARASI ZORUNLUDUR \",\n        DefinitionLang: `BELGE NUMARASI ZORUNLUDUR`,\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n\n    return [null, msg];\n}\nelse if (invoiceNumber.length !== 15){\n    msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: `BELGE NUMARASI  15 KAREKTER OLMALIDIR BELGE NUMARASINI DUZENLEYINIZ`,\n        DefinitionLang: `BELGE NUMARASI  15 KAREKTER OLMALIDIR BELGE NUMARASINI DUZENLEYINIZ`,\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n\n    return [null, msg];\n\n}\nif (!invoiceCustomerCode) {\n    msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: \"CARI KODU YOK\",\n        DefinitionLang: \"CARI KODU YOK\",\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n    \n\n    return [null, msg];\n}\n \nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 340,
        "wires": [
            [
                "023e8a9b8c3ad734"
            ],
            [
                "19589be1e18a1e3a"
            ]
        ]
    },
    {
        "id": "023e8a9b8c3ad734",
        "type": "function",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\n// const requiredFieldsFatUst = [\n   \n//     { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" }, \n// ];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },    \n    //{ path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\n// requiredFieldsFatUst.forEach(field => {\n//     const value = getValue(msg.payload, field.path);\n\n//     if (value === null || value === undefined || value === \"\") {\n//         errors.push(field.message);\n//     }\n// });\n\n \n\nmsg.netsisDataPayload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item?.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {  \n      msg.payload = {\n        Type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: \"HATA\",\n        DefinitionLang: JSON.stringify(errors),\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 310,
        "wires": [
            [
                "3462c309e5607db8"
            ],
            [
                "41b76320066d73df"
            ]
        ]
    },
    {
        "id": "19589be1e18a1e3a",
        "type": "function",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "Res",
        "func": " msg.res=global.get('STNBWAY000V1_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 925,
        "y": 523,
        "wires": [
            [
                "41b76320066d73df"
            ]
        ]
    },
    {
        "id": "3462c309e5607db8",
        "type": "function",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "function 5",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\nconst year = utcNow.getFullYear();\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\nvar formattedDate = year + '-' + month + '-' + day;\nlet originalDate = msg.netsisDataPayload?.FatUst?.Tarih; // \"27-06-2025\"\nnode.warn(originalDate);\n// Gün, ay, yıl olarak parçala\nlet [day_, month_, year_] = originalDate.split(\"-\");\n\noriginalDate=`${year_}-${month_}-${day_}`;\nmsg.netsisDataPayload.FatUst.Tarih = originalDate;\n\n\n\nconst defaultValue = {\n    FatUst: {        \n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        FATIRS_NO: null,\n        Tarih: originalDate||formattedDate, \n        SIPARIS_TEST:  originalDate||formattedDate,     \n        Tip: 3,\n        KOD1: null,\n        KOD2: null,\n        TIPI:4,\n        Aciklama: \"SFORIN\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: null,\n        KDV_DAHILMI: true,\n        PLA_KODU: \"MERKEZ\",\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: originalDate || formattedDate, \n        EfaturaCarisiMi: true,\n        EIrsaliye: true,\n        //KS_KODU: \"100\",\n        FIYATTARIHI:null,\n        ODEMETARIHI:null,\n        KOSULTARIHI:null,\n        FAT_ALTM1:null,\n        FAT_ALTM2:null,\n        ODEMEGUNU:null,\n        GEN_ISK1T:null,\n        GEN_ISK2T:null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null\n    },\n    Kalems: [\n        {\n            STra_HTUR: \"H\",\n            STra_GC: \"G\",\n            StokKodu: null,\n            Sira: 0,\n            STra_IAF:1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: originalDate || formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            DOVIZ_TURU: 0,\n            DOVTIP: 0,\n            STra_DOVTIP: 0,\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: \"MERKEZ\",           \n            STra_testar: originalDate || formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,                        \n            DEPO_KODU: 0,                     \n            Stra_FiiliTar: originalDate || formattedDate,\n            D_YEDEK10: originalDate || formattedDate,\n            STra_SIPKONT: null,\n            Stra_IrsKont: 1,\n            Firmadovtut: 0,\n            STra_SatIsk: null,\n            STra_SatIsk2: null,\n            STra_SatIsk3: null,\n            STra_SatIsk4: null,\n            STra_SatIsk5: null,\n            STra_SatIsk6: null,\n            STra_ODEGUN: null,\n            SatirBaziAciks: null,           \n            S_Yedek2:'SFORIN'\n\n            \n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.netsisDataPayload || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n    KalemAdedi: msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 3,\n    KosulMalFazlasiIsle: true,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},  \n    Kalems: []\n    \n};\n \n \n\n\n\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n   \n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n \n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nconst defaultKalem = defaultValue.Kalems[0];\nresult.Kalems = kalemlerData.map((kalem) => {\n     defaultValue.Kalems[0].Sira +=1\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nmsg.dataPayload = result;\n\nmsg.flowName =\"STNRDN000V1.0\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1215,
        "y": 293,
        "wires": [
            [
                "2330a0a502eb1116",
                "ed7ea79cc147fa26"
            ]
        ],
        "info": "{\r\n  \"FatUst\": {\r\n    \"Tarih\": \"2024-11-13 00:00:00\",\r\n     \"ENTEGRE_TRH\": \"2024-11-13 00:00:00\",\r\n      \"FiiliTarih\": \"2024-11-14 00:00:00\"\r\n  },\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6,\r\n        \"STra_testar\": \"2024-11-13 00:00:00\"\r\n          \"D_YEDEK10\": \"2024-11-11 00:00:00\"\r\n    },\r\n    {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    },\r\n    {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    }\r\n  ]\r\n}\r\n"
    },
    {
        "id": "41b76320066d73df",
        "type": "http response",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1075,
        "y": 523,
        "wires": []
    },
    {
        "id": "2330a0a502eb1116",
        "type": "debug",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 220,
        "wires": []
    },
    {
        "id": "ed7ea79cc147fa26",
        "type": "subflow:fc936f675a46124b",
        "z": "94eb378f85b6e7bb",
        "g": "b33aae025374f94d",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1400,
        "y": 300,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "af3da10f12697ffc",
        "type": "subflow:f353afe31d73612e",
        "z": "7797de26835d320a",
        "name": "",
        "env": [
            {
                "name": "SourceJson",
                "value": "{\"IrsaliyeNum\":\"irsaliyeNum\",\"CustomerCode\":\"customerCode\",\"IrsaliyeDate\":\"irsaliyeDate\",\"ShipmentIsClosed\":\"ShipmentIsClosed\",\"Aktarildimi\":\"Aktarildimi\"}",
                "type": "json"
            }
        ],
        "x": 320,
        "y": 80,
        "wires": [
            [
                "ea8cb381421128a5"
            ]
        ]
    },
    {
        "id": "5a509a3f0ba47e4c",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "re",
        "func": "global.set('STNRDN000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 155,
        "y": 70,
        "wires": [
            [
                "af3da10f12697ffc"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "8769ba95851e6a8e",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "MongoQuery",
        "func": "const query = `[\n  {\n    \"$match\": {\n      \"DocumentNo\": null,\n      \"DocumentItemNo\": null,\n      \"SourceInventoryState\": \"WHS\",\n      \"TargetInventoryState\": \"WHS\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"irsaliyeNum\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$TransactionAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeName\", \"DispatchNoteNumber\"] }\n                }\n              },\n              0 \n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"customerCode\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$TransactionAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeName\", \"CustomerCode\"] }\n                }\n              },\n              0 \n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"irsaliyeDate\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$TransactionAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeName\", \"DispatchNoteDate\"] }\n                }\n              },\n              0 \n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"formattedDate\": {\n        \"$cond\": {\n          \"if\": { \"$ne\": [\"$irsaliyeDate.AttributeValue\", null] },\n          \"then\": {\n            \"$dateToString\": {\n              \"format\": \"%d-%m-%Y\",\n              \"date\": { \"$toDate\": \"$irsaliyeDate.AttributeValue\" },\n              \"timezone\": \"Europe/Istanbul\"\n            }\n          },\n          \"else\": null\n        }\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"irsaliyeNum.AttributeValue\": \"${msg.netsisDataPayload.IrsaliyeNum}\",\n      \"formattedDate\": \"${msg.netsisDataPayload.IrsaliyeDate}\",\n      \"customerCode.AttributeValue\":\"${msg.netsisDataPayload.CustomerCode}\"\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"irsaliyeNum\": \"$irsaliyeNum.AttributeValue\",\n        \"customerCode\": \"$customerCode.AttributeValue\",\n        \"irsaliyeDate\": \"$formattedDate\",\n        \"ProductCode\": \"$ProductCode\",\n        \"ProductName\": \"$ProductName\",\n        \"BaseUnit\": \"$BaseUnit\",\n        \"Location\": \"$TargetLocation\"\n      },   \n      \"BaseQuantity\": { \"$sum\": \"$BaseQuantity\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Location\",\n      \"let\": { \"locId\": \"$_id.Location\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$eq\": [\"$_id\", { \"$toObjectId\": \"$$locId\" }]\n            }\n          }\n        }\n      ],\n      \"as\": \"LocationInfo\"\n    }\n  },\n  {\n    \"$unwind\": \"$LocationInfo\"\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"customerCode\": \"$_id.customerCode\",\n        \"irsaliyeNum\": \"$_id.irsaliyeNum\",\n        \"irsaliyeDate\": \"$_id.irsaliyeDate\"\n      },\n      \"Items\": {\n        \"$push\": {\n          \"Material\": \"$_id.ProductCode\",\n          \"Quantity\": {\n            \"$toDouble\": \"$BaseQuantity\"\n          },\n          \"WarehouseCode\": \"$LocationInfo.Code\"\n        }\n      }\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"header\": {\n        \"Date\": \"$_id.irsaliyeDate\",\n        \"PartnerCode\": \"$_id.customerCode\",\n        \"DispatchNoteNumber\": \"$_id.irsaliyeNum\",\n        \"DispatchNoteDate\": \"$_id.irsaliyeDate\"\n      },\n      \"Items\": \"$Items\"\n    }\n  } \n]\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 380,
        "wires": [
            [
                "ce37e847528b6ef2"
            ]
        ]
    },
    {
        "id": "49615bb626255a84",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "function 3",
        "func": "if (msg.payload[0]) {\n    msg.listPayload=msg.payload;\n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 425,
        "y": 310,
        "wires": [
            [
                "92283b8ea95c4e98"
            ],
            [
                "41577e18ae0e955c"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "92283b8ea95c4e98",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "CheckListPayload",
        "func": "let items = msg.listPayload;   \nif (items.length===0) {\n    return [null, msg]; \n}\n\nlet item = items[0];\nmsg.payload = item;\n\n\n \n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 220,
        "wires": [
            [
                "599f8bd9ddfe4585"
            ],
            [
                "75c47d9836f8236e"
            ]
        ]
    },
    {
        "id": "599f8bd9ddfe4585",
        "type": "subflow:94eb378f85b6e7bb",
        "z": "7797de26835d320a",
        "name": "",
        "x": 860,
        "y": 220,
        "wires": [
            [
                "79ddbf071a9c3e55"
            ],
            [
                "7a6a22385f570f2a"
            ]
        ],
        "info": "Satıstan Iade"
    },
    {
        "id": "75c47d9836f8236e",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "Res",
        "func": " msg.res=global.get('STNRDN000V1_res')\n\nmsg.payload = {\n    type: 2,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"HATA \",\n    DefinitionLang: `Irsaliye Bulunamadi`,\n    Data: [msg.netsisTokenErrorMessage || \"HATA\"],\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 270,
        "wires": [
            [
                "18d7301599bd3a6e"
            ]
        ]
    },
    {
        "id": "79ddbf071a9c3e55",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "MongoQueryV2",
        "func": "const newShipNum = msg.dataPayload.FatUst.FATIRS_NO;\nconst customerCode = msg.dataPayload.FatUst.CariKod;\n\nmsg.query = {\n  update: {\n    filter: {\n      \"TransactionAttributes\": {\n        $all: [\n          { $elemMatch: { AttributeName: \"DispatchNoteNumber\", AttributeValue: newShipNum } },\n          { $elemMatch: { AttributeName: \"CustomerCode\", AttributeValue: customerCode } }\n        ],\n        $not: {\n          $elemMatch: { AttributeName: \"ShipmentIsClosed\" }\n        }\n      }\n    },\n    update: {\n      $push: {\n        TransactionAttributes: {\n          AttributeName: \"ShipmentIsClosed\",\n          AttributeValue: \"TRUE\",\n          AttributeSyncField: null,\n          AttributeGroup: null,\n          AttributeType: \"HAMMADDE\",\n          AttributeRelatedEntityType: \"SERIAL\",\n          AttributeAttributeSyncField: null,\n          IsAttributeRequired: null\n        }\n      }\n    },\n    options: {}\n  }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 160,
        "wires": [
            [
                "d04ce1d01a1276e0"
            ]
        ]
    },
    {
        "id": "7a6a22385f570f2a",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "Res",
        "func": " msg.res=global.get('STNRDN000V1_res')\n\nmsg.payload = {\n    type: 2,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"HATA \",\n    DefinitionLang: JSON.stringify(msg.netsisTokenErrorMessage) ||`Irsaliye Bulunamadi`,\n    Data: [msg.netsisTokenErrorMessage || \"HATA\"],\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 290,
        "wires": [
            [
                "5771a319b0bfc3bf"
            ]
        ]
    },
    {
        "id": "18d7301599bd3a6e",
        "type": "http response",
        "z": "7797de26835d320a",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 640,
        "y": 320,
        "wires": []
    },
    {
        "id": "d04ce1d01a1276e0",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "7797de26835d320a",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Sales_Waybill",
                "type": "str"
            }
        ],
        "x": 1240,
        "y": 210,
        "wires": [
            [
                "a15061934bcbec69"
            ]
        ]
    },
    {
        "id": "5771a319b0bfc3bf",
        "type": "http response",
        "z": "7797de26835d320a",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1000,
        "y": 410,
        "wires": []
    },
    {
        "id": "a15061934bcbec69",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "7797de26835d320a",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Movement",
                "type": "str"
            },
            {
                "name": "IsUpdated",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1310,
        "y": 280,
        "wires": [
            [
                "41577e18ae0e955c"
            ]
        ]
    },
    {
        "id": "b2a48e4ab8c3ca7c",
        "type": "http response",
        "z": "7797de26835d320a",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1540,
        "y": 260,
        "wires": []
    },
    {
        "id": "5b0b36ae59f7c1cc",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "Delete Document Netsis",
        "func": "msg.restUrl=`api/v2/ItemSlips/ftAIrs;${msg.netsisDataPayload.IrsaliyeNum};${msg.netsisDataPayload.CustomerCode}`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 30,
        "wires": [
            [
                "a65daceaa7f6a613"
            ]
        ]
    },
    {
        "id": "703b565c2b657594",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "function 4",
        "func": "let match = msg.payload.ErrorDesc.match(/Hata Kodu\\s*:\\s*(\\d+)/);\nnode.warn(match);\nmsg.errorStatusCode = match ? match[1] : null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 110,
        "wires": [
            [
                "1fd0a3c1c6b60121"
            ]
        ]
    },
    {
        "id": "1fd0a3c1c6b60121",
        "type": "switch",
        "z": "7797de26835d320a",
        "name": "",
        "property": "errorStatusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 830,
        "y": 150,
        "wires": [
            [
                "cdd258cbaedf1121"
            ],
            [
                "a6ecbbd8164a3f87"
            ]
        ],
        "info": "Hata Kodu : 402\r\nDetay : \r\n\r\n<ErrorHeader>\r\nError Time : 2/28/2025 12:28:44 PM\r\nKernel Version : 9.0.57.0\r\nKernel Address : 12B11CA4\r\nObject Address : 18D85F70\r\nObject Name : NXObj_TFatura18D85F70\r\nClass Name : TFatura\r\n</ErrorHeader>\r\n<Hata>\r\nMK0000000000005 Nolu Evrak Daha önceden kaydedilmişNetOpenX50.Fatura\r\n\r\nKONTROL BU HATA KODU VAR ISE 1 CIKIS \r\nOTHERWISE 2"
    },
    {
        "id": "a6ecbbd8164a3f87",
        "type": "link out",
        "z": "7797de26835d320a",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "1b67527eafd3b6d8"
        ],
        "x": 1005,
        "y": 60,
        "wires": []
    },
    {
        "id": "ea8cb381421128a5",
        "type": "switch",
        "z": "7797de26835d320a",
        "name": "",
        "property": "netsisDataPayload.Aktarildimi",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 100,
        "wires": [
            [
                "5b0b36ae59f7c1cc"
            ],
            [
                "8769ba95851e6a8e"
            ]
        ]
    },
    {
        "id": "a65daceaa7f6a613",
        "type": "subflow:fc936f675a46124b",
        "z": "7797de26835d320a",
        "name": "",
        "env": [
            {
                "name": "ChooseRequestMethod",
                "value": "DELETE",
                "type": "str"
            }
        ],
        "x": 800,
        "y": 70,
        "wires": [
            [
                "a6ecbbd8164a3f87"
            ],
            [
                "703b565c2b657594"
            ]
        ]
    },
    {
        "id": "41577e18ae0e955c",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "Res",
        "func": "msg.res = global.get('STNRDN000V1_res')\n\nmsg.payload = {\n    type: 0,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: \"BASARILI\",\n    DefinitionLang:\"BASARILI\",\n    Data: null,\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 330,
        "wires": [
            [
                "b2a48e4ab8c3ca7c"
            ]
        ]
    },
    {
        "id": "1b67527eafd3b6d8",
        "type": "link in",
        "z": "7797de26835d320a",
        "name": "link in 10",
        "links": [
            "a6ecbbd8164a3f87"
        ],
        "x": 65,
        "y": 280,
        "wires": [
            [
                "8769ba95851e6a8e"
            ]
        ]
    },
    {
        "id": "cdd258cbaedf1121",
        "type": "function",
        "z": "7797de26835d320a",
        "name": "Res",
        "func": "msg.res = global.get('STNRDN000V1_res')\n\nmsg.payload = {\n    type: 0,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: \"BASARILI\",\n    DefinitionLang:\"Fatura Silme işlemi hata \",\n    Data: null,\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 80,
        "wires": [
            [
                "5771a319b0bfc3bf"
            ]
        ]
    },
    {
        "id": "2f5aec5c121e29e0",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "7797de26835d320a",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Movement",
                "type": "str"
            }
        ],
        "x": 365,
        "y": 350,
        "wires": [
            [
                "49615bb626255a84"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "ce37e847528b6ef2",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "7797de26835d320a",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Purchase_Waybill",
                "type": "str"
            }
        ],
        "x": 315,
        "y": 400,
        "wires": [
            [
                "2f5aec5c121e29e0"
            ]
        ],
        "l": false
    },
    {
        "id": "228c74071138d62e",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "Delete Document Netsis",
        "func": "msg.restUrl = `api/v2/ItemSlips/ftSIrs;${msg.netsisDataPayload.IrsaliyeNum};${msg.netsisDataPayload.CustomerCode}`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 80,
        "wires": [
            [
                "02b4f578fa38e631"
            ]
        ]
    },
    {
        "id": "702d4506e4eff76a",
        "type": "switch",
        "z": "55047cbfc0388bed",
        "name": "",
        "property": "netsisDataPayload.Aktarildimi",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 150,
        "wires": [
            [
                "228c74071138d62e"
            ],
            [
                "f7fd724e06b84c03"
            ]
        ]
    },
    {
        "id": "02b4f578fa38e631",
        "type": "subflow:fc936f675a46124b",
        "z": "55047cbfc0388bed",
        "name": "",
        "env": [
            {
                "name": "ChooseRequestMethod",
                "value": "DELETE",
                "type": "str"
            }
        ],
        "x": 890,
        "y": 120,
        "wires": [
            [
                "a0723a2b4a3382cc"
            ],
            [
                "0433bedab3d47b54"
            ]
        ]
    },
    {
        "id": "47bee5b36455707f",
        "type": "subflow:f353afe31d73612e",
        "z": "55047cbfc0388bed",
        "name": "",
        "env": [
            {
                "name": "SourceJson",
                "value": "{\"IrsaliyeNum\":\"irsaliyeNum\",\"CustomerCode\":\"customerCode\",\"IrsaliyeDate\":\"irsaliyeDate\",\"Aktarildimi\":\"Aktarildimi\",\"PLAKA\":\"PLAKA\",\"TASIYICI_VKN\":\"TASIYICI_VKN\",\"TASIYICI_NAME\":\"TASIYICI_NAME\",\"ILCE\":\"ILCE\",\"IL\":\"IL\",\"ULKE\":\"ULKE\",\"POSTA_KODU\":\"POSTA_KODU\",\"SOFOR1AD\":\"SOFOR1AD\",\"SOFOR1SOYAD\":\"SOFOR1SOYAD\",\"SOFOR1TC\":\"SOFOR1TC\",\"SOFOR2AD\":\"SOFOR2AD\",\"SOFOR2SOYAD\":\"SOFOR2SOYAD\",\"SOFOR2TC\":\"SOFOR2TC\",\"SOFOR3AD\":\"SOFOR3AD\",\"SOFOR3SOYAD\":\"SOFOR3SOYAD\",\"SOFOR3TC\":\"SOFOR3TC\"}",
                "type": "json"
            }
        ],
        "x": 280,
        "y": 80,
        "wires": [
            [
                "702d4506e4eff76a"
            ]
        ]
    },
    {
        "id": "f7fd724e06b84c03",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "MongoQuery",
        "func": "const query = `[\n  {\n    \"$match\": {\n      \"DocumentNo\": null,\n      \"DocumentItemNo\": null,\n      \"SourceInventoryState\": \"WHS\",\n      \"TargetInventoryState\": \"WHS\"\n    }\n  },\n  {\n    \"$addFields\": {\n      \"irsaliyeNum\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$TransactionAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeName\", \"DispatchNoteNumber\"] }\n                }\n              },\n              0 \n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"customerCode\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$TransactionAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeName\", \"CustomerCode\"] }\n                }\n              },\n              0 \n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"irsaliyeDate\": {\n        \"$let\": {\n          \"vars\": {\n            \"attributes\": { \"$ifNull\": [\"$TransactionAttributes\", []] }\n          },\n          \"in\": {\n            \"$arrayElemAt\": [\n              {\n                \"$filter\": {\n                  \"input\": \"$$attributes\",\n                  \"as\": \"attribute\",\n                  \"cond\": { \"$eq\": [\"$$attribute.AttributeName\", \"DispatchNoteDate\"] }\n                }\n              },\n              0 \n            ]\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"formattedDate\": {\n        \"$cond\": {\n          \"if\": { \"$ne\": [\"$irsaliyeDate.AttributeValue\", null] },\n          \"then\": {\n            \"$dateToString\": {\n              \"format\": \"%d-%m-%Y\",\n              \"date\": { \"$toDate\": \"$irsaliyeDate.AttributeValue\" },\n              \"timezone\": \"Europe/Istanbul\"\n            }\n          },\n          \"else\": null\n        }\n      }\n    }\n  },\n  {\n    \"$match\": {\n      \"irsaliyeNum.AttributeValue\": \"${msg.netsisDataPayload.IrsaliyeNum}\",\n      \"formattedDate\": \"${msg.netsisDataPayload.IrsaliyeDate}\",\n      \"customerCode.AttributeValue\":\"${msg.netsisDataPayload.CustomerCode}\"\n    }\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"irsaliyeNum\": \"$irsaliyeNum.AttributeValue\",\n        \"customerCode\": \"$customerCode.AttributeValue\",\n        \"irsaliyeDate\": \"$formattedDate\",\n        \"ProductCode\": \"$ProductCode\",\n        \"ProductName\": \"$ProductName\",\n        \"BaseUnit\": \"$BaseUnit\",\n        \"Location\": \"$TargetLocation\"\n      },   \n      \"BaseQuantity\": { \"$sum\": \"$BaseQuantity\" }\n    }\n  },\n  {\n    \"$lookup\": {\n      \"from\": \"Location\",\n      \"let\": { \"locId\": \"$_id.Location\" },\n      \"pipeline\": [\n        {\n          \"$match\": {\n            \"$expr\": {\n              \"$eq\": [\"$_id\", { \"$toObjectId\": \"$$locId\" }]\n            }\n          }\n        }\n      ],\n      \"as\": \"LocationInfo\"\n    }\n  },\n  {\n    \"$unwind\": \"$LocationInfo\"\n  },\n  {\n    \"$group\": {\n      \"_id\": {\n        \"customerCode\": \"$_id.customerCode\",\n        \"irsaliyeNum\": \"$_id.irsaliyeNum\",\n        \"irsaliyeDate\": \"$_id.irsaliyeDate\"\n      },\n      \"Items\": {\n        \"$push\": {\n          \"Material\": \"$_id.ProductCode\",\n          \"Quantity\": {\n            \"$toDouble\": \"$BaseQuantity\"\n          },\n          \"WarehouseCode\": \"$LocationInfo.Code\"\n        }\n      }\n    }\n  },\n  {\n    \"$project\": {\n      \"_id\": 0,\n      \"header\": {\n        \"Date\": \"$_id.irsaliyeDate\",\n        \"PartnerCode\": \"$_id.customerCode\",\n        \"DispatchNoteNumber\": \"$_id.irsaliyeNum\",\n        \"DispatchNoteDate\": \"$_id.irsaliyeDate\"\n      },\n      \"Items\": \"$Items\"\n    }\n  } \n]\n\n`;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 430,
        "wires": [
            [
                "16f19c35bf251acf"
            ]
        ]
    },
    {
        "id": "a0723a2b4a3382cc",
        "type": "link out",
        "z": "55047cbfc0388bed",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "f24e61292b19ad9e"
        ],
        "x": 1095,
        "y": 110,
        "wires": []
    },
    {
        "id": "0433bedab3d47b54",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "function 170",
        "func": "let match = msg.payload.ErrorDesc.match(/Hata Kodu\\s*:\\s*(\\d+)/);\nnode.warn(match);\nmsg.errorStatusCode = match ? match[1] : null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 160,
        "wires": [
            [
                "51a907f0fa6367f7"
            ]
        ]
    },
    {
        "id": "c0a17ee6574eac10",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "re",
        "func": "global.set('GSTNRDN000V1-AI_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 155,
        "y": 60,
        "wires": [
            [
                "47bee5b36455707f"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "f24e61292b19ad9e",
        "type": "link in",
        "z": "55047cbfc0388bed",
        "name": "link in 11",
        "links": [
            "a0723a2b4a3382cc"
        ],
        "x": 155,
        "y": 330,
        "wires": [
            [
                "f7fd724e06b84c03"
            ]
        ]
    },
    {
        "id": "16f19c35bf251acf",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "55047cbfc0388bed",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Purchase_Waybill",
                "type": "str"
            }
        ],
        "x": 405,
        "y": 450,
        "wires": [
            [
                "f4ee1606f0fb573b"
            ]
        ],
        "l": false
    },
    {
        "id": "51a907f0fa6367f7",
        "type": "switch",
        "z": "55047cbfc0388bed",
        "name": "",
        "property": "errorStatusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 920,
        "y": 200,
        "wires": [
            [
                "01d0b10917c5ed52"
            ],
            [
                "a0723a2b4a3382cc"
            ]
        ],
        "info": "Hata Kodu : 402\r\nDetay : \r\n\r\n<ErrorHeader>\r\nError Time : 2/28/2025 12:28:44 PM\r\nKernel Version : 9.0.57.0\r\nKernel Address : 12B11CA4\r\nObject Address : 18D85F70\r\nObject Name : NXObj_TFatura18D85F70\r\nClass Name : TFatura\r\n</ErrorHeader>\r\n<Hata>\r\nMK0000000000005 Nolu Evrak Daha önceden kaydedilmişNetOpenX50.Fatura\r\n\r\nKONTROL BU HATA KODU VAR ISE 1 CIKIS \r\nOTHERWISE 2"
    },
    {
        "id": "f4ee1606f0fb573b",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "55047cbfc0388bed",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Movement",
                "type": "str"
            }
        ],
        "x": 455,
        "y": 400,
        "wires": [
            [
                "fe580196bd8e36d2"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "01d0b10917c5ed52",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "Res",
        "func": "msg.res = global.get('GSTNRDN000V1-AI_res')\n\nmsg.payload = {\n    type: 0,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: \"BASARILI\",\n    DefinitionLang:\"Fatura Silme işlemi hata \",\n    Data: null,\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 130,
        "wires": [
            [
                "7e9fac2afec193e3"
            ]
        ]
    },
    {
        "id": "fe580196bd8e36d2",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "function 171",
        "func": "if (msg.payload[0]) {\n    msg.listPayload=msg.payload;\n    return [msg, null];  // 1. çıkışa gönder\n} else {\n    return [null, msg];  // 2. çıkışa gönder  mongodan gelen değer yok ise \n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 515,
        "y": 360,
        "wires": [
            [
                "b0b81dd330777f54"
            ],
            [
                "a6bc2c8f90f30298"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "7e9fac2afec193e3",
        "type": "http response",
        "z": "55047cbfc0388bed",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1090,
        "y": 460,
        "wires": []
    },
    {
        "id": "b0b81dd330777f54",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "CheckListPayload",
        "func": "let items = msg.listPayload;   \nif (items.length===0) {\n    return [null, msg]; \n}\n\nlet item = items[0];\nmsg.payload = item;\nmsg.copyNetsisDataPayload=msg.netsisDataPayload;\n\n\n \n\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 270,
        "wires": [
            [
                "8627b54ec33d309d"
            ],
            [
                "ce9a8bf8b1fd0a7e"
            ]
        ]
    },
    {
        "id": "a6bc2c8f90f30298",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "Res",
        "func": "msg.res = global.get('GSTNRDN000V1-AI_res')\n\nmsg.payload = {\n    type: 0,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: \"BASARILI\",\n    DefinitionLang:\"BASARILI\",\n    Data: null,\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 380,
        "wires": [
            [
                "e70cfa5ed2b461e1"
            ]
        ]
    },
    {
        "id": "e41d03cf10099f07",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "Res",
        "func": "msg.res = global.get('GSTNRDN000V1-AI_res')\n\nmsg.payload = {\n    type: 2,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"HATA \",\n    DefinitionLang: JSON.stringify(msg.netsisTokenErrorMessage) ||`Irsaliye Bulunamadi`,\n    Data: [msg.netsisTokenErrorMessage || \"HATA\"],\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "7e9fac2afec193e3"
            ]
        ]
    },
    {
        "id": "ce9a8bf8b1fd0a7e",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "Res",
        "func": " msg.res=global.get('STNRDN000V1_res')\n\nmsg.payload = {\n    type: 2,\n    Sender: \"Node-Red-STNRDN000V1.0\",  \n    Detail: JSON.stringify(msg.netsisTokenErrorMessage) || \"HATA \",\n    DefinitionLang: `Irsaliye Bulunamadi`,\n    Data: [msg.netsisTokenErrorMessage || \"HATA\"],\n    Module: \"Node-Red-STNRDN000V1.0\",\n};\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 320,
        "wires": [
            [
                "e1ce40e225cf6876"
            ]
        ]
    },
    {
        "id": "f2600d61352bb440",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "55047cbfc0388bed",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "Movement",
                "type": "str"
            },
            {
                "name": "IsUpdated",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1400,
        "y": 330,
        "wires": [
            [
                "a6bc2c8f90f30298"
            ]
        ]
    },
    {
        "id": "e70cfa5ed2b461e1",
        "type": "http response",
        "z": "55047cbfc0388bed",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1630,
        "y": 310,
        "wires": []
    },
    {
        "id": "8799fa9330d229f6",
        "type": "function",
        "z": "55047cbfc0388bed",
        "name": "MongoQueryV2",
        "func": "const newShipNum = msg.dataPayload.FatUst.FATIRS_NO;\nconst customerCode = msg.dataPayload.FatUst.CariKod;\n\nmsg.query = {\n  update: {\n    filter: {\n      \"TransactionAttributes\": {\n        $all: [\n          { $elemMatch: { AttributeName: \"DispatchNoteNumber\", AttributeValue: newShipNum } },\n          { $elemMatch: { AttributeName: \"CustomerCode\", AttributeValue: customerCode } }\n        ],\n        $not: {\n          $elemMatch: { AttributeName: \"ShipmentIsClosed\" }\n        }\n      }\n    },\n    update: {\n      $push: {\n        TransactionAttributes: {\n          AttributeName: \"ShipmentIsClosed\",\n          AttributeValue: \"TRUE\",\n          AttributeSyncField: null,\n          AttributeGroup: null,\n          AttributeType: \"HAMMADDE\",\n          AttributeRelatedEntityType: \"SERIAL\",\n          AttributeAttributeSyncField: null,\n          IsAttributeRequired: null\n        }\n      }\n    },\n    options: {}\n  }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 210,
        "wires": [
            [
                "e72b8cab24060e48"
            ]
        ]
    },
    {
        "id": "e1ce40e225cf6876",
        "type": "http response",
        "z": "55047cbfc0388bed",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 730,
        "y": 370,
        "wires": []
    },
    {
        "id": "e72b8cab24060e48",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "55047cbfc0388bed",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Sales_Waybill",
                "type": "str"
            }
        ],
        "x": 1330,
        "y": 260,
        "wires": [
            [
                "f2600d61352bb440"
            ]
        ]
    },
    {
        "id": "8627b54ec33d309d",
        "type": "subflow:3ab9e684f951f1bf",
        "z": "55047cbfc0388bed",
        "name": "",
        "x": 920,
        "y": 280,
        "wires": [
            [
                "8799fa9330d229f6"
            ],
            [
                "e41d03cf10099f07"
            ]
        ]
    },
    {
        "id": "bbab13d0d86135ad",
        "type": "json",
        "z": "3ab9e684f951f1bf",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 440,
        "y": 160,
        "wires": [
            [
                "557afa97cce2a9e7"
            ]
        ]
    },
    {
        "id": "557afa97cce2a9e7",
        "type": "subflow:subflow-dynamic-mapping",
        "z": "3ab9e684f951f1bf",
        "name": "",
        "env": [
            {
                "name": "RootMapping",
                "value": "{\"HeaderTarget\":\"FatUst\",\"ItemsTarget\":\"Kalems\"}",
                "type": "json"
            },
            {
                "name": "HeaderMapping",
                "value": "[{\"source\":\"DispatchNoteDate\",\"target\":\"Tarih\"},{\"source\":\"PartnerCode\",\"target\":\"CariKod\"},{\"source\":\"DispatchNoteNumber\",\"target\":\"FATIRS_NO\"}]",
                "type": "json"
            },
            {
                "name": "ItemMapping",
                "value": "[{\"source\":\"Material\",\"target\":\"StokKodu\"},{\"source\":\"Quantity\",\"target\":\"STra_GCMIK\"},{\"source\":\"WarehouseCode\",\"target\":\"DEPO_KODU\"}]",
                "type": "json"
            },
            {
                "name": "DefaultHeader",
                "value": "FatUst",
                "type": "str"
            },
            {
                "name": "DefaultItems",
                "value": "Kalems",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 250,
        "wires": [
            [
                "0ca7ce2429dc235d"
            ]
        ],
        "outputLabels": [
            "netsisDatapayload"
        ]
    },
    {
        "id": "0ca7ce2429dc235d",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "ParamsCheck",
        "func": "let invoiceNumber = msg.netsisDataPayload.FatUst.FATIRS_NO;\nlet invoiceCustomerCode = msg.netsisDataPayload.FatUst.CariKod;\n\nif (!invoiceNumber) {\n    msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: \"BELGE NUMARASI ZORUNLUDUR \",\n        DefinitionLang: `BELGE NUMARASI ZORUNLUDUR`,\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n\n    return [null, msg];\n}\nelse if (invoiceNumber.length !== 15){\n    msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: `BELGE NUMARASI  15 KAREKTER OLMALIDIR BELGE NUMARASINI DUZENLEYINIZ`,\n        DefinitionLang: `BELGE NUMARASI  15 KAREKTER OLMALIDIR BELGE NUMARASINI DUZENLEYINIZ`,\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n\n    return [null, msg];\n\n}\nif (!invoiceCustomerCode) {\n    msg.payload = {\n        type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: \"CARI KODU YOK\",\n        DefinitionLang: \"CARI KODU YOK\",\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n    \n\n    return [null, msg];\n}\n \nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "48cebcec5db00afd"
            ],
            [
                "6b52ffde37a5fd2a"
            ]
        ]
    },
    {
        "id": "48cebcec5db00afd",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "Zorunlu Alan Kontrolü",
        "func": "// Zorunlu alanları tanımlayın\n// const requiredFieldsFatUst = [\n   \n//     { path: \"FatUst.CariKod\", message: \"CariKod zorunlu.\" }, \n// ];\nconst requiredFieldsFatItem = [\n    { path: \"StokKodu\", message: \"Kalem  sirasi (value) olan   StokKodu zorunlu.\" },\n    { path: \"STra_GCMIK\", message: \"Kalems içindeki (value)  STra_GCMIK zorunlu.\" },    \n    //{ path: \"Olcubr\", message: \"Kalems içindeki (value)  Olcubr zorunlu.\" },    \n    { path: \"DEPO_KODU\", message: \"Kalems içindeki (value)  DEPO_KODU zorunlu.\" },\n];\n\n// Hataları toplamak için liste\nlet errors = [];\n\n// JSON içinde bir alanı bulmak için yardımcı fonksiyon\nfunction getValue(obj, path) {\n  \n    return path.split('.').reduce((o, key) => o && o[key], obj);\n}\n\n// Alanları kontrol edin\n// requiredFieldsFatUst.forEach(field => {\n//     const value = getValue(msg.payload, field.path);\n\n//     if (value === null || value === undefined || value === \"\") {\n//         errors.push(field.message);\n//     }\n// });\n\n \n\nmsg.netsisDataPayload.Kalems.forEach(item => {\n   \n    var hasStockCode=true; // stok kodu giilmeyen kalemlerde sıra numarasına göre dönüş değere verilecek\n    requiredFieldsFatItem.forEach(filedItem => {\n        var message;\n        const value = getValue(item, filedItem.path);\n        if (value === null || value === undefined || value === \"\") {\n             \n            if (filedItem.path === \"StokKodu\") {\n                message =  filedItem.message.replace(\"(value)\", item?.Sira)\n                hasStockCode=false;\n            }\n            else {\n                message = filedItem.message.replace(\"(value)\", hasStockCode ? \"Stok Kodu:\"+item?.StokKodu: \"Sıra No:\"+item?.Sira)\n            }\n            errors.push(message)\n        }\n    })\n});\n\n// Hata varsa, HTTP 400 yanıtı ile hata mesajlarını döndürün\nif (errors.length > 0) {  \n      msg.payload = {\n        Type: 2,\n        Sender: \"Node-Red-STNRDN000V1.0\",\n        Detail: \"HATA\",\n        DefinitionLang: JSON.stringify(errors),\n        Data: null,\n        Module: \"Node-Red-STNRDN000V1.0\",\n    };\n    return [null,msg];\n}\n\n// Her şey tamamsa, başarılı sonucu döndürün\nmsg.payload = { success: true, data: msg.payload };\nreturn [msg,null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 290,
        "wires": [
            [
                "ce4efaa304ea04f7"
            ],
            [
                "7fbb768709f5eefa"
            ]
        ]
    },
    {
        "id": "6b52ffde37a5fd2a",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "Res",
        "func": "msg.res = global.get('GSTNRDN000V1-AI_res')\n\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 735,
        "y": 503,
        "wires": [
            [
                "7fbb768709f5eefa"
            ]
        ]
    },
    {
        "id": "ce4efaa304ea04f7",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "function 172",
        "func": "// Şu anki zamana Al\nconst utcNow = new Date(Date.now() + (3 * 60 * 60 * 1000));\nconst year = utcNow.getFullYear();\n// Ayı al ve iki basamaklı formatta ayarla\nconst month = String(utcNow.getMonth() + 1).padStart(2, '0'); // Aylar 0'dan başlar, bu yüzden +1 ekliyorum\n// Günü al ve iki basamaklı formatta ayarla\nconst day = String(utcNow.getDate()).padStart(2, '0');\nvar formattedDate = year + '-' + month + '-' + day;\nlet originalDate = msg.netsisDataPayload?.FatUst?.Tarih; // \"27-06-2025\"\nnode.warn(originalDate);\n// Gün, ay, yıl olarak parçala\nlet [day_, month_, year_] = originalDate.split(\"-\");\n\noriginalDate = `${year_}-${month_}-${day_}`;\nmsg.netsisDataPayload.FatUst.Tarih = originalDate;\n\n\n\nconst defaultValue = {\n    FatUst: {\n        Sube_Kodu: env.get('BranchCode'),\n        CariKod: null,\n        FATIRS_NO: null,\n        Tarih: originalDate || formattedDate,\n        SIPARIS_TEST: originalDate || formattedDate,\n        Tip: 2,\n        KOD1: null,\n        KOD2: null,\n        TIPI: 4,\n        Aciklama: \"SFORIN\",\n        SIPARIS_NUMARASI: null,\n        ENTEGRE_TRH: null,\n        KDV_DAHILMI: true,\n        PLA_KODU: \"MERKEZ\",\n        Proje_Kodu: null,\n        EKACK1: null,\n        EKACK2: null,\n        EKACK3: null,\n        EKACK4: null,\n        EKACK5: null,\n        EKACK6: null,\n        EKACK7: null,\n        EKACK8: null,\n        EKACK9: null,\n        EKACK10: null,\n        EKACK11: null,\n        EKACK12: null,\n        EKACK13: null,\n        EKACK14: null,\n        EKACK15: null,\n        EKACK16: null,\n        FiiliTarih: originalDate || formattedDate,\n        EfaturaCarisiMi: true,\n        EIrsaliye: true,\n        //KS_KODU: \"100\",\n        FIYATTARIHI: null,\n        ODEMETARIHI: null,\n        KOSULTARIHI: null,\n        FAT_ALTM1: null,\n        FAT_ALTM2: null,\n        ODEMEGUNU: null,\n        GEN_ISK1T: null,\n        GEN_ISK2T: null,\n        GEN_ISK3T: null,\n        GEN_ISK1O: null,\n        GEN_ISK2O: null,\n        GEN_ISK3O: null\n    },\n    EIrsEkBilgi: {\n        PLAKA: msg.copyNetsisDataPayload.PLAKA || null,\n        TASIYICIVKN: msg.copyNetsisDataPayload.TASIYICI_VKN,\n        TASIYICIADI: msg.copyNetsisDataPayload.TASIYICI_NAME,\n        TASIYICIILCE: msg.copyNetsisDataPayload.ILCE || \"IZMIR\",\n        TASIYICIIL: msg.copyNetsisDataPayload.IL || \"IZMIR\",\n        TASIYICIULKE: msg.copyNetsisDataPayload.ULKE || \"TR\",\n        TASIYICIPOSTAKODU: msg.copyNetsisDataPayload.POSTA_KODU || \"35000\",\n        SOFOR1ADI: msg.copyNetsisDataPayload.SOFOR1AD,\n        SOFOR1SOYADI: msg.copyNetsisDataPayload.SOFOR1SOYAD,\n        SOFOR1ACIKLAMA: \"\",\n        SOFOR1TCKN: msg.copyNetsisDataPayload.SOFOR1TC,\n        SOFOR2ADI: msg.copyNetsisDataPayload.SOFOR2AD,\n        SOFOR2SOYADI: msg.copyNetsisDataPayload.SOFOR2SOYAD,\n        SOFOR2ACIKLAMA: null,\n        SOFOR2TCKN: msg.copyNetsisDataPayload?.SOFOR2TC,\n        SOFOR3ADI: msg.copyNetsisDataPayload.SOFOR3AD,\n        SOFOR3SOYADI: msg.copyNetsisDataPayload.SOFOR3SOYAD,\n        SOFOR3ACIKLAMA: null,\n        SOFOR3TCKN: msg.copyNetsisDataPayload?.SOFOR3TC,\n        SEVKTAR: formattedDate,\n        DORSEPLAKA1: null,\n        DORSEPLAKA2: null,\n        DORSEPLAKA3: null,\n        MATBUKULLANILSIN: false,\n    },\n    Kalems: [\n        {\n            STra_HTUR: \"H\",\n            STra_GC: \"G\",\n            StokKodu: null,\n            Sira: 0,\n            STra_IAF: 1,\n            STra_FATIRSNO: null,\n            STra_GCMIK: 0,\n            STra_TAR: originalDate || formattedDate,\n            STra_NF: 0,\n            STra_BF: 0,\n            STra_KDV: 0,\n            DOVIZ_TURU: 0,\n            DOVTIP: 0,\n            STra_DOVTIP: 0,\n            STra_SIPNUM: null,\n            Plasiyer_Kodu: \"MERKEZ\",\n            STra_testar: originalDate || formattedDate,\n            Olcubr: 1,\n            ProjeKodu: null,\n            DEPO_KODU: 0,\n            Stra_FiiliTar: originalDate || formattedDate,\n            D_YEDEK10: originalDate || formattedDate,\n            STra_SIPKONT: null,\n            Stra_IrsKont: 1,\n            Firmadovtut: 0,\n            STra_SatIsk: null,\n            STra_SatIsk2: null,\n            STra_SatIsk3: null,\n            STra_SatIsk4: null,\n            STra_SatIsk5: null,\n            STra_SatIsk6: null,\n            STra_ODEGUN: null,\n            SatirBaziAciks: null,\n            S_Yedek2: 'SFORIN'\n\n\n        },\n    ],\n};\n\n// null veya undefined kontrolü için yardımcı fonksiyon\nconst getValueOrDefault = (value, defaultValue) =>\n    value !== null && value !== undefined ? value : defaultValue;\n\n// Gelen payload üzerinde işlem yapıyoruz\nconst incomingData = msg.netsisDataPayload || {}; // Gelen veri yoksa boş bir nesne olarak başlat\n\nconst result = {\n    KalemAdedi: msg.netsisDataPayload.Kalems.length,\n    FaturaTip: 3,\n    KosulMalFazlasiIsle: true,\n    SonNumaraYazilsin: true,\n    OtomatikCevrimYapilsin: true,\n    FatUst: {},\n    Kalems: [],\n    EIrsEkBilgi: defaultValue.EIrsEkBilgi\n\n};\n\n\n\n\n\n\n// FatUst alanlarını doldur\nconst fatUstData = incomingData.FatUst || {}; // Gelen FatUst yoksa boş nesne kullan\nfor (const key in defaultValue.FatUst) {\n\n    result.FatUst[key] = getValueOrDefault(\n        fatUstData[key],\n        defaultValue.FatUst[key]\n    );\n}\n\n\n\n// Kalemler için özel işlem\nconst kalemlerData = incomingData.Kalems || []; // Gelen Kalems yoksa boş dizi kullan\nconst defaultKalem = defaultValue.Kalems[0];\nresult.Kalems = kalemlerData.map((kalem) => {\n    defaultValue.Kalems[0].Sira += 1\n    const processedKalem = {};\n    for (const key in defaultKalem) {\n        processedKalem[key] = getValueOrDefault(kalem[key], defaultKalem[key]);\n    }\n    return processedKalem;\n});\n\nmsg.dataPayload = result;\n\nmsg.flowName = \"STNRDN000V1.0\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1025,
        "y": 273,
        "wires": [
            [
                "142753142a6ea4dd",
                "42a6285c3a21dde0"
            ]
        ],
        "info": "{\r\n  \"FatUst\": {\r\n    \"Tarih\": \"2024-11-13 00:00:00\",\r\n     \"ENTEGRE_TRH\": \"2024-11-13 00:00:00\",\r\n      \"FiiliTarih\": \"2024-11-14 00:00:00\"\r\n  },\r\n  \"KalemAdedi\": 3,\r\n  \"Kalems\": [\r\n    {\r\n      \"StokKodu\": \"20022\",\r\n      \"Sira\": 1,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 1,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6,\r\n        \"STra_testar\": \"2024-11-13 00:00:00\"\r\n          \"D_YEDEK10\": \"2024-11-11 00:00:00\"\r\n    },\r\n    {\r\n      \"StokKodu\": \"30001\",\r\n      \"Sira\": 2,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 3,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    },\r\n    {\r\n      \"StokKodu\": \"20023\",\r\n      \"Sira\": 3,\r\n      \"STra_GCMIK\": 1,\r\n      \"Olcubr\": 4,\r\n      \"DEPO_KODU\": 1,\r\n      \"Gir_Depo_Kodu\": 6\r\n    }\r\n  ]\r\n}\r\n"
    },
    {
        "id": "7fbb768709f5eefa",
        "type": "http response",
        "z": "3ab9e684f951f1bf",
        "name": "",
        "statusCode": "400",
        "headers": {
            "content-type": "application/json"
        },
        "x": 885,
        "y": 503,
        "wires": []
    },
    {
        "id": "142753142a6ea4dd",
        "type": "debug",
        "z": "3ab9e684f951f1bf",
        "name": "debug 470",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "dataPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 200,
        "wires": []
    },
    {
        "id": "42a6285c3a21dde0",
        "type": "subflow:fc936f675a46124b",
        "z": "3ab9e684f951f1bf",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips",
                "type": "str"
            }
        ],
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "b16ca05e0d7c538e"
            ],
            []
        ]
    },
    {
        "id": "b16ca05e0d7c538e",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "Taslak Oluştur",
        "func": "msg.gibFatNo = msg.payload.Data.FatUst.GIB_FATIRS_NO;\nmsg.FatNo = msg.payload.Data.FatUst.FATIRS_NO;\nmsg.dataPayload=\n{\n    \"BelgeNo\": msg.FatNo,\n    \"Tip\": 2,\n    \"DizaynNo\":  14,\n    \"DizaynKontrol\": true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 560,
        "wires": [
            [
                "7d396004dac11071"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "7d396004dac11071",
        "type": "subflow:fc936f675a46124b",
        "z": "3ab9e684f951f1bf",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument",
                "type": "str"
            }
        ],
        "x": 1330,
        "y": 630,
        "wires": [
            [
                "d1c1c9087053a18f"
            ],
            []
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "d1c1c9087053a18f",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "Dizayn Kaydet",
        "func": "msg.dataPayload=\n{\n    \"GIBDocumentNumber\": msg.gibFatNo,\n    \"HtmlPath\": env.get('InvoiceHtmlPath_GUVENLIK'),  \n    \"DocumentBoxType\": 2, \n    \"EDocumentType\": 1\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 560,
        "wires": [
            [
                "3f7b171f394db1e3"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "3f7b171f394db1e3",
        "type": "subflow:fc936f675a46124b",
        "z": "3ab9e684f951f1bf",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument/ShowEDocument",
                "type": "str"
            }
        ],
        "x": 1560,
        "y": 610,
        "wires": [
            [
                "121916c276c6452c"
            ],
            []
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "121916c276c6452c",
        "type": "function",
        "z": "3ab9e684f951f1bf",
        "name": "Taslak Sil",
        "func": "\nmsg.flowName = \"S2NSWAY000V1_0\";\n// Sorguyu dinamik olarak oluştur\n\n\nlet query = `\n DELETE   FROM TBLEIRSMAS WHERE EFATINCKEYNO IN (SELECT INCKEYNO FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}');\n DELETE   FROM TBLEIRSMAS WHERE FATIRS_NO IN (SELECT GIB_FATIRS_NO FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}');\n DELETE  FROM TBLEFATURA WHERE FATIRS_NO='${msg.FatNo}'\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 550,
        "wires": [
            [
                "a03ec877757770b4"
            ]
        ]
    },
    {
        "id": "a03ec877757770b4",
        "type": "subflow:d296b4008b6072d8",
        "z": "3ab9e684f951f1bf",
        "name": "MssqlFatKalem",
        "x": 1760,
        "y": 600,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "13cf5240377cd576",
        "type": "http response",
        "z": "20af6c29a4fea0a1",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 650,
        "y": 110,
        "wires": []
    },
    {
        "id": "344b9f65a1487d7a",
        "type": "function",
        "z": "20af6c29a4fea0a1",
        "name": "res",
        "func": "msg.payload = {\n    type: 3,\n    Sender: \"Node-Red-STNSWAY000V2.0\", // C# kodundaki varsayılan değeri koruduk\n    Detail: \"İSLEM BASARILI\",\n    DefinitionLang: \"İSLEM BASARILI\",\n    data: [{\"DispatchNoteNumber\":msg.payload.Data}],\n    Module: \"Node-Red-STNSWAY000V2.0\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 110,
        "wires": [
            [
                "13cf5240377cd576"
            ]
        ]
    },
    {
        "id": "d5d2c5b191036511",
        "type": "subflow:fc936f675a46124b",
        "z": "20af6c29a4fea0a1",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/ItemSlips/NewEItemSlipsNumber",
                "type": "str"
            }
        ],
        "x": 280,
        "y": 120,
        "wires": [
            [
                "344b9f65a1487d7a"
            ],
            []
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "f6838dd424349be7",
        "type": "function",
        "z": "20af6c29a4fea0a1",
        "name": "GetSalesWaybillNum",
        "func": "\n\n\nmsg.dataPayload =\n{\n    Code: \"I40\",\n    DocumentType: 2,\n    Use64BitService: true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 70,
        "wires": [
            [
                "d5d2c5b191036511"
            ]
        ]
    },
    {
        "id": "432fd15df5c664c4",
        "type": "subflow:fc936f675a46124b",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument/ShowEDocument",
                "type": "str"
            }
        ],
        "x": 1470,
        "y": 210,
        "wires": [
            [
                "b48a9ddc6094ea28"
            ],
            [
                "42473eaf5734168f"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "1d8fe81ad687f080",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Dizayn Kaydet",
        "func": "msg.dataPayload=\n{\n    \"GIBDocumentNumber\": msg.payload[0].GIB_FATIRS_NO,\n    \"HtmlPath\": env.get('InvoiceHtmlPath_GUVENLIK'),\n    \"DocumentBoxType\": 2, \n    \"EDocumentType\": 1\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 170,
        "wires": [
            [
                "432fd15df5c664c4"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "b48a9ddc6094ea28",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Taslak Sil",
        "func": " \n\nif (msg.isEInvoiceCustomer == true) {\n   \n    msg.query = `DELETE FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}'`;\n} else {    \n    msg.query = `DELETE FROM TBLEARSIV WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}'`;\n}\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 170,
        "wires": [
            [
                "e2979006f5d578b4"
            ]
        ]
    },
    {
        "id": "42473eaf5734168f",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1585,
        "y": 240,
        "wires": []
    },
    {
        "id": "6bfcf8d3e4a9aed4",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatKalem",
        "x": 1230,
        "y": 210,
        "wires": [
            [
                "1d8fe81ad687f080"
            ],
            [
                "db1c4362f9d0e751"
            ]
        ]
    },
    {
        "id": "e2979006f5d578b4",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatKalem",
        "x": 1720,
        "y": 210,
        "wires": [
            [
                "82db96788fd25726"
            ],
            [
                "bfaf69c56e45119c"
            ]
        ]
    },
    {
        "id": "5f354216ba6c4aff",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "GIB_FATIRSNO",
        "func": "\n\n\nlet query = `\nSELECT GIB_FATIRS_NO FROM TBLEFATURA WHERE FATIRS_NO='${ msg.netsisDataPayload.BELGE_NO}' AND CARI_KODU='${msg.netsisDataPayload.CARI_KODU}'\nUNION ALL \nSELECT GIB_FATIRS_NO  FROM TBLEARSIV WHERE FATIRS_NO='${ msg.netsisDataPayload.BELGE_NO}' AND CARI_KODU='${msg.netsisDataPayload.CARI_KODU}'\n\n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 170,
        "wires": [
            [
                "6bfcf8d3e4a9aed4"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "db1c4362f9d0e751",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1335,
        "y": 240,
        "wires": []
    },
    {
        "id": "82db96788fd25726",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "res",
        "func": "msg.payload = {\n    type: 0,\n    sender: \"UPDATEPLADET\", // C# kodundaki varsayılan değeri koruduk\n    detail: \"İSLEM BASARILI\",\n    definitionLang: \"İSLEM BASARILI\",\n    data: [],\n    module: \"APIUPDATEPLADET\"\n};\nmsg.res = global.get('BtnSendDocumentPrint_res')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 40,
        "wires": [
            [
                "bf494082c791c184"
            ]
        ]
    },
    {
        "id": "bfaf69c56e45119c",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 20",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1845,
        "y": 240,
        "wires": []
    },
    {
        "id": "720b216b3eba2f4b",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatKalem",
        "x": 730,
        "y": 220,
        "wires": [
            [
                "9edd2427bc06bc91"
            ],
            [
                "f1ab149f7a4ee085"
            ]
        ]
    },
    {
        "id": "ba6a244de377d2f4",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatKalem",
        "x": 1670,
        "y": 100,
        "wires": [
            [
                "82db96788fd25726"
            ],
            [
                "42a805d3a7dcaa6a"
            ]
        ]
    },
    {
        "id": "bf494082c791c184",
        "type": "http response",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2150,
        "y": 40,
        "wires": []
    },
    {
        "id": "c575a52b1c6f3765",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Taslak Sil",
        "func": "\nmsg.flowName = \"BtnSendDocumentPrint\";\n// Sorguyu dinamik olarak oluştur\n\n\nlet query = `\n DELETE   FROM TBLEIRSMAS WHERE EFATINCKEYNO IN (SELECT INCKEYNO FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}');\n DELETE   FROM TBLEIRSMAS WHERE FATIRS_NO IN (SELECT GIB_FATIRS_NO FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}');\n DELETE  FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}';\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 180,
        "wires": [
            [
                "720b216b3eba2f4b"
            ]
        ]
    },
    {
        "id": "f1ab149f7a4ee085",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 17",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 845,
        "y": 240,
        "wires": []
    },
    {
        "id": "1731144e1630f6e6",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Taslak Sil",
        "func": " \n\n\nlet query = `\n DELETE   FROM TBLEIRSMAS WHERE EFATINCKEYNO IN (SELECT INCKEYNO FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}');\n DELETE   FROM TBLEIRSMAS WHERE FATIRS_NO IN (SELECT GIB_FATIRS_NO FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}');\n DELETE  FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}';\n \n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 60,
        "wires": [
            [
                "ba6a244de377d2f4"
            ]
        ]
    },
    {
        "id": "42a805d3a7dcaa6a",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1785,
        "y": 130,
        "wires": []
    },
    {
        "id": "95db415348e1cde3",
        "type": "switch",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "property": "netsisDataPayload.FTIRSIP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "950d1f246a84b9d5"
            ],
            [
                "c575a52b1c6f3765"
            ],
            []
        ]
    },
    {
        "id": "682fe415c7ccb914",
        "type": "subflow:fc936f675a46124b",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument/ShowEDocument",
                "type": "str"
            }
        ],
        "x": 1450,
        "y": 100,
        "wires": [
            [
                "1731144e1630f6e6"
            ],
            [
                "1e53a2d12dcad7a2"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "1487e6b4342b4af3",
        "type": "subflow:f353afe31d73612e",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "env": [
            {
                "name": "SourceJson",
                "value": "{\"CARI_KODU\":\"CARI_KODU\",\"BELGE_NO\":\"BELGE_NO\",\"CARI_ISIM\":\"CARI_ISIM\",\"FTIRSIP\":\"FTIRSIP\",\"GIB_FATIRS_NO\":\"GIB_FATIRS_NO\",\"GRUP_KODU\":\"GRUP_KODU\"}",
                "type": "json"
            }
        ],
        "x": 310,
        "y": 210,
        "wires": [
            [
                "95db415348e1cde3"
            ]
        ]
    },
    {
        "id": "950d1f246a84b9d5",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Taslak Sil",
        "func": "\nmsg.flowName = \"BtnSendDocumentPrint1_0\";\n// Sorguyu dinamik olarak oluştur\n\nif (msg.isEInvoiceCustomer == true) {\n   \n    msg.query = `DELETE FROM TBLEFATURA WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}'`;\n} else {    \n    msg.query = `DELETE FROM TBLEARSIV WHERE FATIRS_NO='${msg.netsisDataPayload.BELGE_NO}'`;\n}\n\n \n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 90,
        "wires": [
            [
                "3b87ea8165d366dc"
            ]
        ]
    },
    {
        "id": "967e6c01cffe4749",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Dizayn Kaydet",
        "func": "msg.dataPayload=\n{\n    \"GIBDocumentNumber\": msg.payload[0].GIB_FATIRS_NO,\n    \"HtmlPath\": env.get('InvoiceHtmlPath_MELIH'),\n    \"DocumentBoxType\": 2, \n    \"EDocumentType\": msg.isEInvoiceCustomer == true ? 1 : 0\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 60,
        "wires": [
            [
                "682fe415c7ccb914"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "1e53a2d12dcad7a2",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1565,
        "y": 130,
        "wires": []
    },
    {
        "id": "c7f076817e3312c6",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "re",
        "func": "global.set('BtnSendDocumentPrint_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 165,
        "y": 210,
        "wires": [
            [
                "1487e6b4342b4af3"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "3b87ea8165d366dc",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatKalem",
        "x": 720,
        "y": 130,
        "wires": [
            [
                "8b1328d27dd65f81"
            ],
            [
                "824f685f318c4c1b"
            ]
        ]
    },
    {
        "id": "8f3c131f24c3a41d",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatKalem",
        "x": 1230,
        "y": 110,
        "wires": [
            [
                "967e6c01cffe4749"
            ],
            [
                "a09ce5219f394580"
            ]
        ]
    },
    {
        "id": "3826ba3bc79461bb",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "GIB_FATIRSNO",
        "func": "\n\n\nlet query = `\nSELECT GIB_FATIRS_NO  FROM TBLEFATURA WHERE FATIRS_NO='${ msg.netsisDataPayload.BELGE_NO}' AND CARI_KODU='${msg.netsisDataPayload.CARI_KODU}'\nUNION ALL \nSELECT GIB_FATIRS_NO  FROM TBLEARSIV WHERE FATIRS_NO='${ msg.netsisDataPayload.BELGE_NO}' AND CARI_KODU='${msg.netsisDataPayload.CARI_KODU}'\n\n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 70,
        "wires": [
            [
                "8f3c131f24c3a41d"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "824f685f318c4c1b",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 875,
        "y": 140,
        "wires": []
    },
    {
        "id": "a09ce5219f394580",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1345,
        "y": 130,
        "wires": []
    },
    {
        "id": "d241b13b27e13d04",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Error Response Message",
        "func": " \n \n\nmsg.payload = {\n    type: 2, //\"ERROR\",    \n    sender: \"Node-Red-BtnSendDocumentPrint_res\",\n    detail: msg.netsisTokenErrorMessage || \"Bir Hata Meydana Geldi Lütfen Log Dosyasina Bakiniz\", \n    definitionLang: msg.netsisTokenErrorMessage || \"Sorgu sirasinda hata\",\n    data: [],\n    module: \"BtnSendDocumentPrint_res\"\n};\nmsg.res = global.get('BtnSendDocumentPrint_res')\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 480,
        "wires": [
            [
                "baa5ef3dcf79e87d"
            ]
        ]
    },
    {
        "id": "baa5ef3dcf79e87d",
        "type": "http response",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1050,
        "y": 550,
        "wires": []
    },
    {
        "id": "dcdc3274e2bcdf73",
        "type": "link in",
        "z": "f3de0ac6bfb0216b",
        "name": "link in 12",
        "links": [
            "1e53a2d12dcad7a2",
            "42473eaf5734168f",
            "42a805d3a7dcaa6a",
            "824f685f318c4c1b",
            "a09ce5219f394580",
            "bfaf69c56e45119c",
            "db1c4362f9d0e751",
            "f1ab149f7a4ee085",
            "bb03706602b3fdf7",
            "1862611fe577cde9"
        ],
        "x": 785,
        "y": 470,
        "wires": [
            [
                "d241b13b27e13d04"
            ]
        ]
    },
    {
        "id": "9edd2427bc06bc91",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Taslak Oluştur",
        "func": " \nmsg.dataPayload=\n{\n    \"BelgeNo\": msg.netsisDataPayload.BELGE_NO,\n    \"Tip\": 2,\n    \"DizaynNo\": msg.netsisDataPayload.CARI_KODU=='515' ?  14:19,\n    \"DizaynKontrol\": true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 190,
        "wires": [
            [
                "fb836d0fa8a036bd"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "fb836d0fa8a036bd",
        "type": "subflow:fc936f675a46124b",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument",
                "type": "str"
            }
        ],
        "x": 990,
        "y": 230,
        "wires": [
            [
                "5f354216ba6c4aff"
            ],
            [
                "bb03706602b3fdf7"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "bb03706602b3fdf7",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 21",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1135,
        "y": 280,
        "wires": []
    },
    {
        "id": "df910fd5636fadf2",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "Taslak Oluştur",
        "func": " \n\nmsg.dataPayload=\n{\n    \"BelgeNo\": msg.netsisDataPayload.BELGE_NO,\n    \"Tip\": msg.isEInvoiceCustomer== true? 1:0,\n    \"DizaynNo\": msg.netsisDataPayload.CARI_KODU == \"3635\" ? 29 : msg.isEInvoiceCustomer == true? 18:17,\n    \"DizaynKontrol\": true\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 70,
        "wires": [
            [
                "50ddc984239e5ecc"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "50ddc984239e5ecc",
        "type": "subflow:fc936f675a46124b",
        "z": "f3de0ac6bfb0216b",
        "name": "",
        "env": [
            {
                "name": "RestUrl",
                "value": "api/v2/EDocument",
                "type": "str"
            }
        ],
        "x": 1000,
        "y": 100,
        "wires": [
            [
                "3826ba3bc79461bb"
            ],
            [
                "1862611fe577cde9"
            ]
        ],
        "outputLabels": [
            "",
            "ErrorMessage"
        ]
    },
    {
        "id": "2bd21b6306884655",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "boolEINVOICE CUSTOMER",
        "func": "\nmsg.isEInvoiceCustomer=msg.payload[0].IS_EINVOICE_CUSTOMER || false;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 530,
        "wires": [
            [
                "5190514a031ba783"
            ]
        ]
    },
    {
        "id": "36c4e35035c75d31",
        "type": "subflow:d296b4008b6072d8",
        "z": "f3de0ac6bfb0216b",
        "name": "MssqlFatUst",
        "x": 1400,
        "y": 490,
        "wires": [
            [
                "2bd21b6306884655"
            ],
            []
        ],
        "info": "CREATE FUNCTION IS_EINVOICE_CUSTOMER (@CARI_KOD NVARCHAR(50))\r\nRETURNS BIT\r\nAS\r\nBEGIN\r\n    DECLARE @Result BIT;\r\n\r\n    IF EXISTS (\r\n        SELECT 1 \r\n        FROM NETSIS..TBLEFATCARI A    WITH (NOLOCK) \r\n        LEFT JOIN TBLCASABIT B WITH (NOLOCK) \r\n            ON A.IDENTIFIER = B.VERGI_NUMARASI \r\n        WHERE B.CARI_KOD = @CARI_KOD \r\n          AND A.AKTIF = 'E'\r\n    )\r\n    BEGIN\r\n        SET @Result = 1; -- Kayıt varsa TRUE (1)\r\n    END\r\n    ELSE\r\n    BEGIN\r\n        SET @Result = 0; -- Kayıt yoksa FALSE (0)\r\n    END\r\n\r\n    RETURN @Result;\r\nEND\r\n\r\n\r\nSELECT dbo.IS_EINVOICE_CUSTOMER('644') AS KAYIT_VAR_MI;"
    },
    {
        "id": "6ff14b93141d881f",
        "type": "function",
        "z": "f3de0ac6bfb0216b",
        "name": "IS EINVOICE CUSTOMER",
        "func": "msg.query=`\n\n\nSELECT dbo.IS_EINVOICE_CUSTOMER('${msg.netsisDataPayload.CARI_KODU}') AS IS_EINVOICE_CUSTOMER;\n\n`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 450,
        "wires": [
            [
                "36c4e35035c75d31"
            ]
        ],
        "info": "CREATE  FUNCTION IS_EINVOICE_CUSTOMER (@CARI_KOD NVARCHAR(50))      \r\nRETURNS BIT      \r\nAS      \r\nBEGIN      \r\n    DECLARE @Result BIT;      \r\n      \r\n    IF EXISTS (  \r\n        SELECT 1  \r\n        FROM NETSIS..TBLEFATCARI A WITH (NOLOCK)  \r\n        WHERE A.AKTIF = 'E'  \r\n          AND (  \r\n                EXISTS (  \r\n                    SELECT 1  \r\n                    FROM TBLCASABIT B WITH (NOLOCK)  \r\n                    WHERE A.IDENTIFIER = B.VERGI_NUMARASI  \r\n                      AND B.CARI_KOD = @CARI_KOD  \r\n                )  \r\n             OR EXISTS (  \r\n                    SELECT 1  \r\n                    FROM TBLCASABITEK C WITH (NOLOCK)  \r\n                    WHERE A.IDENTIFIER = C.TCKIMLIKNO  \r\n                      AND C.CARI_KOD = @CARI_KOD  \r\n                )  \r\n            )  \r\n    )  \r\n        SET @Result = 1;  \r\n    ELSE  \r\n        SET @Result = 0;  \r\n  \r\n    RETURN @Result;  \r\nEND;  "
    },
    {
        "id": "8b1328d27dd65f81",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 22",
        "mode": "link",
        "links": [
            "59207989146934fd"
        ],
        "x": 855,
        "y": 90,
        "wires": []
    },
    {
        "id": "59207989146934fd",
        "type": "link in",
        "z": "f3de0ac6bfb0216b",
        "name": "link in 13",
        "links": [
            "8b1328d27dd65f81"
        ],
        "x": 1165,
        "y": 420,
        "wires": [
            [
                "6ff14b93141d881f"
            ]
        ]
    },
    {
        "id": "5190514a031ba783",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "5b655d7dd659d2f8"
        ],
        "x": 1605,
        "y": 530,
        "wires": []
    },
    {
        "id": "5b655d7dd659d2f8",
        "type": "link in",
        "z": "f3de0ac6bfb0216b",
        "name": "link in 14",
        "links": [
            "5190514a031ba783"
        ],
        "x": 865,
        "y": 50,
        "wires": [
            [
                "df910fd5636fadf2"
            ]
        ]
    },
    {
        "id": "1862611fe577cde9",
        "type": "link out",
        "z": "f3de0ac6bfb0216b",
        "name": "link out 24",
        "mode": "link",
        "links": [
            "dcdc3274e2bcdf73"
        ],
        "x": 1105,
        "y": 130,
        "wires": []
    },
    {
        "id": "cce8f946aa3f45d9",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 100,
        "wires": []
    },
    {
        "id": "6d3ab5afe316e058",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0') }]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 100,
        "wires": [
            [
                "cce8f946aa3f45d9"
            ]
        ]
    },
    {
        "id": "659798a6d80fb00a",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "Netsis2SFORIN_InsertStock_MSSQL_v1.0",
        "info": "",
        "x": 230,
        "y": 80,
        "wires": []
    },
    {
        "id": "2cccaae036a25b9b",
        "type": "subflow:b9701e9ae1caaffd",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 655,
        "y": 120,
        "wires": [
            [
                "6d3ab5afe316e058"
            ],
            [
                "4f378fca2f4fd15c"
            ]
        ],
        "l": false
    },
    {
        "id": "c68136d45539bedd",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "x": 535,
        "y": 120,
        "wires": [
            [
                "7213500630533c17"
            ]
        ],
        "l": false
    },
    {
        "id": "4f378fca2f4fd15c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\nmsg.payload = {\n    status: \"Info\",\n    message: payload||\"The program is running.\",\n    programName: \"Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nglobal.set('NTSP000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0')}]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 140,
        "wires": [
            [
                "7bfe053cda25a1df"
            ]
        ]
    },
    {
        "id": "e47f8c49f8f6c022",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "function 51",
        "func": "// burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set('res_MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0',msg.res)\nmsg.integrationParameter_FlowName=msg.req.url;\nlet url = msg?.req?.url;\n\n \nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n} \nelse \n{\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465,
        "y": 120,
        "wires": [
            [
                "c68136d45539bedd"
            ]
        ],
        "l": false
    },
    {
        "id": "f93ef21edcdbfe77",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "url": "NTSBSO000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "cd7c7b47e6c79aac"
            ]
        ],
        "info": "Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0"
    },
    {
        "id": "9114887d0e7b9eb5",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1250,
        "y": 530,
        "wires": []
    },
    {
        "id": "5699609978be02fc",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1') }]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 560,
        "wires": [
            [
                "9114887d0e7b9eb5"
            ]
        ]
    },
    {
        "id": "243ead1bc779db84",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0",
        "info": "",
        "x": 340,
        "y": 480,
        "wires": []
    },
    {
        "id": "ea8abe837b06040d",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "x": 565,
        "y": 520,
        "wires": [
            [
                "5f0053ed46ed42e2"
            ]
        ],
        "l": false
    },
    {
        "id": "8adf75c55d4276ff",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\nmsg.payload = {\n    status: \"Info\",\n    message: payload||\"The program is running.\",\n    programName: \"MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nglobal.set('NTSBSO000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1')}]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 600,
        "wires": [
            [
                "c73e20343dadb802"
            ]
        ]
    },
    {
        "id": "ebf9b753c0db2888",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "function 53",
        "func": " // burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set(\"Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1\", msg.res);\n\nmsg.integrationParameter_FlowName = msg.req.url;\nlet url = msg.req.url;\n\n\nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n}\nelse {\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 435,
        "y": 520,
        "wires": [
            [
                "ea8abe837b06040d"
            ]
        ],
        "l": false
    },
    {
        "id": "583958b872d4e043",
        "type": "subflow:f62922f2ea3dfbe6",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 685,
        "y": 530,
        "wires": [
            [
                "5699609978be02fc"
            ],
            [
                "8adf75c55d4276ff"
            ]
        ],
        "l": false
    },
    {
        "id": "0d0ad8239df80579",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "Params=>StockCode",
        "info": "",
        "x": 510,
        "y": 80,
        "wires": []
    },
    {
        "id": "cc8d5118bd29b498",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "Params",
        "func": "let stockCode=msg.req?.query?.StockCode;\n\nif(stockCode){\nglobal.set('NTSP000V1reqStockCode',stockCode)\n}\n \nglobal.set('NTSP000V1.0_payload_res_status',true)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 385,
        "y": 120,
        "wires": [
            [
                "e47f8c49f8f6c022"
            ]
        ],
        "l": false
    },
    {
        "id": "1826ee9bcabfc964",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "url": "NTSP000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "cc8d5118bd29b498"
            ]
        ],
        "info": "MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0"
    },
    {
        "id": "cd7c7b47e6c79aac",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "function 69",
        "func": "let orderNumber = msg.req?.query?.OrderNumber;\n\nif (orderNumber) {\n    node.warn(orderNumber);\n    global.set('NTSBSO000V1reqOrderNumber', orderNumber)\n}\n\n//NTSBSO000V1\n\nglobal.set('NTSBSO000V1.0_payload_res_status',true)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 520,
        "wires": [
            [
                "ebf9b753c0db2888"
            ]
        ],
        "l": false
    },
    {
        "id": "d5a070459c17282b",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "c08e5046461d6e3f"
            ]
        ]
    },
    {
        "id": "8afa6b7e3ad6423f",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "function 71",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSP000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 180,
        "wires": [
            [
                "d5a070459c17282b"
            ]
        ],
        "l": false
    },
    {
        "id": "d74caaec6d92d640",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "x": 275,
        "y": 180,
        "wires": [
            [
                "8afa6b7e3ad6423f"
            ]
        ],
        "l": false
    },
    {
        "id": "9b0d5a4ffef20246",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "d74caaec6d92d640"
            ]
        ]
    },
    {
        "id": "7e0182e4bfdda21d",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "function 73",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSBSO000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 365,
        "y": 580,
        "wires": [
            [
                "3c7137841de56924"
            ]
        ],
        "l": false
    },
    {
        "id": "42c544e9b157280e",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "x": 295,
        "y": 580,
        "wires": [
            [
                "7e0182e4bfdda21d"
            ]
        ],
        "l": false
    },
    {
        "id": "3c7137841de56924",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 520,
        "y": 580,
        "wires": [
            [
                "d974a20cfb396a46"
            ]
        ]
    },
    {
        "id": "d7394d56848f5e93",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "42c544e9b157280e"
            ]
        ]
    },
    {
        "id": "4f184f848d4cf740",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "url": "NTSC000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 320,
        "wires": [
            [
                "b2ad742b7f3c7e3e"
            ]
        ],
        "info": "Netsis2SFORIN_Customers_MSSQL_v1.0"
    },
    {
        "id": "dd81d2e8b3a0179d",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1150,
        "y": 300,
        "wires": []
    },
    {
        "id": "4e36532310976efb",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0') }];\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 300,
        "wires": [
            [
                "dd81d2e8b3a0179d"
            ]
        ]
    },
    {
        "id": "bf9de75c1d34fac8",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "Netsis2SFORIN_Customers_MSSQL_v1.0",
        "info": "",
        "x": 280,
        "y": 280,
        "wires": []
    },
    {
        "id": "f3f8ebe822bf26c4",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "x": 455,
        "y": 320,
        "wires": [
            [
                "c64ea4addeb56552",
                "9b05a8eec3171753"
            ]
        ],
        "l": false
    },
    {
        "id": "0995b23b70969aaf",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\n\nmsg.payload = {\n    status: \"Info\",\n    message: payload||\"The program is running.\",\n    programName: \"res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n global.set('NTSC000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0') }];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 360,
        "wires": [
            [
                "b30693a96214840f"
            ]
        ]
    },
    {
        "id": "84924e6e0470a11f",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "function 52",
        "func": " \n// burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set(\"res_MetropolUn_Netsis2SFORIN_Customers_MSSQL_v1.0\", msg.res);\n\nmsg.integrationParameter_FlowName = msg.req.url;\nlet url = msg.req.url;\n\n\nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n}\nelse {\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n}\n\nglobal.set('NTSC000V1.0_payload_res_status',true)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 320,
        "wires": [
            [
                "f3f8ebe822bf26c4"
            ]
        ],
        "l": false
    },
    {
        "id": "e09ad973954473b9",
        "type": "subflow:a464cb4f18f8f1f5",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 615,
        "y": 320,
        "wires": [
            [
                "4e36532310976efb"
            ],
            [
                "0995b23b70969aaf"
            ]
        ],
        "l": false
    },
    {
        "id": "b2ad742b7f3c7e3e",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "function 68",
        "func": "let customerCode = msg.req?.query?.CustomerCode;\n\nif (customerCode) {\n    global.set('NTSC000V1reqCustomerCode', customerCode)\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 295,
        "y": 320,
        "wires": [
            [
                "84924e6e0470a11f"
            ]
        ],
        "l": false
    },
    {
        "id": "a971d69137c421cb",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "function 72",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSC000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 380,
        "wires": [
            [
                "c8522c19b9137229"
            ]
        ],
        "l": false
    },
    {
        "id": "1953c0e70b2aba3b",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "x": 275,
        "y": 380,
        "wires": [
            [
                "a971d69137c421cb"
            ]
        ],
        "l": false
    },
    {
        "id": "c8522c19b9137229",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 500,
        "y": 380,
        "wires": [
            [
                "1f2c60ebec88d9b4"
            ]
        ]
    },
    {
        "id": "c4cb9dda0b66fa19",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "1953c0e70b2aba3b"
            ]
        ]
    },
    {
        "id": "9742d94b378f408a",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "url": "DelIntLogO000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "3441e14e765a31c9"
            ]
        ],
        "info": "Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0"
    },
    {
        "id": "0e749228f66d19be",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1220,
        "y": 760,
        "wires": []
    },
    {
        "id": "bcc8ae3226885dad",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"DeleteIntegrationLogv1\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_DeleteIntegrationLogv1') }]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 780,
        "wires": [
            [
                "0e749228f66d19be"
            ]
        ]
    },
    {
        "id": "5e5579a90a0eec10",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "Delete Integration Log",
        "info": "Delete Integration Log",
        "x": 200,
        "y": 700,
        "wires": []
    },
    {
        "id": "117d1b3c16173e4c",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "x": 505,
        "y": 740,
        "wires": [
            [
                "29e2e0e619900f52"
            ]
        ],
        "l": false
    },
    {
        "id": "a1bd186d52d5cacc",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\n\nmsg.payload = {\n    status: \"Info\",\n    message: payload||\"The program is running.\",\n    programName: \"DeleteIntegrationLogv1\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nglobal.set('DelIntLogO000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('res_DeleteIntegrationLogv1')}]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 820,
        "wires": [
            [
                "a0da0d36311e3c37"
            ]
        ]
    },
    {
        "id": "1b8dd17010af6ca6",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "function 75",
        "func": " // burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set(\"res_DeleteIntegrationLogv1\", msg.res);\n\nmsg.integrationParameter_FlowName = msg.req.url;\nlet url = msg.req.url;\n\n\nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n}\nelse {\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n}\n\nglobal.set('DelIntLogO000V1.0_payload_res_status',true)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 405,
        "y": 750,
        "wires": [
            [
                "117d1b3c16173e4c"
            ]
        ],
        "l": false
    },
    {
        "id": "3441e14e765a31c9",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "function 76",
        "func": "let interval = msg.req?.query?.Interval;\n\nif (interval) {\n    \n    global.set('/DelIntLogO000V1reqInterval', interval)\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335,
        "y": 740,
        "wires": [
            [
                "1b8dd17010af6ca6"
            ]
        ],
        "l": false
    },
    {
        "id": "367a664259a1e4ce",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "function 77",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"DelIntLogO000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 800,
        "wires": [
            [
                "bd183366d7e0c8f1"
            ]
        ],
        "l": false
    },
    {
        "id": "e50bac451dbfc007",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "x": 275,
        "y": 800,
        "wires": [
            [
                "367a664259a1e4ce"
            ]
        ],
        "l": false
    },
    {
        "id": "bd183366d7e0c8f1",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 500,
        "y": 800,
        "wires": [
            [
                "81ed5fa227580ffc"
            ]
        ]
    },
    {
        "id": "be3a674f2b228bc0",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 800,
        "wires": [
            [
                "e50bac451dbfc007"
            ]
        ]
    },
    {
        "id": "ccc41aa1d5389d96",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "url": "INTSYNC000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 960,
        "wires": [
            [
                "b6423a72fb5054ac",
                "6021a56577228627"
            ]
        ],
        "info": "Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0"
    },
    {
        "id": "2a6619051dde8322",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"res_INTSYNC000V1\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_INTSYNC000V1') }]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 940,
        "wires": [
            [
                "6891f57e5aae2321"
            ]
        ]
    },
    {
        "id": "fc29ac2694918cc2",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "N2SIntegrationSync",
        "info": "",
        "x": 190,
        "y": 920,
        "wires": []
    },
    {
        "id": "a929dd4877a854c6",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "x": 485,
        "y": 960,
        "wires": [
            [
                "9b1c3271ddd8c9d5"
            ]
        ],
        "l": false
    },
    {
        "id": "158a3e9de0180018",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\nmsg.payload = {\n    status: \"Info\",\n    message:  payload||\"The program is running.\",\n    programName: \"INTSYNC000V1\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nglobal.set('INTSYNC000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('res_INTSYNC000V1')}]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1000,
        "wires": [
            [
                "3499bad52a1448be"
            ]
        ]
    },
    {
        "id": "9159f1a71b9a15b9",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "function 79",
        "func": " // burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set(\"res_INTSYNC000V1\", msg.res);\n\nmsg.integrationParameter_FlowName = msg.req.url;\nlet url = msg.req.url;\n\n\nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n}\nelse {\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n}\nglobal.set('INTSYNC000V1.0_payload_res_status',true)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 960,
        "wires": [
            [
                "a929dd4877a854c6"
            ]
        ],
        "l": false
    },
    {
        "id": "b6423a72fb5054ac",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "function 80",
        "func": "// let interval = msg.req?.query?.Interval;\n\n// if (interval) {\n    \n//     global.set('/DelIntLogO000V1reqInterval', interval)\n// }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335,
        "y": 960,
        "wires": [
            [
                "9159f1a71b9a15b9"
            ]
        ],
        "l": false
    },
    {
        "id": "fd7be0bc412501bc",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "function 81",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"INTSYNC000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 1020,
        "wires": [
            [
                "70393404e17b9443"
            ]
        ],
        "l": false
    },
    {
        "id": "e396f198e6579e3d",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "x": 275,
        "y": 1020,
        "wires": [
            [
                "fd7be0bc412501bc"
            ]
        ],
        "l": false
    },
    {
        "id": "70393404e17b9443",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 510,
        "y": 1030,
        "wires": [
            [
                "187cc24b8dbebcd2"
            ]
        ]
    },
    {
        "id": "5647e814423e8bd3",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "e396f198e6579e3d"
            ]
        ]
    },
    {
        "id": "5eb1fbf2a53ee55b",
        "type": "subflow:e00c065eb7c30613",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "x": 635,
        "y": 740,
        "wires": [
            [
                "bcc8ae3226885dad"
            ],
            [
                "a1bd186d52d5cacc"
            ]
        ],
        "l": false
    },
    {
        "id": "d7acf2ceaf30b571",
        "type": "subflow:1053798a29903688",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 715,
        "y": 960,
        "wires": [
            [
                "2a6619051dde8322"
            ],
            [
                "158a3e9de0180018"
            ]
        ],
        "l": false
    },
    {
        "id": "187cc24b8dbebcd2",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "debug 158",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1030,
        "wires": []
    },
    {
        "id": "7bfe053cda25a1df",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1170,
        "y": 180,
        "wires": []
    },
    {
        "id": "b30693a96214840f",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1140,
        "y": 360,
        "wires": []
    },
    {
        "id": "c73e20343dadb802",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1230,
        "y": 590,
        "wires": []
    },
    {
        "id": "a0da0d36311e3c37",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1210,
        "y": 810,
        "wires": []
    },
    {
        "id": "6891f57e5aae2321",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1220,
        "y": 940,
        "wires": []
    },
    {
        "id": "3499bad52a1448be",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1210,
        "y": 990,
        "wires": []
    },
    {
        "id": "c08e5046461d6e3f",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "debug 202",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 190,
        "wires": []
    },
    {
        "id": "1f2c60ebec88d9b4",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "debug 203",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 390,
        "wires": []
    },
    {
        "id": "d974a20cfb396a46",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "debug 204",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 590,
        "wires": []
    },
    {
        "id": "81ed5fa227580ffc",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "debug 205",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "e5707922a5aba9e7",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1130,
        "y": 1910,
        "wires": []
    },
    {
        "id": "67a746b11685e2a7",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"Netsis2SFORIN_Netsis2SFORIN_ProductionDoc\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_Netsis2SFORIN_PrdDoc_MSSQL_v1.0') }]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1910,
        "wires": [
            [
                "e5707922a5aba9e7"
            ]
        ]
    },
    {
        "id": "62bb6c30d098a456",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "Netsis2SFORIN_ProductionDoc",
        "info": "",
        "x": 190,
        "y": 1890,
        "wires": []
    },
    {
        "id": "7aed8d10b28ca4b8",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "x": 525,
        "y": 1930,
        "wires": [
            [
                "6598f640ed63229d"
            ]
        ],
        "l": false
    },
    {
        "id": "bb0a944e914f3093",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\nmsg.payload = {\n    status: \"Info\",\n    message: payload||\"The program is running.\",\n    programName: \"Netsis2SFORIN_ProdDoc_MSSQL_v1.0\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nglobal.set('NTSP000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('res_Netsis2SFORIN_PrdDoc_MSSQL_v1.0')}]\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1950,
        "wires": [
            [
                "5876f658b7bd127b"
            ]
        ]
    },
    {
        "id": "bc7aa20cdf0da3ef",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "function 126",
        "func": "// burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set('res_Netsis2SFORIN_PrdDoc_MSSQL_v1.0',msg.res)\nmsg.integrationParameter_FlowName=msg.req.url;\nlet url = msg?.req?.url;\n\n \nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n} \nelse \n{\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n} \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 455,
        "y": 1930,
        "wires": [
            [
                "7aed8d10b28ca4b8"
            ]
        ],
        "l": false
    },
    {
        "id": "bcf8421640cf49c5",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "Params=>PrdDocNo",
        "info": "",
        "x": 430,
        "y": 1890,
        "wires": []
    },
    {
        "id": "feef0e255128d3d6",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "Params",
        "func": "let prdDocNo = msg.req?.query?.PrdDocNo;\n\nif(prdDocNo){\n    global.set('NTSPD000V1reqProductionDocNum',prdDocNo)\n}\n \nglobal.set('NTSPD000V1.0_payload_res_status',true)\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 1930,
        "wires": [
            [
                "bc7aa20cdf0da3ef"
            ]
        ],
        "l": false
    },
    {
        "id": "8e7bc49537739b2e",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "url": "NTSPD000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1930,
        "wires": [
            [
                "feef0e255128d3d6",
                "4018fd9e05cef24d"
            ]
        ],
        "info": "MetropolUn_Netsis2SFORIN_InsertStock_MSSQL_v1.0"
    },
    {
        "id": "f862e3da37008126",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 490,
        "y": 1990,
        "wires": [
            [
                "32d473cb825d6220"
            ]
        ]
    },
    {
        "id": "8075d22e253b4e13",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "function 127",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSPD000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 335,
        "y": 1990,
        "wires": [
            [
                "f862e3da37008126"
            ]
        ],
        "l": false
    },
    {
        "id": "0b7bab7758d0f053",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "x": 265,
        "y": 1990,
        "wires": [
            [
                "8075d22e253b4e13"
            ]
        ],
        "l": false
    },
    {
        "id": "719ddd38f8a4efc3",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1990,
        "wires": [
            [
                "0b7bab7758d0f053"
            ]
        ]
    },
    {
        "id": "5876f658b7bd127b",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1160,
        "y": 1990,
        "wires": []
    },
    {
        "id": "32d473cb825d6220",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "debug 250",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1990,
        "wires": []
    },
    {
        "id": "7dc18f431e0de57e",
        "type": "subflow:c823b85caa289042",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 645,
        "y": 1930,
        "wires": [
            [
                "67a746b11685e2a7"
            ],
            [
                "bb0a944e914f3093"
            ]
        ],
        "l": false
    },
    {
        "id": "6598f640ed63229d",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "function 128",
        "func": "msg.payload =msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSPD000V1.0\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 585,
        "y": 1930,
        "wires": [
            [
                "7dc18f431e0de57e"
            ]
        ],
        "l": false
    },
    {
        "id": "7213500630533c17",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "0ade6e9b8e25f5a2",
        "name": "function 129",
        "func": "msg.payload = msg.msg.allIntegrationParameters.find(x => x.flowEndPoint == msg.msg.integrationParameter_FlowName);\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 120,
        "wires": [
            [
                "2cccaae036a25b9b"
            ]
        ],
        "l": false
    },
    {
        "id": "c64ea4addeb56552",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "function 130",
        "func": "msg.payload = msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSC000V1.0\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 555,
        "y": 320,
        "wires": [
            [
                "e09ad973954473b9"
            ]
        ],
        "l": false
    },
    {
        "id": "5f0053ed46ed42e2",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "24904440bd5e033d",
        "name": "function 131",
        "func": "msg.payload = msg.msg.allIntegrationParameters.find(x => x.flowName === \"NTSBSO000V1.0\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 625,
        "y": 520,
        "wires": [
            [
                "583958b872d4e043"
            ]
        ],
        "l": false
    },
    {
        "id": "29e2e0e619900f52",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2d127e1eaf3e467e",
        "name": "function 132",
        "func": "msg.payload = msg.msg.allIntegrationParameters.find(x => x.flowName === \"DelIntLogO000V1.0\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 585,
        "y": 740,
        "wires": [
            [
                "5eb1fbf2a53ee55b"
            ]
        ],
        "l": false
    },
    {
        "id": "9b1c3271ddd8c9d5",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "function 133",
        "func": "msg.payload = msg.msg.allIntegrationParameters.find(x => x.flowName === \"INTSYNC000V1.0\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 960,
        "wires": [
            [
                "d7acf2ceaf30b571"
            ]
        ],
        "l": false
    },
    {
        "id": "731cb016cad40634",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "",
        "url": "STNSWAY000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 940,
        "y": 1420,
        "wires": [
            [
                "cb4559f120fed806"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"TEST0000000001\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n        \r\n         \"Material\":\"StokKodu1\",\r\n         \"Quantity\":\"1\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      },\r\n      {\r\n         \r\n         \"Material\":\"StokKodu2\",\r\n         \"Quantity\":\"2\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "d29854e26c303893",
        "type": "subflow:ccc4f9f8e6f67860",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "S2N SALES WAYBILL",
        "x": 1430,
        "y": 1420,
        "wires": []
    },
    {
        "id": "26ce8c092a5b0ff4",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "S2N SALES WAYBILL",
        "info": "SATIŞ IRSALIYESI",
        "x": 930,
        "y": 1360,
        "wires": []
    },
    {
        "id": "fa7a75c7734fa67c",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "a49dbe2ba93bc9f7",
        "name": "S2N Purchase Waybill",
        "info": "ALIŞ IRSALIYESI",
        "x": 160,
        "y": 1300,
        "wires": []
    },
    {
        "id": "1dfb5c135fbec4e2",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "a349a564e122784c",
        "name": "S2N Warehouse Trf",
        "info": "Depolar arasi transfer ",
        "x": 150,
        "y": 1450,
        "wires": []
    },
    {
        "id": "18db56f1c849e7f3",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "825b36caf3e60296",
        "name": "",
        "url": "STNWENT000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1630,
        "wires": [
            [
                "413faa702679ebe5"
            ]
        ]
    },
    {
        "id": "1bcd5e4157520214",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "825b36caf3e60296",
        "name": "S2N Warehouse Entry ",
        "info": "ambar giriş",
        "x": 170,
        "y": 1590,
        "wires": []
    },
    {
        "id": "68d3e0b4e82830a2",
        "type": "subflow:dd21aeba43582ce3",
        "z": "97e7314f695bb652",
        "g": "825b36caf3e60296",
        "name": "STNWENT000V1.0",
        "x": 670,
        "y": 1630,
        "wires": []
    },
    {
        "id": "c937a0e91548200a",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "d098266a21ed6898",
        "name": "",
        "url": "STNWEX000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1780,
        "wires": [
            [
                "6e4e7585c77d4b99"
            ]
        ]
    },
    {
        "id": "1d23ef183e2aa3ca",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "d098266a21ed6898",
        "name": "S2N Warehouse Exit",
        "info": "ambar cikiş",
        "x": 140,
        "y": 1730,
        "wires": []
    },
    {
        "id": "48f397e1e0034dc3",
        "type": "subflow:ddcc1ea5734e68f3",
        "z": "97e7314f695bb652",
        "g": "d098266a21ed6898",
        "name": "STNWEX000V1.0",
        "x": 690,
        "y": 1780,
        "wires": []
    },
    {
        "id": "06188f4d04df993c",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "94df2c76b014e91a",
        "name": "",
        "url": "STNFGRWC000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2130,
        "wires": [
            [
                "acde09f1a34fecf2",
                "7cc1fb2b36ec1359"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":null,\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n         \"ItemNo\":\"1\",\r\n         \"Material\":\"50007\",\r\n         \"Quantity\":\"2\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"6\",\r\n         \"TargetWarehouseCode\":\"1\"\r\n      } \r\n   ]\r\n}\r\n "
    },
    {
        "id": "d53603cc58737a8c",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "94df2c76b014e91a",
        "name": "FinishedGoodsReceiptWChanges",
        "info": "SERBEST  URETIM SONU KAYDI",
        "x": 200,
        "y": 2070,
        "wires": []
    },
    {
        "id": "84aa2bd75f6182c5",
        "type": "subflow:2a1dc06c4b793347",
        "z": "97e7314f695bb652",
        "g": "94df2c76b014e91a",
        "name": "STNFGRWC000V1",
        "x": 670,
        "y": 2120,
        "wires": []
    },
    {
        "id": "cb4559f120fed806",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "re",
        "func": "global.set('STNSWAY000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1115,
        "y": 1420,
        "wires": [
            [
                "312985ed4dd627a8"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "413faa702679ebe5",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "825b36caf3e60296",
        "name": "re",
        "func": "global.set('STNWENT000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 1630,
        "wires": [
            [
                "12353e3dbc62620e"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "6e4e7585c77d4b99",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "d098266a21ed6898",
        "name": "re",
        "func": "global.set('STNWEX000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 1780,
        "wires": [
            [
                "2557673fb7283910"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "acde09f1a34fecf2",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "94df2c76b014e91a",
        "name": "re",
        "func": "global.set('STNFGRWC000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 395,
        "y": 2130,
        "wires": [
            [
                "b41c1dd8f734d83e"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "312985ed4dd627a8",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Sales_Waybill",
                "type": "str"
            }
        ],
        "x": 1215,
        "y": 1420,
        "wires": [
            [
                "d29854e26c303893"
            ]
        ],
        "l": false
    },
    {
        "id": "12353e3dbc62620e",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "825b36caf3e60296",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Warehouse_Entry",
                "type": "str"
            }
        ],
        "x": 485,
        "y": 1630,
        "wires": [
            [
                "68d3e0b4e82830a2"
            ]
        ],
        "l": false
    },
    {
        "id": "2557673fb7283910",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "d098266a21ed6898",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Warehouse_Exit",
                "type": "str"
            }
        ],
        "x": 465,
        "y": 1780,
        "wires": [
            [
                "48f397e1e0034dc3"
            ]
        ],
        "l": false
    },
    {
        "id": "b41c1dd8f734d83e",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "94df2c76b014e91a",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Finished_Goods_Receipt_WChanges",
                "type": "str"
            }
        ],
        "x": 495,
        "y": 2130,
        "wires": [
            [
                "84aa2bd75f6182c5"
            ]
        ],
        "l": false
    },
    {
        "id": "1094ec5aea408f67",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "url": "STNRI000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 2280,
        "wires": [
            [
                "e03e71997ef080b0"
            ]
        ],
        "info": "Netsis2SFORIN_BuyerAndSellerOrderTransfer_MSSQL_v1.0"
    },
    {
        "id": "2b28f7bd7aae9dd0",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "Response Message",
        "func": "msg.payload = {\n    status: \"Info\",\n    message: \"Transfer successfully completed\",\n    programName: \"res_STNRI000V1\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\nreturn [{ ...msg, res: flow.get('res_STNRI000V1') }]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2260,
        "wires": [
            [
                "4b1517ac8c95b1f1"
            ]
        ]
    },
    {
        "id": "677ce43385e07bc3",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "STNReportItms",
        "info": "",
        "x": 150,
        "y": 2230,
        "wires": []
    },
    {
        "id": "77fbc1ac328ebe09",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "x": 485,
        "y": 2280,
        "wires": [
            [
                "dc6d71cb34ef086c"
            ]
        ],
        "l": false
    },
    {
        "id": "f73144f74bfd4c1c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "Response Message",
        "func": "//If an error occurs on the endpoint side, we catch it with the payload\nconst flowName=msg?.propIntegration?.flowName;\nconst payload=global.get(flowName+'_payload_res')\nmsg.payload = {\n    status: \"Info\",\n    message:  payload||\"The program is running.\",\n    programName: \"STNRI000V1\",   \n    timestamp: new Date().toISOString() // Yerel tarih ve saat\n};\n\nglobal.set('STNRI000V1.0_payload_res_status',false)\nreturn [{ ...msg, res: flow.get('res_STNRI000V1')}]",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2310,
        "wires": [
            [
                "8de10c6ea1223e85"
            ]
        ]
    },
    {
        "id": "e03e71997ef080b0",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "function 145",
        "func": " // burada atılan istek doğrultusunda flow nameini alıyorum ahngi akış tetiklenecek ise ona göre işleme alıyorum\nflow.set(\"res_STNRI000V1\", msg.res);\n\nmsg.integrationParameter_FlowName = msg.req.url;\nlet url = msg.req.url;\n\n\nif (url.includes(\"?\")) {\n    // \"?\" karakterinden önceki kısmı al\n    msg.integrationParameter_FlowName = msg.req.url = url.split(\"?\")[0];\n}\nelse {\n    // Eğer \"?\" yoksa, stringin tamamını al\n    msg.integrationParameter_FlowName = url;\n}\nglobal.set('STNRI000V1.0_payload_res_status',true)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 2280,
        "wires": [
            [
                "77fbc1ac328ebe09"
            ]
        ],
        "l": false
    },
    {
        "id": "57feddc30d95aa24",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "function 147",
        "func": "\nlet flowEndPoint = msg.msg.allIntegrationParameters.find(x => x.flowName === \"STNRI000V1.0\").flowEndPoint;\n\n// params eklenecek ise   query string ile ekle \nmsg.url = \"http://localhost:1880\" + flowEndPoint;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 2340,
        "wires": [
            [
                "215dc845a4f42499"
            ]
        ],
        "l": false
    },
    {
        "id": "effe8b59792f8ed5",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "x": 275,
        "y": 2340,
        "wires": [
            [
                "57feddc30d95aa24"
            ]
        ],
        "l": false
    },
    {
        "id": "215dc845a4f42499",
        "type": "http request",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 510,
        "y": 2350,
        "wires": [
            []
        ]
    },
    {
        "id": "af6e70f72b00ae82",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2340,
        "wires": [
            [
                "effe8b59792f8ed5"
            ]
        ]
    },
    {
        "id": "4b1517ac8c95b1f1",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1220,
        "y": 2260,
        "wires": []
    },
    {
        "id": "8de10c6ea1223e85",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "statusCode": "404",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1210,
        "y": 2310,
        "wires": []
    },
    {
        "id": "dc6d71cb34ef086c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "function 148",
        "func": "msg.payload = msg.msg.allIntegrationParameters.find(x => x.flowName === \"STNRI000V1.0\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 575,
        "y": 2280,
        "wires": [
            [
                "d2e79db1b4822d04"
            ]
        ],
        "l": false
    },
    {
        "id": "d2e79db1b4822d04",
        "type": "subflow:e269717c57799658",
        "z": "97e7314f695bb652",
        "g": "571b024112261756",
        "name": "",
        "env": [
            {
                "name": "manuel",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 730,
        "y": 2280,
        "wires": [
            [
                "2b28f7bd7aae9dd0"
            ],
            [
                "f73144f74bfd4c1c"
            ]
        ]
    },
    {
        "id": "9b05a8eec3171753",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "c7a67d413d6b7731",
        "name": "debug 291",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 280,
        "wires": []
    },
    {
        "id": "358d0fba9413ea32",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "a49dbe2ba93bc9f7",
        "name": "",
        "url": "STNBWAY000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1350,
        "wires": [
            [
                "f1ac2bb4123070d2",
                "74f34ff289a840e0"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"000000000000007\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n         \"ItemNo\":\"1\",\r\n         \"Material\":\"60030\",\r\n         \"Quantity\":\"1000\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"8\",\r\n         \"TargetWarehouseCode\":\"\"\r\n      },\r\n      {\r\n         \"ItemNo\":\"2\",\r\n         \"Material\":\"60029\",\r\n         \"Quantity\":\"1000\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"8\",\r\n         \"TargetWarehouseCode\":\"\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "f1ac2bb4123070d2",
        "type": "subflow:1bd2a61f8400e469",
        "z": "97e7314f695bb652",
        "g": "a49dbe2ba93bc9f7",
        "name": "",
        "x": 560,
        "y": 1350,
        "wires": [
            []
        ]
    },
    {
        "id": "3f7b0deda8be60c5",
        "type": "http in",
        "z": "97e7314f695bb652",
        "d": true,
        "g": "ce0d6a43298d2e6c",
        "name": "",
        "url": "STNSINV000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "c3de0b931351a718"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"TEST0000000001\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n        \r\n         \"Material\":\"StokKodu1\",\r\n         \"Quantity\":\"1\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      },\r\n      {\r\n         \r\n         \"Material\":\"StokKodu2\",\r\n         \"Quantity\":\"2\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "c3de0b931351a718",
        "type": "function",
        "z": "97e7314f695bb652",
        "d": true,
        "g": "ce0d6a43298d2e6c",
        "name": "re",
        "func": "global.set('STNSINV000V1_res',msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1115,
        "y": 1180,
        "wires": [
            [
                "ecf33d932f8d832b"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "ecf33d932f8d832b",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "97e7314f695bb652",
        "d": true,
        "g": "ce0d6a43298d2e6c",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "Seller_Invoice",
                "type": "str"
            }
        ],
        "x": 1235,
        "y": 1200,
        "wires": [
            [
                "ba6a36f0cf73392f"
            ]
        ],
        "l": false
    },
    {
        "id": "ba6a36f0cf73392f",
        "type": "subflow:22db7f4bcd69fa91",
        "z": "97e7314f695bb652",
        "d": true,
        "g": "ce0d6a43298d2e6c",
        "name": "S2N SALES INVOICE",
        "x": 1450,
        "y": 1190,
        "wires": [
            []
        ]
    },
    {
        "id": "251a3b0ef5a3d794",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "ce0d6a43298d2e6c",
        "name": "S2N  SALE INVOICE",
        "info": "SATIŞ Faturası",
        "x": 930,
        "y": 1150,
        "wires": []
    },
    {
        "id": "6ce70b3c30648697",
        "type": "subflow:95c542b74b7a0db4",
        "z": "97e7314f695bb652",
        "g": "a349a564e122784c",
        "name": "",
        "x": 480,
        "y": 1480,
        "wires": []
    },
    {
        "id": "622a25d6c2eb4419",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "a349a564e122784c",
        "name": "",
        "url": "STNWTRF000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1480,
        "wires": [
            [
                "6ce70b3c30648697"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"000000000000007\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n         \"ItemNo\":\"1\",\r\n         \"Material\":\"60030\",\r\n         \"Quantity\":\"1000\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"8\",\r\n         \"TargetWarehouseCode\":\"\"\r\n      },\r\n      {\r\n         \"ItemNo\":\"2\",\r\n         \"Material\":\"60029\",\r\n         \"Quantity\":\"1000\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"8\",\r\n         \"TargetWarehouseCode\":\"\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "507f29be63bfca14",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "ce0d6a43298d2e6c",
        "name": "",
        "url": "STNSINV000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 930,
        "y": 1270,
        "wires": [
            [
                "812e303095ba860b",
                "45a0b09aa4ae1c9f"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"TEST0000000001\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n        \r\n         \"Material\":\"StokKodu1\",\r\n         \"Quantity\":\"1\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      },\r\n      {\r\n         \r\n         \"Material\":\"StokKodu2\",\r\n         \"Quantity\":\"2\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "812e303095ba860b",
        "type": "subflow:a7ee580a04fce715",
        "z": "97e7314f695bb652",
        "g": "ce0d6a43298d2e6c",
        "name": "",
        "x": 1410,
        "y": 1270,
        "wires": []
    },
    {
        "id": "147e3751e0b23391",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "ce0d6a43298d2e6c",
        "name": "Desc.",
        "info": "Sevkiyat ekrani arac kapama islemi icin netsiste\nsatis fatura olusturmaktadır",
        "x": 900,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6d34ab8d4702b766",
        "type": "subflow:b9b9f807cf3a5e6a",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "",
        "x": 1380,
        "y": 1500,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "8227d40cf18cf315",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "",
        "url": "STNSWAY000V2",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 940,
        "y": 1500,
        "wires": [
            [
                "6d34ab8d4702b766"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"TEST0000000001\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n        \r\n         \"Material\":\"StokKodu1\",\r\n         \"Quantity\":\"1\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      },\r\n      {\r\n         \r\n         \"Material\":\"StokKodu2\",\r\n         \"Quantity\":\"2\",\r\n         \"Unit\":\"KG\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"1\",\r\n         \"TargetWarehouseCode\":\"6\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "53d1f2772ce53521",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "Sevkşyat araç kapama ",
        "info": "Sevkşyat araç kapama",
        "x": 940,
        "y": 1460,
        "wires": []
    },
    {
        "id": "4018fd9e05cef24d",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "c61dc7b72c1cb6c1",
        "name": "debug 361",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 1950,
        "wires": []
    },
    {
        "id": "b1523bf64ec4d717",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "a9dbbc0277cd0bc2",
        "name": "",
        "url": "/IsShipmentMatchingOrderV001",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1010,
        "y": 1680,
        "wires": [
            [
                "f01ca43ac70b7252"
            ]
        ]
    },
    {
        "id": "f01ca43ac70b7252",
        "type": "subflow:994d236e9dad90dc",
        "z": "97e7314f695bb652",
        "g": "a9dbbc0277cd0bc2",
        "name": "",
        "x": 1330,
        "y": 1680,
        "wires": []
    },
    {
        "id": "135e31a417368a81",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "a9dbbc0277cd0bc2",
        "name": "Sevkşyat araç kapama ",
        "info": "Sevkşyat araç kapama CNF CEKILIYOR STATE",
        "x": 950,
        "y": 1640,
        "wires": []
    },
    {
        "id": "45a0b09aa4ae1c9f",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "ce0d6a43298d2e6c",
        "name": "debug 384",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1240,
        "wires": []
    },
    {
        "id": "317c30fd5918ecbf",
        "type": "inject",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 940,
        "y": 1550,
        "wires": [
            [
                "af5816b80d17c368"
            ]
        ]
    },
    {
        "id": "af5816b80d17c368",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "1416aa57eea7f6ab",
        "name": "function 162",
        "func": "msg.payload=\n  [\n      {\n        \"attributeName\":\"RootAdi\",\n        \"attributeValue\":\"F.GANDR1\",\n         \"attributeSyncField\":\"MatchValue\",\n         \"attributeGroup\":\"Default\",\n         \"attributeRelatedEntityType\":\"MOBILE\",\n         \"attributeAttributeSyncField\":\"ROOTADI\",\n         \"isAttributeRequired\":true,\n         \"attributeType\":\"STRING\"\n      },\n      {\n         \"attributeName\":\"Sevk_Tarihi\",\n         \"attributeValue\":\"06-08-2025\",\n         \"attributeSyncField\":\"MatchValue\",\n         \"attributeGroup\":\"Default\",\n         \"attributeRelatedEntityType\":\"MOBILE\",\n         \"attributeAttributeSyncField\":\"SEVK_TARIHI\",\n         \"isAttributeRequired\":true,\n         \"attributeType\":\"STRING\"\n      }\n   ]\n   \n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 1550,
        "wires": [
            [
                "6d34ab8d4702b766"
            ]
        ],
        "info": "msg.payload=\r\n  [\r\n      {\r\n        \"attributeName\":\"RootAdi\",\r\n        \"attributeValue\":\"METROPOL1\",\r\n         \"attributeSyncField\":\"MatchValue\",\r\n         \"attributeGroup\":\"Default\",\r\n         \"attributeRelatedEntityType\":\"MOBILE\",\r\n         \"attributeAttributeSyncField\":\"ROOTADI\",\r\n         \"isAttributeRequired\":true,\r\n         \"attributeType\":\"STRING\"\r\n      },\r\n      {\r\n         \"attributeName\":\"Sevk_Tarihi\",\r\n         \"attributeValue\":\"03-06-2025\",\r\n         \"attributeSyncField\":\"MatchValue\",\r\n         \"attributeGroup\":\"Default\",\r\n         \"attributeRelatedEntityType\":\"MOBILE\",\r\n         \"attributeAttributeSyncField\":\"SEVK_TARIHI\",\r\n         \"isAttributeRequired\":true,\r\n         \"attributeType\":\"STRING\"\r\n      }\r\n   ]\r\n   \r\n\r\n\r\nreturn msg;"
    },
    {
        "id": "7cc1fb2b36ec1359",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "94df2c76b014e91a",
        "name": "debug 435",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 2080,
        "wires": []
    },
    {
        "id": "936f8ef1fc39c3a6",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "Get FatUst",
        "func": " \nmsg.flowName =  \"DocumentViewPLQuantity\";\n \n// Sorguyu dinamik olarak oluştur\nlet query = ` \n \n WITH A1 AS\n  (SELECT\n     (SELECT SUM(SP.STHAR_GCMIK * CASE\n                                      WHEN S.OLCU_BR1 = 'PL' THEN 1.0\n                                      WHEN S.OLCU_BR2 = 'PL' THEN CAST(S.PAY_1 AS FLOAT) / NULLIF(CAST(S.PAYDA_1 AS FLOAT), 0)\n                                      WHEN S.OLCU_BR3 = 'PL' THEN CAST(S.PAY2 AS FLOAT) / NULLIF(CAST(S.PAYDA2 AS FLOAT), 0)\n                                      WHEN B.OLCUBIRIMI='PL' THEN CAST(B.PAY AS FLOAT) / NULLIF(CAST(B.PAYDA AS FLOAT), 0)\n                                      ELSE 0\n                                  END) AS CarpanliMiktar\n      FROM TBLSIPATRA SP\n      LEFT JOIN TBLSTBIRIM B ON B.KOD =SP.STOK_KODU\n      LEFT JOIN TBLSTSABIT S ON S.STOK_KODU=SP.STOK_KODU\n      WHERE SP.FISNO=A.FATIRS_NO) AS PL_ADET\n   FROM TBLSIPAMAS A\n   JOIN TBLSIPAMASSAHAEK B ON A.FATIRS_NO=B.FATIRS_NO\n   WHERE A.FTIRSIP=6\n     AND B.KT_ROOTADI_6='${msg.netsisDataPayload.RootAdi}'\n     AND D_YEDEK10=CONVERT(datetime, '${msg.netsisDataPayload.Sevk_Tarihi}', 103))\nSELECT *\nFROM A1\n`;\n\n \nmsg.query=query;\n\nreturn msg;\n ",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1800,
        "wires": [
            [
                "6e5194dbe9d9a12b"
            ]
        ]
    },
    {
        "id": "652d286d6f851a2f",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "RES",
        "func": " \n\nconst value = msg.payload[0].PL_ADET;\nmsg.DocumentViewPLQuantity = value % 1 === 0 ? value : Math.ceil(value);\n\n\nmsg.payload = {\n    Type: 3,\n    Sender: \"Node-Red-DocumentViewPLQunatity\", // C# kodundaki varsayılan değeri koruduk\n    Detail: \"PALET ADETI\",\n    DefinitionLang: \"İPALET ADETI\",\n    data: [{ PL_ADET: `${msg.DocumentViewPLQuantity}` }],\n    Module: \"Node-Red-DocumentViewPLQunatity\"\n};\nmsg.res = global.get('DocumentViewPLQuantityV0001_res')\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1800,
        "wires": [
            [
                "6b711bb422e116d0"
            ]
        ]
    },
    {
        "id": "ec56fac55b0af0ed",
        "type": "subflow:f353afe31d73612e",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "",
        "env": [
            {
                "name": "SourceJson",
                "value": "{\"RootAdi\":\"RootAdi\",\"Sevk_Tarihi\":\"Sevk_Tarihi\"}",
                "type": "json"
            }
        ],
        "x": 1350,
        "y": 1800,
        "wires": [
            [
                "936f8ef1fc39c3a6"
            ]
        ]
    },
    {
        "id": "40aa1efad85fb3aa",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "",
        "url": "DocumentViewPLQuantityV0001",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1010,
        "y": 1800,
        "wires": [
            [
                "17a24e5ae07dbd76"
            ]
        ]
    },
    {
        "id": "17a24e5ae07dbd76",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "request set global ",
        "func": "global.set('DocumentViewPLQuantityV0001_res', msg.res)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1205,
        "y": 1800,
        "wires": [
            [
                "ec56fac55b0af0ed"
            ]
        ],
        "l": false
    },
    {
        "id": "6b711bb422e116d0",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2010,
        "y": 1800,
        "wires": []
    },
    {
        "id": "a619d5bb3a69a1ca",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "Sevkşyat araç kapama ",
        "info": "İlgili Root ve tarih için \nsiparişin pl adet karşılığını geri döner",
        "x": 980,
        "y": 1760,
        "wires": []
    },
    {
        "id": "055cbaa40e76a1a8",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "debug 453",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1880,
        "y": 1760,
        "wires": []
    },
    {
        "id": "6021a56577228627",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "58b0549190818c1b",
        "name": "debug 457",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 900,
        "wires": []
    },
    {
        "id": "a006333aa90bf58b",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "549a4dca03d0fc64",
        "name": "",
        "url": "UpdateShipmentNum",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1160,
        "wires": [
            [
                "89ec2f16c612017d"
            ]
        ],
        "info": "{\r\n   \"header\":{\r\n      \"OrderNo\":\"000000000000007\",\r\n      \"Date\":\"2024-12-16 00:00:00\",\r\n      \"User\":\"MEHMET\"\r\n   },\r\n   \"Items\":[\r\n      {\r\n         \"ItemNo\":\"1\",\r\n         \"Material\":\"60030\",\r\n         \"Quantity\":\"1000\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"1\",\r\n         \"WarehouseCode\":\"8\",\r\n         \"TargetWarehouseCode\":\"\"\r\n      },\r\n      {\r\n         \"ItemNo\":\"2\",\r\n         \"Material\":\"60029\",\r\n         \"Quantity\":\"1000\",\r\n         \"Unit\":\"\",\r\n         \"OrderLineNo\":\"2\",\r\n         \"WarehouseCode\":\"8\",\r\n         \"TargetWarehouseCode\":\"\"\r\n      }\r\n   ]\r\n}\r\n "
    },
    {
        "id": "f7b7bd98b919958c",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "549a4dca03d0fc64",
        "name": "IRSALIYE NUM DEGISTIRME",
        "info": "IRSALIYE NUMARA DEGISTIRME MAL KABUL OKUTYAN ARKADASLAR",
        "x": 600,
        "y": 1130,
        "wires": []
    },
    {
        "id": "89ec2f16c612017d",
        "type": "subflow:2ad6940233ab0133",
        "z": "97e7314f695bb652",
        "g": "549a4dca03d0fc64",
        "name": "",
        "x": 450,
        "y": 1160,
        "wires": []
    },
    {
        "id": "f88158f49c3e1064",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "ea9c9fb8ccb11447",
        "name": "",
        "url": "IsShipmentMatchingOrderItemV001",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1700,
        "y": 1670,
        "wires": [
            [
                "ea62db1fcb4f3811"
            ]
        ]
    },
    {
        "id": "ea62db1fcb4f3811",
        "type": "subflow:d2197442821c3f1f",
        "z": "97e7314f695bb652",
        "g": "ea9c9fb8ccb11447",
        "name": "IsShipmentMatchingOrderItemV001",
        "x": 2070,
        "y": 1670,
        "wires": []
    },
    {
        "id": "b80f5d655852566a",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "ea9c9fb8ccb11447",
        "name": "Sevkşyat araç Takip Kalem bazlı",
        "info": " ",
        "x": 1690,
        "y": 1630,
        "wires": []
    },
    {
        "id": "6e5194dbe9d9a12b",
        "type": "subflow:d296b4008b6072d8",
        "z": "97e7314f695bb652",
        "g": "675f92b94f331e80",
        "name": "",
        "x": 1700,
        "y": 1790,
        "wires": [
            [
                "652d286d6f851a2f"
            ],
            []
        ]
    },
    {
        "id": "3e00bb71bc4a0e6c",
        "type": "subflow:7797de26835d320a",
        "z": "97e7314f695bb652",
        "g": "c72f133eaa3905d6",
        "name": "",
        "x": 1940,
        "y": 1530,
        "wires": []
    },
    {
        "id": "8e78f02623be842b",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "c72f133eaa3905d6",
        "name": "",
        "url": "STNRDN000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1720,
        "y": 1530,
        "wires": [
            [
                "3e00bb71bc4a0e6c"
            ]
        ]
    },
    {
        "id": "b9bdb77b68d2d1b3",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "c72f133eaa3905d6",
        "name": "SATISTAN IADE",
        "info": "SATISTAN IADE",
        "x": 1680,
        "y": 1470,
        "wires": []
    },
    {
        "id": "e06673041ac0a0bc",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "7fd394ef736b1dfd",
        "name": "",
        "url": "STNRDNAI000V1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1740,
        "y": 1370,
        "wires": [
            [
                "f092fb285ff94d6d"
            ]
        ]
    },
    {
        "id": "8fe4b2f331149b51",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "7fd394ef736b1dfd",
        "name": "ALISIADE",
        "info": "ALIS IADE",
        "x": 1670,
        "y": 1310,
        "wires": []
    },
    {
        "id": "f092fb285ff94d6d",
        "type": "subflow:55047cbfc0388bed",
        "z": "97e7314f695bb652",
        "g": "7fd394ef736b1dfd",
        "name": "",
        "x": 2000,
        "y": 1360,
        "wires": []
    },
    {
        "id": "986164bcecd04e30",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "d8d382cb55ab08da",
        "name": "",
        "url": "NetsisAracSablon",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1740,
        "y": 1130,
        "wires": [
            [
                "39bd27eda8f27c6e"
            ]
        ]
    },
    {
        "id": "39bd27eda8f27c6e",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "d8d382cb55ab08da",
        "name": "NetsisAracSablonV2",
        "func": "\nmsg.flowName = \"NetsisAracSablon1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n\nselect \nNULL PLAKA,\nISNULL(VERGI_NUMARASI,TCKIMLIKNO)  TASIYICI_VKN,\nDBO.TRK(A.CARI_ISIM) TASIYICI_NAME,\nCARI_ILCE ILCE,\ndbo.TRK(CARI_IL) IL,\nULKE_KODU ULKE,\nA.POSTAKODU POSTA_KODU,\nNULL SOFOR1AD,\nNULL SOFOR1SOYAD,\nNULL SOFOR1TC,\nNULL SOFOR2AD,\nNULL  SOFOR2SOYAD,\nNULL SOFOR2TC,\nNULL SOFOR3AD,\nNULL SOFOR3SOYAD,\nNULL SOFOR3TC\nfrom TBLCASABIT A\nJOIN TBLCASABITEK B  ON A.CARI_KOD=B.CARI_KOD\nWHERE A.CARI_KOD='${msg.payload.data.customerCode}'\nUNION ALL\nSELECT \nLICENSEPLATEID PLAKA,\nCARRIERVKN TASIYICI_VKN,\ndbo.TRK(CARRIERNAME) TASIYICI_NAME , \ndbo.TRK(CARRIERSUBCITY) ILCE, \ndbo.TRK(CARRIERCITY) IL ,\ndbo.TRK(CARRIERCOUNTRY) ULKE,\ndbo.TRK(CARRIERPOSTAL) POSTA_KODU,\ndbo.TRK(DPERSON1FIRSTNAME) SOFOR1AD,\ndbo.TRK(DPERSON1FAMILYNAME) SOFOR1SOYAD,\ndbo.TRK(DPERSON1NID)SOFOR1TC,\ndbo.TRK(DPERSON2FIRSTNAME) SOFOR2AD,\ndbo.TRK(DPERSON2FAMILYNAME) SOFOR2SOYAD,\ndbo.TRK(DPERSON2NID)SOFOR2TC,\ndbo.TRK(DPERSON3FIRSTNAME) SOFOR3AD,\ndbo.TRK(DPERSON3FAMILYNAME) SOFOR3SOYAD,\ndbo.TRK(DPERSON3NID)SOFOR3TC FROM TBLEIRSABLON   \n\n\n \n\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1190,
        "wires": [
            [
                "98a567ff315446f8"
            ]
        ]
    },
    {
        "id": "21c1e70f264c1dd1",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "d8d382cb55ab08da",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1970,
        "y": 1230,
        "wires": []
    },
    {
        "id": "98a567ff315446f8",
        "type": "subflow:d296b4008b6072d8",
        "z": "97e7314f695bb652",
        "g": "d8d382cb55ab08da",
        "name": "MssqlFatKalem",
        "x": 1800,
        "y": 1230,
        "wires": [
            [
                "21c1e70f264c1dd1"
            ],
            []
        ]
    },
    {
        "id": "cf11334523e158c8",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "6cb1da64a6630ec0",
        "name": "",
        "url": "GetSalesWaybillNumber",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1760,
        "y": 1030,
        "wires": [
            [
                "00577bddccab486f"
            ]
        ]
    },
    {
        "id": "00577bddccab486f",
        "type": "subflow:20af6c29a4fea0a1",
        "z": "97e7314f695bb652",
        "g": "6cb1da64a6630ec0",
        "name": "",
        "x": 2040,
        "y": 1030,
        "wires": []
    },
    {
        "id": "0909a2ebf59b0580",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "6cb1da64a6630ec0",
        "name": "SON IRSALIYE NUM GETIR",
        "info": "ALIS IADE",
        "x": 1760,
        "y": 980,
        "wires": []
    },
    {
        "id": "a0fab05470bac30b",
        "type": "function",
        "z": "97e7314f695bb652",
        "d": true,
        "g": "fbd838edef29f218",
        "name": "Shipping_Vehicles_Detail v1",
        "func": "\nmsg.flowName = \"Shipping_Vehicles_Detail1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n WITH A1 AS\n  (SELECT\n     (SELECT SUM(SP.STHAR_GCMIK * CASE\n                                      WHEN S.OLCU_BR1 = 'PL' THEN 1.0\n                                      WHEN S.OLCU_BR2 = 'PL' THEN CAST(S.PAY_1 AS FLOAT) / NULLIF(CAST(S.PAYDA_1 AS FLOAT), 0)\n                                      WHEN S.OLCU_BR3 = 'PL' THEN CAST(S.PAY2 AS FLOAT) / NULLIF(CAST(S.PAYDA2 AS FLOAT), 0)\n                                      WHEN B.OLCUBIRIMI='PL' THEN CAST(B.PAY AS FLOAT) / NULLIF(CAST(B.PAYDA AS FLOAT), 0)\n                                      ELSE 0\n                                  END) AS CarpanliMiktar\n      FROM TBLSIPATRA SP\n      LEFT JOIN TBLSTBIRIM B ON B.KOD =SP.STOK_KODU\n      LEFT JOIN TBLSTSABIT S ON S.STOK_KODU=SP.STOK_KODU\n      WHERE SP.FISNO=A.FATIRS_NO) AS PL_ADET,\n\n\t  (SELECT SUM(SP1.STHAR_GCMIK)  FROM TBLSIPATRA SP1  WHERE SP1.FISNO=A.FATIRS_NO  ) AS TOPLAM_MIKTAR\n      ,D_YEDEK10\n\t  ,A.FATIRS_NO\n\t  ,A.CARI_KODU,\n\t  A.CARI_KOD2,\n\t  DBO.TRK(CS.CARI_ISIM) CARI_ISIM,\n\t  DBO.TRK(CST.CARI_ISIM) TESLIM_CARI_ISIM,\n      EK.ACIK1\n\nFROM TBLSIPAMAS A\nJOIN TBLFATUEK EK ON A.FATIRS_NO=EK.FATIRSNO AND A.FTIRSIP=EK.FKOD\nJOIN TBLSIPAMASSAHAEK B ON A.FATIRS_NO=B.FATIRS_NO\nLEFT JOIN TBLCASABIT CS ON CS.CARI_KOD=A.CARI_KODU\nLEFT JOIN TBLCASABIT CST ON CST.CARI_KOD=A.CARI_KOD2\nWHERE A.FTIRSIP=6\n    AND B.KT_ROOTADI_6='${msg.payload.data.RootAdi}'\n    AND D_YEDEK10=CONVERT(datetime, '${msg.payload.data.Sevk_Tarihi}', 103)\n\t\n\t)\n\nSELECT FLOOR(PL_ADET) PL_ADET,\nCAST(TOPLAM_MIKTAR AS decimal(18,2)) TOPLAM_SIPARIS_MIKTARI,\nCONVERT(varchar, D_YEDEK10, 104) SEVK_TARIHI,\nFATIRS_NO BELGE_NO,\nCARI_KODU,\nCARI_ISIM,\nACIK1,\nCARI_KOD2 TESLIM_CARI,\nTESLIM_CARI_ISIM\n\n\n\nFROM A1\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 820,
        "wires": [
            [
                "f758928db9cd4a5d"
            ]
        ]
    },
    {
        "id": "8bb27c8c851f677d",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "fbd838edef29f218",
        "name": "",
        "url": "Shipping_Vehicles_Detail",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1550,
        "y": 890,
        "wires": [
            [
                "a0fab05470bac30b",
                "2e9552a344cd474c"
            ]
        ]
    },
    {
        "id": "f758928db9cd4a5d",
        "type": "subflow:d296b4008b6072d8",
        "z": "97e7314f695bb652",
        "g": "fbd838edef29f218",
        "name": "MssqlFatKalem",
        "x": 2090,
        "y": 890,
        "wires": [
            [
                "2a2677384e16a136"
            ],
            []
        ]
    },
    {
        "id": "2a2677384e16a136",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "fbd838edef29f218",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2260,
        "y": 890,
        "wires": []
    },
    {
        "id": "633e779c8162ac66",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "fbd838edef29f218",
        "name": "Sevkiyat Araç Detay",
        "info": "ALIS IADE",
        "x": 2020,
        "y": 820,
        "wires": []
    },
    {
        "id": "79398adc4659539e",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "Update_Shipping_Vehicles_Detail",
        "func": "\nmsg.flowName = \"NetsisAracSablon1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = ` \n \nUPDATE TBLSIPAMASSAHAEK SET KT_PALET_6= ${msg.payload.Data[0].PL_ADET}  WHERE FTIRSIP=6 AND  FATIRS_NO= '${msg.payload.Data[0].BELGE_NO}'\n\n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 690,
        "wires": [
            [
                "35964d7c748b3480",
                "355c1c80f6fb97d9"
            ]
        ]
    },
    {
        "id": "7823206bd2fc3dc4",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "",
        "url": "UPDATEPLADET",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1620,
        "y": 690,
        "wires": [
            [
                "79398adc4659539e"
            ]
        ]
    },
    {
        "id": "35964d7c748b3480",
        "type": "subflow:d296b4008b6072d8",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "MssqlFatKalem",
        "x": 2160,
        "y": 690,
        "wires": [
            [
                "45dbaf1bc347449c"
            ],
            []
        ]
    },
    {
        "id": "145d7e3ee1a6c8fd",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2380,
        "y": 680,
        "wires": []
    },
    {
        "id": "ae4186b82be82e39",
        "type": "comment",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "Sevkiyat Araç Detay Palet Sayı update",
        "info": "ALIS IADE",
        "x": 1720,
        "y": 640,
        "wires": []
    },
    {
        "id": "45dbaf1bc347449c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "res",
        "func": "msg.payload = {\n    type: 0,\n    sender: \"UPDATEPLADET\", // C# kodundaki varsayılan değeri koruduk\n    detail: \"İSLEM BASARILI\",\n    definitionLang: \"İSLEM BASARILI\",\n    data: [],\n    module: \"APIUPDATEPLADET\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 640,
        "wires": [
            [
                "145d7e3ee1a6c8fd"
            ]
        ]
    },
    {
        "id": "0f13199d5a1a4fb0",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "",
        "url": "VehicleList",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1580,
        "y": 500,
        "wires": [
            [
                "51b2d902da657c23"
            ]
        ]
    },
    {
        "id": "51b2d902da657c23",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "Get FatUst",
        "func": "\nmsg.flowName = \"Vehicle List1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n\n-- Son 7 gün içinde oluşmuş ya da oluşmamış e-Fatura / e-İrsaliye taslaklarının sipariş bağlantılarını listeler\nDECLARE @StartDate DATE = DATEADD(DAY, -6, CAST(GETDATE() AS DATE));\nDECLARE @EndDate   DATE = CAST(GETDATE() AS DATE);\n\nWITH EFATURA_EIRSALIYE_TASLAKLAR AS (\n    SELECT \n        F.CARI_KODU,\n        F.FATIRS_NO,\n        F.FTIRSIP,\n        F.TARIH,\n        F.TIPI,\n        F.EBELGE,\n        F.UPDATE_KODU,\n        F.KAPATILMIS,\n        E.DURUM,\n        E.GIB_FATIRS_NO,\n        C.CARI_ISIM\n    FROM TBLFATUIRS F\n    INNER JOIN TBLCASABIT C ON C.CARI_KOD = F.CARI_KODU\n    LEFT JOIN TBLEFATURA E \n        ON E.FTIRSIP = F.FTIRSIP \n        AND E.FATIRS_NO = F.FATIRS_NO \n        AND (E.CARI_KODU = F.CARI_KODU OR E.CARI_KODU = F.CARI_KOD2)\n),\nBELGE AS (\n    -- e-İrsaliye\n    SELECT \n        B.CARI_KODU,\n        B.FATIRS_NO,\n        B.DURUM,\n        B.GIB_FATIRS_NO,\n        B.CARI_ISIM,\n        B.FTIRSIP\n    FROM EFATURA_EIRSALIYE_TASLAKLAR B\n    INNER JOIN TBLCASABITEK CT ON CT.CARI_KOD = B.CARI_KODU\n    WHERE \n        B.FTIRSIP = '3'\n        AND B.EBELGE = 1\n        AND B.TARIH >= @StartDate\n        AND B.TARIH < DATEADD(DAY, 1, @EndDate)\n        AND B.TIPI <> 6\n        AND (B.DURUM = 1 OR B.DURUM IS NULL)\n\n    UNION ALL\n\n    -- e-Fatura\n    SELECT \n        B.CARI_KODU,\n        B.FATIRS_NO,\n        B.DURUM,\n        B.GIB_FATIRS_NO,\n        B.CARI_ISIM,\n        B.FTIRSIP\n    FROM EFATURA_EIRSALIYE_TASLAKLAR B\n    WHERE \n        B.FTIRSIP = '1'\n        AND B.TIPI <> '6'\n        AND B.TARIH >= @StartDate\n        AND B.TARIH < DATEADD(DAY, 1, @EndDate)\n        AND B.UPDATE_KODU IS NULL\n        AND ISNULL(B.KAPATILMIS, ' ') <> 'Z'\n        AND (B.DURUM = 1 OR B.DURUM IS NULL)\n),\nSIPARIS_BILGILERI AS (\n    SELECT \n        DISTINCT S.STHAR_SIPNUM,\n        S.STHAR_ACIKLAMA,\n        S.D_YEDEK10\n    FROM BELGE B\n    LEFT JOIN TBLSTHAR S \n        ON B.FATIRS_NO = S.FISNO \n       AND B.CARI_KODU = S.STHAR_ACIKLAMA \n       AND S.STHAR_SIPNUM IS NOT NULL\n)\nSELECT  DISTINCT \n    EK.KT_ROOTADI_6 AS RootAdi,\n     \n\tCONVERT(varchar, S.D_YEDEK10, 103) Sevk_Tarihi\nFROM SIPARIS_BILGILERI S\nLEFT JOIN TBLSIPAMASSAHAEK EK \n    ON S.STHAR_SIPNUM = EK.FATIRS_NO \n   AND S.STHAR_ACIKLAMA=EK.CARI_KODU\n\n\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 500,
        "wires": [
            [
                "c0d8b3a5b8edc27f"
            ]
        ]
    },
    {
        "id": "57b7457cce0cd571",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2310,
        "y": 500,
        "wires": []
    },
    {
        "id": "c0d8b3a5b8edc27f",
        "type": "subflow:d296b4008b6072d8",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "MssqlFatKalem",
        "x": 1930,
        "y": 500,
        "wires": [
            [
                "57b7457cce0cd571"
            ],
            [
                "57b7457cce0cd571"
            ]
        ]
    },
    {
        "id": "8a3376313de784b0",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "",
        "url": "SendDocumentPrint",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1610,
        "y": 450,
        "wires": [
            [
                "42ac81a8f619ef5c"
            ]
        ]
    },
    {
        "id": "42ac81a8f619ef5c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "Get FatUst",
        "func": "\nmsg.flowName = \"SendDocumentPrint1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = ` \n\n\nDECLARE @TargetRootadi NVARCHAR(100) = '${msg.payload.data.RootAdi}';\nDECLARE @TargetSevkTarihi DATE = CONVERT(DATE, '${msg.payload.data.Sevk_Tarihi}', 103); -- dd/MM/yyyy\nWITH EFATURA_EIRSALIYE_TASLAKLAR AS (\n    SELECT \n        F.CARI_KODU,\n        F.FATIRS_NO,\n        F.FTIRSIP,\n        F.TARIH,\n        F.TIPI,\n        F.EBELGE,\n        F.UPDATE_KODU,\n        F.KAPATILMIS,\n        E.DURUM,\n        E.GIB_FATIRS_NO,\n        DBO.TRK(C.CARI_ISIM) CARI_ISIM,\n\t\tC.GRUP_KODU,\n\t\tdbo.TRK(C1.CARI_ISIM) TESLIM_CARI\n    FROM TBLFATUIRS F\n    INNER JOIN TBLCASABIT C ON C.CARI_KOD = F.CARI_KODU\n    INNER JOIN TBLCASABIT C1 ON C1.CARI_KOD = F.CARI_KOD2\n\t\n    LEFT JOIN TBLEFATURA E \n        ON E.FTIRSIP = F.FTIRSIP \n        AND E.FATIRS_NO = F.FATIRS_NO \n        AND (E.CARI_KODU = F.CARI_KODU OR E.CARI_KODU = F.CARI_KOD2)\n\t\tWHERE \t  F.TARIH >= DATEADD(DAY, -6, CAST(GETDATE() AS DATE))\n\t\tAND F.TARIH < DATEADD(DAY, 1, CAST(GETDATE() AS DATE))\n\t\n),\nBELGE AS (\n    SELECT \n        B.CARI_KODU,\n        B.FATIRS_NO,\n        B.DURUM,\n        B.GIB_FATIRS_NO,\n        B.CARI_ISIM,\n        B.FTIRSIP,\n        B.TARIH,\n\t\tB.GRUP_KODU,\n\t\tB.TESLIM_CARI\n    FROM EFATURA_EIRSALIYE_TASLAKLAR B\n    WHERE (\n        (B.FTIRSIP = '3' AND B.EBELGE = 1)\n        OR B.FTIRSIP = '1'\n    )\n    AND B.TIPI <> 6 \n    AND (B.DURUM = 1 OR B.DURUM IS NULL)\n    AND (B.UPDATE_KODU IS NULL OR B.FTIRSIP = '3')\n    AND (ISNULL(B.KAPATILMIS, ' ') <> 'Z' OR B.FTIRSIP = '3')\n),\nMATCHED_BELGELER AS (\n    SELECT DISTINCT \n        B.*\n    FROM BELGE B\n    INNER JOIN TBLSTHAR S \n        ON B.FATIRS_NO = S.FISNO \n       AND B.CARI_KODU = S.STHAR_ACIKLAMA \n       AND S.STHAR_SIPNUM IS NOT NULL\n    INNER JOIN TBLSIPAMASSAHAEK EK\n        ON S.STHAR_SIPNUM = EK.FATIRS_NO \n       AND S.STHAR_ACIKLAMA = EK.CARI_KODU\n    WHERE \n        EK.KT_ROOTADI_6 = @TargetRootadi\n        AND CONVERT(DATE, S.D_YEDEK10) = @TargetSevkTarihi\n)\nSELECT \n    M.CARI_KODU,\n    M.FATIRS_NO BELGE_NO,\n    DBO.TRK(M.CARI_ISIM) CARI_ISIM,\n\tM.TESLIM_CARI ,\n    M.FTIRSIP,        \n    M.GIB_FATIRS_NO,\n\tM.GRUP_KODU\n\t\nFROM MATCHED_BELGELER M\nORDER BY M.TARIH DESC;\n\n\n\n\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 450,
        "wires": [
            [
                "2704ee50c02d887b"
            ]
        ]
    },
    {
        "id": "adb88c604793231e",
        "type": "http response",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2320,
        "y": 440,
        "wires": []
    },
    {
        "id": "2704ee50c02d887b",
        "type": "subflow:d296b4008b6072d8",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "MssqlFatKalem",
        "x": 2090,
        "y": 450,
        "wires": [
            [
                "adb88c604793231e"
            ],
            [
                "adb88c604793231e"
            ]
        ]
    },
    {
        "id": "2ff03ea4ac72a0c2",
        "type": "http in",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "",
        "url": "BtnSendDocumentPrint",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1620,
        "y": 390,
        "wires": [
            [
                "d71d446575b87df4"
            ]
        ]
    },
    {
        "id": "d71d446575b87df4",
        "type": "subflow:f3de0ac6bfb0216b",
        "z": "97e7314f695bb652",
        "g": "88bae8cb99425734",
        "name": "",
        "x": 1910,
        "y": 390,
        "wires": []
    },
    {
        "id": "8076c411f93508ac",
        "type": "http in",
        "z": "97e7314f695bb652",
        "name": "",
        "url": "SendMail",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1520,
        "y": 240,
        "wires": [
            [
                "09544ad82ab87cb5",
                "0227cf7425451757"
            ]
        ]
    },
    {
        "id": "09544ad82ab87cb5",
        "type": "http response",
        "z": "97e7314f695bb652",
        "name": "",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1820,
        "y": 240,
        "wires": []
    },
    {
        "id": "0227cf7425451757",
        "type": "debug",
        "z": "97e7314f695bb652",
        "name": "debug 477",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 270,
        "wires": []
    },
    {
        "id": "74f34ff289a840e0",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "a49dbe2ba93bc9f7",
        "name": "debug 478",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 1310,
        "wires": []
    },
    {
        "id": "355c1c80f6fb97d9",
        "type": "debug",
        "z": "97e7314f695bb652",
        "g": "2c9e0b2ace361a57",
        "name": "debug 490",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "query",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 740,
        "wires": []
    },
    {
        "id": "2e9552a344cd474c",
        "type": "function",
        "z": "97e7314f695bb652",
        "g": "fbd838edef29f218",
        "name": "Shipping_Vehicles_Detailv2",
        "func": "\nmsg.flowName = \"NetsisAracSablon1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n WITH A1 AS\n  (SELECT\n     (SELECT SUM(SP.STHAR_GCMIK * CASE\n                                      WHEN S.OLCU_BR1 = 'PL' THEN 1.0\n                                      WHEN S.OLCU_BR2 = 'PL' THEN CAST(S.PAY_1 AS FLOAT) / NULLIF(CAST(S.PAYDA_1 AS FLOAT), 0)\n                                      WHEN S.OLCU_BR3 = 'PL' THEN CAST(S.PAY2 AS FLOAT) / NULLIF(CAST(S.PAYDA2 AS FLOAT), 0)\n                                      WHEN B.OLCUBIRIMI='PL' THEN CAST(B.PAY AS FLOAT) / NULLIF(CAST(B.PAYDA AS FLOAT), 0)\n                                      ELSE 0\n                                  END) AS CarpanliMiktar\n      FROM TBLSIPATRA SP\n      LEFT JOIN TBLSTBIRIM B ON B.KOD =SP.STOK_KODU\n      LEFT JOIN TBLSTSABIT S ON S.STOK_KODU=SP.STOK_KODU\n      WHERE SP.FISNO=A.FATIRS_NO) AS PL_ADET,\n\t  B.KT_PALET_6 \n\t  ,\n\n\t  (SELECT SUM(SP1.STHAR_GCMIK)  FROM TBLSIPATRA SP1  WHERE SP1.FISNO=A.FATIRS_NO  ) AS TOPLAM_MIKTAR\n      ,D_YEDEK10\n\t  ,A.FATIRS_NO\n\t  ,A.CARI_KODU,\n\t  A.CARI_KOD2,\n\t  DBO.TRK(CS.CARI_ISIM) CARI_ISIM,\n\t  DBO.TRK(CST.CARI_ISIM) TESLIM_CARI_ISIM\n\nFROM TBLSIPAMAS A\nJOIN TBLSIPAMASSAHAEK B ON A.FATIRS_NO=B.FATIRS_NO\nLEFT JOIN TBLCASABIT CS ON CS.CARI_KOD=A.CARI_KODU\nLEFT JOIN TBLCASABIT CST ON CST.CARI_KOD=A.CARI_KOD2\nWHERE A.FTIRSIP=6\n  \n      AND B.KT_ROOTADI_6='${msg.payload.data.RootAdi}'\n    AND D_YEDEK10=CONVERT(datetime, '${msg.payload.data.Sevk_Tarihi}', 103)\n\t\n\t)\n\nSELECT  ISNULL(KT_PALET_6,FLOOR(PL_ADET))  PL_ADET,\nCAST(TOPLAM_MIKTAR AS decimal(18,2)) TOPLAM_SIPARIS_MIKTARI,\nCONVERT(varchar, D_YEDEK10, 104) SEVK_TARIHI,\nFATIRS_NO BELGE_NO,\nCARI_KODU,\nCARI_ISIM,\nCARI_KOD2 TESLIM_CARI,\nTESLIM_CARI_ISIM\n\n\nFROM A1\n\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 890,
        "wires": [
            [
                "f758928db9cd4a5d"
            ]
        ]
    },
    {
        "id": "9f40c5736908d48c",
        "type": "function",
        "z": "97e7314f695bb652",
        "d": true,
        "g": "d8d382cb55ab08da",
        "name": "NetsisAracSablonV1",
        "func": "\nmsg.flowName = \"NetsisAracSablon1_0\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\n\nSELECT LICENSEPLATEID PLAKA,CARRIERVKN TASIYICI_VKN,dbo.TRK(CARRIERNAME) TASIYICI_NAME , dbo.TRK(CARRIERSUBCITY) ILCE, \ndbo.TRK(CARRIERCITY) IL ,\ndbo.TRK(CARRIERCOUNTRY) ULKE,\ndbo.TRK(CARRIERPOSTAL) POSTA_KODU,\ndbo.TRK(DPERSON1FIRSTNAME) SOFOR1AD,\ndbo.TRK(DPERSON1FAMILYNAME) SOFOR1SOYAD,\ndbo.TRK(DPERSON1NID)SOFOR1TC,\n\ndbo.TRK(DPERSON2FIRSTNAME) SOFOR2AD,\ndbo.TRK(DPERSON2FAMILYNAME) SOFOR2SOYAD,\ndbo.TRK(DPERSON2NID)SOFOR2TC,\n\ndbo.TRK(DPERSON3FIRSTNAME) SOFOR3AD,\ndbo.TRK(DPERSON3FAMILYNAME) SOFOR3SOYAD,\ndbo.TRK(DPERSON3NID)SOFOR3TC FROM TBLEIRSABLON   ORDER BY LICENSEPLATEID DESC \n\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "1",
        "type": "inject",
        "z": "f1a7c99c.1d3f48",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "2"
            ]
        ]
    },
    {
        "id": "2",
        "type": "file in",
        "z": "f1a7c99c.1d3f48",
        "name": "Read Excel File",
        "filename": "/home/excel/TEST.xlsx",
        "filenameType": "str",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "16a22ba26f8a1e88"
            ]
        ]
    },
    {
        "id": "16a22ba26f8a1e88",
        "type": "book",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "raw": false,
        "x": 510,
        "y": 260,
        "wires": [
            [
                "d8d868693869951f"
            ]
        ]
    },
    {
        "id": "d8d868693869951f",
        "type": "sheet",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "sheetName": "Sayfa1",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "c5ee342f5b77a304"
            ]
        ]
    },
    {
        "id": "c5ee342f5b77a304",
        "type": "sheet-to-json",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "raw": "false",
        "range": "A1:I99999",
        "header": "default",
        "blankrows": true,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "d74b8a94b7d2f5aa"
            ]
        ]
    },
    {
        "id": "3314665f78edf16f",
        "type": "debug",
        "z": "f1a7c99c.1d3f48",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "listExcelValue",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 260,
        "wires": []
    },
    {
        "id": "d74b8a94b7d2f5aa",
        "type": "change",
        "z": "f1a7c99c.1d3f48",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "listExcelValue",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 975,
        "y": 260,
        "wires": [
            [
                "3314665f78edf16f"
            ]
        ],
        "l": false
    },
    {
        "id": "69e914bdcd5da288",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "ConvertJsonSforinProduct",
        "func": "// Gelen veriyi al\nconst netsisProductTypes = msg.netsisProductTypes;  //NETSİS İÇİN GELEN VERİLERDE TYPE ESLEMESI YAPIP NAME ALIYORZ\nvar data = msg.listExcelValue;\n\n// Map fonksiyonunu kullanarak yeni bir dizi oluştur\nvar Sforinproduct = data.map(item => {\n    return {\n        \"requestId\": \"\",\n        \"sender\": \"Node-RED-SFORIN\",\n        \"data\": [\n            {\n                \"code\": item.STOK_KODU,\n                \"company\": env.get(\"companyCode\"),\n                \"gtin\": \"\",\n                \"hasSubProducts\": false,\n                \"customerCodes\": [],\n                \"productType\": {\n                    \"typeCode\": item.TUR || \"D\",\n                    \"definitionLang\": (netsisProductTypes.find(x => x.productTypeCode == item.TUR)?.productTypeCodeName) || \"DIGER\"\n                    \n                },\n                \"categories\": [\n                    {\n                        \"categoryCode\": item.StokTemelBilgi.Grup_Kodu,\n                        \"definition_lang\": \"\",\n                        \"parentCategory\": \"NetsisGroupCode\"\n                    }\n                ],\n                \"units\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"isBaseUnit\": true,\n                        \"factor\": item.StokTemelBilgi.Pay_1,\n                        \"divisor\": item.StokTemelBilgi.Payda_1,\n                        \"area\": 1,\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weightKg\": 1,\n                        \"volumeM3\": 1,\n                        \"labels\": [\n                            {\n                                \"labelCode\": \"\",\n                                \"designFilePath\": \"\",\n                                \"customerCode\": \"\",\n                                \"packType\": \"\"\n                            }\n                        ]\n                    }\n                ],\n                \"barcodes\": [\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod1\n                    },\n                    {\n                        \"unitCode\": item.StokTemelBilgi.Olcu_Br1,\n                        \"barcode\": item.StokTemelBilgi.Barkod2\n                    }\n                ],\n                \"images\": [\n                    {\n                        \"imagePath\": \"\",\n                        \"sequence\": 0\n                    }\n                ],\n                \"subProducts\": null,\n                \"packTypes\": [\n                    {\n                        \"packtypeCode\": \"\",\n                        \"definition_lang\": \"en\",\n                        \"requiredMaterials\": [],\n                        \"widthM\": 1,\n                        \"heightM\": 1,\n                        \"depthM\": 1,\n                        \"weighthKg\": 1,\n                        \"area\": 1,\n                        \"wigthtLimitKG\": 1,\n                        \"handlingInstructions_lang\": \"en\",\n                        \"instructions_lang\": \"en\"\n                    }\n                ],\n                \"files\": [\n                    {\n                        \"code\": \"\",\n                        \"path\": \"\",\n                        \"validUntil\": new Date().toISOString(),\n                        \"createdOn\": new Date().toISOString(),\n                        \"fileDescriptionLang\": \"en\"\n                    }\n                ],\n                \"attributeValues\": [],\n                \"stockLevels\": [],\n                \"manufacturers\": [],\n                \"vendors\": [],\n                \"productStates\": {\n                    \"isActive\": true,\n                    \"isSellable\": true,\n                    \"passiveFor\": [],\n                    \"isEditable\": true,\n                    \"isAllowedToSync\": true\n                },\n                \"descriptions\": [\n                    {\n                        \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                        \"defaultDefinition\": item.StokTemelBilgi.Stok_Adi,\n                        \"shortenedDefinition\": \"\",\n                        \"longDefinition\": \"\",\n                        \"packagingDefinition\": \"\"\n                    }\n                ],\n                \"storageLocations\": [],\n                \"productDates\": {\n                    \"productCode\": item.StokTemelBilgi.Stok_Kodu,\n                    \"createdOn\": new Date().toISOString(),\n                    \"updatedOn\": new Date().toISOString(),\n                    \"lastMovedOn\": null,\n                    \"lastReceiptOn\": null,\n                    \"lastDeliveryOn\": null\n                },\n                \"productUsers\": [],\n                \"notes\": []\n            }\n        ],\n        \"current\": [\n            {\n                \"key\": \"\",\n                \"value\": \"\"\n            }\n        ]\n    };\n});\n\nmsg.sforinproduct = Sforinproduct;\n\nmsg.index = 0;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 540,
        "wires": [
            [
                "0fc304d9a0397cdd"
            ]
        ]
    },
    {
        "id": "d233cb08ef080f8c",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "function 16",
        "func": "\nlet items = msg.sforinproduct;\n \nlet index = msg.index;\nif (index >= items.length) {\n    return [null, msg]; \n}\n\nlet item = items[index];\nmsg.index = index;\nmsg.item=item;\nmsg.payload = item;\nmsg.headers = {\n    Authorization: \"Bearer \" + global.get(\"SforinToken\")\n};\nmsg.SFORIN_URL = env.get(\"SFORIN_URL\");\nmsg.statusCode=null\nreturn [msg, null];;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 520,
        "wires": [
            [],
            [
                "2cd911f23f85bec2"
            ]
        ]
    },
    {
        "id": "b8d3af0c103ae1a8",
        "type": "http request",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{SFORIN_URL}}}wmsmaster/api/WmsMaster/InsertProduct",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "Content-Type",
                "keyValue": "",
                "valueType": "application/json",
                "valueValue": ""
            }
        ],
        "x": 1130,
        "y": 520,
        "wires": [
            [
                "fabcb961c6197190"
            ]
        ]
    },
    {
        "id": "fabcb961c6197190",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "Response",
        "func": "if (msg.statusCode === 200) {\n    msg.index++;\n    \n    return [msg, null,null];\n}\nelse if (msg.statusCode === 401) {\n   \n   \n    return [null, msg,null];\n}\n\nelse {\n    // Handle error\n    return [null, null,msg];\n}",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 520,
        "wires": [
            [
                "4c771b7d72ec5214"
            ],
            [],
            [
                "6748ad1477caafc2"
            ]
        ]
    },
    {
        "id": "2cd911f23f85bec2",
        "type": "debug",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "end of transaction",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 560,
        "wires": []
    },
    {
        "id": "0fc304d9a0397cdd",
        "type": "subflow:fa51d0694c73d14f",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "x": 700,
        "y": 540,
        "wires": [
            [
                "d233cb08ef080f8c"
            ]
        ]
    },
    {
        "id": "cbc7bfc52b797780",
        "type": "comment",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "Product is being shipped",
        "info": "",
        "x": 210,
        "y": 460,
        "wires": []
    },
    {
        "id": "4c771b7d72ec5214",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 460,
        "wires": [
            [
                "c5da913ea07b269c"
            ]
        ]
    },
    {
        "id": "c5da913ea07b269c",
        "type": "subflow:7cdf28f23984a61d",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "SFORIN to Netsis Stock Card(Rest)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "status",
                "value": "succes",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1660,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "e9ca6b2287058cea",
        "type": "comment",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "Başarılı işlem log",
        "info": "",
        "x": 1620,
        "y": 420,
        "wires": []
    },
    {
        "id": "6748ad1477caafc2",
        "type": "function",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "ConvertLogData",
        "func": "msg.logData=msg.item;\nmsg.errorDescription = msg.payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 580,
        "wires": [
            [
                "4e1bbcf93be288f7"
            ]
        ]
    },
    {
        "id": "4e1bbcf93be288f7",
        "type": "subflow:7cdf28f23984a61d",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "env": [
            {
                "name": "SourceSystem",
                "value": "Netsis",
                "type": "str"
            },
            {
                "name": "SourceModule/Flow",
                "value": "Netsis  To SFORIN Stock Card(REST)",
                "type": "str"
            },
            {
                "name": "DestinationSystem",
                "value": "SFORIN",
                "type": "str"
            },
            {
                "name": "status",
                "value": "error",
                "type": "str"
            },
            {
                "name": "DestinationSystem\":",
                "value": "NETSIS",
                "type": "str"
            },
            {
                "name": "logData",
                "value": "{{{msg.payload}}}",
                "type": "str"
            }
        ],
        "x": 1560,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "19b7e563d0120af7",
        "type": "subflow:30dd5fc9ce2b5545",
        "z": "f1a7c99c.1d3f48",
        "g": "f95fc539736e93fc",
        "name": "",
        "env": [
            {
                "name": "IncludenetsisProductTypsCode",
                "value": "false",
                "type": "bool"
            }
        ],
        "x": 190,
        "y": 540,
        "wires": [
            [],
            [
                "69e914bdcd5da288"
            ]
        ],
        "info": "SADECE STOK TIPLERINI CEKICEK ISEK 1.CIKIS"
    },
    {
        "id": "f4973aa11bd2c838",
        "type": "comment",
        "z": "68459bb5ee15fc71",
        "name": "",
        "info": "Tetiklenecek cron ayarlaması ve node-red entegrasyon parametrelerini okur",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "89b91074653e42f8",
        "type": "switch",
        "z": "68459bb5ee15fc71",
        "name": "flowName Switch",
        "property": "payload.flowName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NTSP000V1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NTSC000V1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NTSBSO000V1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DelIntLogO000V1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "INTSYNC000V1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "NTSPD000V1.0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "STNRI000V1.0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 645,
        "y": 200,
        "wires": [
            [
                "9c64778cbb22874a"
            ],
            [],
            [],
            [],
            [
                "2cb8b6d49a195dc0"
            ],
            [],
            [
                "3fab78e36c929868"
            ],
            []
        ],
        "l": false
    },
    {
        "id": "676cf3610d10c8e3",
        "type": "split",
        "z": "68459bb5ee15fc71",
        "name": "Flow Name Split",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 585,
        "y": 200,
        "wires": [
            [
                "89b91074653e42f8"
            ]
        ],
        "l": false
    },
    {
        "id": "a83e1f4b90df6f2f",
        "type": "subflow:a464cb4f18f8f1f5",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1000,
        "y": 220,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "17de0232786154c4",
        "type": "function",
        "z": "68459bb5ee15fc71",
        "name": "Set Prop",
        "func": "node.warn(\"start\");\n \nmsg.payload=global.get('allIntegrationParameters')\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 505,
        "y": 210,
        "wires": [
            [
                "676cf3610d10c8e3"
            ]
        ],
        "l": false
    },
    {
        "id": "bb93ba3fc38d50e5",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 435,
        "y": 200,
        "wires": [
            [
                "17de0232786154c4"
            ]
        ],
        "l": false
    },
    {
        "id": "4925ffd17a7f6459",
        "type": "cronplus",
        "z": "68459bb5ee15fc71",
        "name": "Cron Scheduler",
        "outputField": "",
        "timeZone": "",
        "storeName": "",
        "commandResponseMsgOutput": "output1",
        "defaultLocation": "",
        "defaultLocationType": "default",
        "outputs": 1,
        "options": [],
        "x": 130,
        "y": 220,
        "wires": [
            [
                "bb93ba3fc38d50e5",
                "ea0fdcb8b96f34a9"
            ]
        ]
    },
    {
        "id": "3694d2189d43b4f7",
        "type": "inject",
        "z": "68459bb5ee15fc71",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 60,
        "wires": [
            [
                "bb93ba3fc38d50e5"
            ]
        ]
    },
    {
        "id": "ea9fa413f8ea865b",
        "type": "function",
        "z": "68459bb5ee15fc71",
        "name": "Set Cron",
        "func": "msg.payload = {\n    \"command\": \"add\",\n    \"name\": \"dynamic-cron\",\n    \"expression\": \"0 */12 * * *\",\n    \"payloadType\": \"json\",\n    \"payload\": { \"action\":\"Test\"}\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 180,
        "wires": [
            [
                "4925ffd17a7f6459"
            ]
        ]
    },
    {
        "id": "f6314757a576dd0c",
        "type": "inject",
        "z": "68459bb5ee15fc71",
        "name": "Inject JSON",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "ea9fa413f8ea865b"
            ]
        ]
    },
    {
        "id": "9c64778cbb22874a",
        "type": "subflow:b9701e9ae1caaffd",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1000,
        "y": 170,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "7bd7f234ee5da2ee",
        "type": "subflow:f62922f2ea3dfbe6",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1010,
        "y": 260,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a2ea21ad28271f74",
        "type": "subflow:e02241cc3f021318",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1000,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2cb8b6d49a195dc0",
        "type": "subflow:1053798a29903688",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1010,
        "y": 350,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3dba327d631822fb",
        "type": "subflow:c823b85caa289042",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1000,
        "y": 410,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "3fab78e36c929868",
        "type": "subflow:e269717c57799658",
        "z": "68459bb5ee15fc71",
        "name": "",
        "x": 1060,
        "y": 550,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ea0fdcb8b96f34a9",
        "type": "debug",
        "z": "68459bb5ee15fc71",
        "name": "debug 456",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 310,
        "wires": []
    },
    {
        "id": "2cfa1f5efbf5bf73",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "Sipariş aktarıldımı kontrol",
        "func": "\nmsg.flowName = \"STNSINV000V1\";\n\n// Sorguyu dinamik olarak oluştur\nlet query = `\nSELECT \n    CASE \n        WHEN EXISTS (\n            SELECT 1 \n            FROM TBLSTHAR \n            WHERE STHAR_SIPNUM = 'B2B000000000734'\n        )\n        THEN 1 \n        ELSE 0 \n    END AS KayitVarMi;\n \n`;\n\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "343ba9f8db21c843"
            ]
        ]
    },
    {
        "id": "c8dc4cbb8f6f8f3f",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 290,
        "wires": [
            [
                "2cfa1f5efbf5bf73"
            ]
        ]
    },
    {
        "id": "343ba9f8db21c843",
        "type": "subflow:d296b4008b6072d8",
        "z": "6ef8732eb0726477",
        "name": "MssqlFatKalem",
        "x": 1070,
        "y": 290,
        "wires": [
            [
                "897bab4e7a37a65b"
            ],
            []
        ]
    },
    {
        "id": "897bab4e7a37a65b",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 469",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0].KayitVarMi",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 270,
        "wires": []
    },
    {
        "id": "aa73a976290a7679",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "GIB_FATIRSNO",
        "func": "\n\n\nlet query = `\nSELECT  TOP 1 GIB_FATIRS_NO,CARI_KODU  FROM TBLEFATURA\n \n\n`;\n\nmsg.query = query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 480,
        "wires": [
            [
                "ecd4578828c1f3e0"
            ]
        ],
        "info": "E-BELGE  DIZAYNINI ALAMK ISICIN TASLAK OLUSTURMAK LAZIM ONDAN SONRA CIKTIYI ALABILRIZ"
    },
    {
        "id": "ecd4578828c1f3e0",
        "type": "subflow:d296b4008b6072d8",
        "z": "6ef8732eb0726477",
        "name": "MssqlFatKalem",
        "x": 890,
        "y": 520,
        "wires": [
            [
                "ca631a3924671905"
            ],
            []
        ]
    },
    {
        "id": "1dab1ffcedaeb813",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 440,
        "wires": [
            [
                "aa73a976290a7679"
            ]
        ]
    },
    {
        "id": "ca631a3924671905",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 487",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 500,
        "wires": []
    },
    {
        "id": "f3b291e96d03417a",
        "type": "inject",
        "z": "6ef8732eb0726477",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 700,
        "wires": [
            [
                "3ba84d7dba38c61f"
            ]
        ]
    },
    {
        "id": "f982c78296503eb0",
        "type": "subflow:23b1b01cc4ce5a0d",
        "z": "6ef8732eb0726477",
        "name": "",
        "env": [
            {
                "name": "collection",
                "value": "ProductionDoc",
                "type": "str"
            },
            {
                "name": "IsUpdated",
                "value": "true",
                "type": "bool"
            }
        ],
        "x": 1005,
        "y": 760,
        "wires": [
            [
                "622606d95d393f04"
            ]
        ],
        "icon": "node-red/mongodb.svg",
        "l": false
    },
    {
        "id": "4c3ae20661561d27",
        "type": "subflow:79ed7abbe7cc27ac",
        "z": "6ef8732eb0726477",
        "name": "",
        "env": [
            {
                "name": "Type",
                "value": "ProductionDoc",
                "type": "str"
            }
        ],
        "x": 945,
        "y": 760,
        "wires": [
            [
                "f982c78296503eb0"
            ]
        ],
        "l": false
    },
    {
        "id": "3ba84d7dba38c61f",
        "type": "function",
        "z": "6ef8732eb0726477",
        "name": "MongoQueryV2",
        "func": "\nconst query =   {\n  update: {\n    filter: {\n       \"Header.PrdDocNo\": {\"$in\":[\n  \"I00000000001725\"\n]}\n    },\n    update: {\n      $set: {\n        \"Header.StateObject\": \"CNF\",\n        \"Header.DocState\": \"CNF\"\n        \n      }\n    },\n    \n  }\n};\n;\n\nmsg.query=query;\n \nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 710,
        "wires": [
            [
                "4c3ae20661561d27"
            ]
        ]
    },
    {
        "id": "622606d95d393f04",
        "type": "debug",
        "z": "6ef8732eb0726477",
        "name": "debug 489",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 770,
        "wires": []
    },
    {
        "id": "87d93ae7d0737884",
        "type": "catch",
        "z": "3aca90fb83019832",
        "name": "",
        "scope": [
            "0cdf21d88e8a65c6",
            "4da88369e57a77f1",
            "9e8b86fadf16621b",
            "898c8e379945f8f4"
        ],
        "uncaught": false,
        "x": 460,
        "y": 230,
        "wires": [
            [
                "114357bbb30f9f5c"
            ]
        ]
    },
    {
        "id": "898c8e379945f8f4",
        "type": "inject",
        "z": "3aca90fb83019832",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 110,
        "wires": [
            [
                "9e8b86fadf16621b"
            ]
        ]
    },
    {
        "id": "9e8b86fadf16621b",
        "type": "function",
        "z": "3aca90fb83019832",
        "name": "function 166",
        "func": "msg.a =\"aa\"\n\n\nnode.warn(msg.a);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 120,
        "wires": [
            [
                "0cdf21d88e8a65c6"
            ]
        ]
    },
    {
        "id": "4da88369e57a77f1",
        "type": "debug",
        "z": "3aca90fb83019832",
        "name": "debug 458",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 130,
        "wires": []
    },
    {
        "id": "0cdf21d88e8a65c6",
        "type": "function",
        "z": "3aca90fb83019832",
        "name": "function 167",
        "func": "msg.a=\"222\";\nnode.warn(msg.a[0].aaa);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 70,
        "wires": [
            [
                "4da88369e57a77f1"
            ]
        ]
    },
    {
        "id": "114357bbb30f9f5c",
        "type": "debug",
        "z": "3aca90fb83019832",
        "name": "debug 459",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 240,
        "wires": []
    }
]